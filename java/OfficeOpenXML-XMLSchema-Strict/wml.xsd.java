// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

public class CT_Empty {
}

public class CT_OnOff {
	@XmlAttribute(name = "val")
	protected ST_OnOffAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LongHexNumber")
public class ST_LongHexNumber {
	protected List<Byte> ST_LongHexNumber;
}

public class CT_LongHexNumber {
	@XmlAttribute(name = "val", required = true)
	protected List<Byte>Attr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ShortHexNumber")
public class ST_ShortHexNumber {
	protected List<Byte> ST_ShortHexNumber;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_UcharHexNumber")
public class ST_UcharHexNumber {
	protected List<Byte> ST_UcharHexNumber;
}

public class CT_Charset {
	@XmlAttribute(name = "characterSet")
	protected StringAttr CharacterSet;
}

public class ST_DecimalNumberOrPercent {
	@XmlElement(required = true)
	protected String ST_Percentage;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DecimalNumber")
public class ST_DecimalNumber {
	protected Integer ST_DecimalNumber;
}

public class CT_DecimalNumber {
	@XmlAttribute(name = "val", required = true)
	protected IntegerAttr Val;
}

public class CT_UnsignedDecimalNumber {
	@XmlAttribute(name = "val", required = true)
	protected LongAttr Val;
}

public class CT_DecimalNumberOrPrecent {
	@XmlAttribute(name = "val", required = true)
	protected ST_DecimalNumberOrPercentAttr Val;
}

public class CT_TwipsMeasure {
	@XmlAttribute(name = "val", required = true)
	protected ST_TwipsMeasureAttr Val;
}

public class ST_SignedTwipsMeasure {
	@XmlElement(required = true)
	protected Integer Integer;
	@XmlElement(required = true)
	protected String ST_UniversalMeasure;
}

public class CT_SignedTwipsMeasure {
	@XmlAttribute(name = "val", required = true)
	protected ST_SignedTwipsMeasureAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PixelsMeasure")
public class ST_PixelsMeasure {
	protected Long ST_PixelsMeasure;
}

public class CT_PixelsMeasure {
	@XmlAttribute(name = "val", required = true)
	protected LongAttr Val;
}

public class ST_HpsMeasure {
	@XmlElement(required = true)
	protected Long ST_UnsignedDecimalNumber;
	@XmlElement(required = true)
	protected String ST_PositiveUniversalMeasure;
}

public class CT_HpsMeasure {
	@XmlAttribute(name = "val", required = true)
	protected ST_HpsMeasureAttr Val;
}

public class ST_SignedHpsMeasure {
	@XmlElement(required = true)
	protected Integer Integer;
	@XmlElement(required = true)
	protected String ST_UniversalMeasure;
}

public class CT_SignedHpsMeasure {
	@XmlAttribute(name = "val", required = true)
	protected ST_SignedHpsMeasureAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DateTime")
public class ST_DateTime {
	protected Byte ST_DateTime;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MacroName")
public class ST_MacroName {
	protected String ST_MacroName;
}

public class CT_MacroName {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_EighthPointMeasure")
public class ST_EighthPointMeasure {
	protected Long ST_EighthPointMeasure;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PointMeasure")
public class ST_PointMeasure {
	protected Long ST_PointMeasure;
}

public class CT_String {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class ST_TextScale {
	@XmlElement(required = true)
	protected ST_TextScalePercent ST_TextScalePercent;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextScalePercent")
public class ST_TextScalePercent {
	protected String ST_TextScalePercent;
}

public class CT_TextScale {
	@XmlAttribute(name = "val")
	protected ST_TextScaleAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HighlightColor")
public class ST_HighlightColor {
	protected String ST_HighlightColor;
}

public class CT_Highlight {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HexColorAuto")
public class ST_HexColorAuto {
	protected String ST_HexColorAuto;
}

public class ST_HexColor {
	@XmlElement(required = true)
	protected String ST_HexColorAuto;
	@XmlElement(required = true)
	protected List<Byte> ST_HexColorRGB;
}

public class CT_Color {
	@XmlAttribute(name = "val", required = true)
	protected ST_HexColorAttr Val;
	@XmlAttribute(name = "themeColor")
	protected StringAttr ThemeColor;
	@XmlAttribute(name = "themeTint")
	protected List<Byte>Attr ThemeTint;
	@XmlAttribute(name = "themeShade")
	protected List<Byte>Attr ThemeShade;
}

public class CT_Lang {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_Guid {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Underline")
public class ST_Underline {
	protected String ST_Underline;
}

public class CT_Underline {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
	@XmlAttribute(name = "color")
	protected ST_HexColorAttr Color;
	@XmlAttribute(name = "themeColor")
	protected StringAttr ThemeColor;
	@XmlAttribute(name = "themeTint")
	protected List<Byte>Attr ThemeTint;
	@XmlAttribute(name = "themeShade")
	protected List<Byte>Attr ThemeShade;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextEffect")
public class ST_TextEffect {
	protected String ST_TextEffect;
}

public class CT_TextEffect {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Border")
public class ST_Border {
	protected String ST_Border;
}

public class CT_Border {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	@XmlAttribute(name = "color")
	protected ST_HexColorAttr Color;
	@XmlAttribute(name = "themeColor")
	protected StringAttr ThemeColor;
	@XmlAttribute(name = "themeTint")
	protected List<Byte>Attr ThemeTint;
	@XmlAttribute(name = "themeShade")
	protected List<Byte>Attr ThemeShade;
	@XmlAttribute(name = "sz")
	protected LongAttr Sz;
	@XmlAttribute(name = "space")
	protected LongAttr Space;
	@XmlAttribute(name = "shadow")
	protected ST_OnOffAttr Shadow;
	@XmlAttribute(name = "frame")
	protected ST_OnOffAttr Frame;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Shd")
public class ST_Shd {
	protected String ST_Shd;
}

public class CT_Shd {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	@XmlAttribute(name = "color")
	protected ST_HexColorAttr Color;
	@XmlAttribute(name = "themeColor")
	protected StringAttr ThemeColor;
	@XmlAttribute(name = "themeTint")
	protected List<Byte>Attr ThemeTint;
	@XmlAttribute(name = "themeShade")
	protected List<Byte>Attr ThemeShade;
	@XmlAttribute(name = "fill")
	protected ST_HexColorAttr Fill;
	@XmlAttribute(name = "themeFill")
	protected StringAttr ThemeFill;
	@XmlAttribute(name = "themeFillTint")
	protected List<Byte>Attr ThemeFillTint;
	@XmlAttribute(name = "themeFillShade")
	protected List<Byte>Attr ThemeFillShade;
}

public class CT_VerticalAlignRun {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_FitText {
	@XmlAttribute(name = "val", required = true)
	protected ST_TwipsMeasureAttr Val;
	@XmlAttribute(name = "id")
	protected IntegerAttr Id;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Em")
public class ST_Em {
	protected String ST_Em;
}

public class CT_Em {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_Language {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
	@XmlAttribute(name = "eastAsia")
	protected StringAttr EastAsia;
	@XmlAttribute(name = "bidi")
	protected StringAttr Bidi;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CombineBrackets")
public class ST_CombineBrackets {
	protected String ST_CombineBrackets;
}

public class CT_EastAsianLayout {
	@XmlAttribute(name = "id")
	protected IntegerAttr Id;
	@XmlAttribute(name = "combine")
	protected ST_OnOffAttr Combine;
	@XmlAttribute(name = "combineBrackets")
	protected StringAttr CombineBrackets;
	@XmlAttribute(name = "vert")
	protected ST_OnOffAttr Vert;
	@XmlAttribute(name = "vertCompress")
	protected ST_OnOffAttr VertCompress;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HeightRule")
public class ST_HeightRule {
	protected String ST_HeightRule;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Wrap")
public class ST_Wrap {
	protected String ST_Wrap;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VAnchor")
public class ST_VAnchor {
	protected String ST_VAnchor;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HAnchor")
public class ST_HAnchor {
	protected String ST_HAnchor;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DropCap")
public class ST_DropCap {
	protected String ST_DropCap;
}

public class CT_FramePr {
	@XmlAttribute(name = "dropCap")
	protected StringAttr DropCap;
	@XmlAttribute(name = "lines")
	protected IntegerAttr Lines;
	@XmlAttribute(name = "w")
	protected ST_TwipsMeasureAttr W;
	@XmlAttribute(name = "h")
	protected ST_TwipsMeasureAttr H;
	@XmlAttribute(name = "vSpace")
	protected ST_TwipsMeasureAttr VSpace;
	@XmlAttribute(name = "hSpace")
	protected ST_TwipsMeasureAttr HSpace;
	@XmlAttribute(name = "wrap")
	protected StringAttr Wrap;
	@XmlAttribute(name = "hAnchor")
	protected StringAttr HAnchor;
	@XmlAttribute(name = "vAnchor")
	protected StringAttr VAnchor;
	@XmlAttribute(name = "x")
	protected ST_SignedTwipsMeasureAttr X;
	@XmlAttribute(name = "xAlign")
	protected StringAttr XAlign;
	@XmlAttribute(name = "y")
	protected ST_SignedTwipsMeasureAttr Y;
	@XmlAttribute(name = "yAlign")
	protected StringAttr YAlign;
	@XmlAttribute(name = "hRule")
	protected StringAttr HRule;
	@XmlAttribute(name = "anchorLock")
	protected ST_OnOffAttr AnchorLock;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TabJc")
public class ST_TabJc {
	protected String ST_TabJc;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TabTlc")
public class ST_TabTlc {
	protected String ST_TabTlc;
}

public class CT_TabStop {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	@XmlAttribute(name = "leader")
	protected StringAttr Leader;
	@XmlAttribute(name = "pos", required = true)
	protected ST_SignedTwipsMeasureAttr Pos;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineSpacingRule")
public class ST_LineSpacingRule {
	protected String ST_LineSpacingRule;
}

public class CT_Spacing {
	@XmlAttribute(name = "before")
	protected ST_TwipsMeasureAttr Before;
	@XmlAttribute(name = "beforeLines")
	protected IntegerAttr BeforeLines;
	@XmlAttribute(name = "beforeAutospacing")
	protected ST_OnOffAttr BeforeAutospacing;
	@XmlAttribute(name = "after")
	protected ST_TwipsMeasureAttr After;
	@XmlAttribute(name = "afterLines")
	protected IntegerAttr AfterLines;
	@XmlAttribute(name = "afterAutospacing")
	protected ST_OnOffAttr AfterAutospacing;
	@XmlAttribute(name = "line")
	protected ST_SignedTwipsMeasureAttr Line;
	@XmlAttribute(name = "lineRule")
	protected StringAttr LineRule;
}

public class CT_Ind {
	@XmlAttribute(name = "start")
	protected ST_SignedTwipsMeasureAttr Start;
	@XmlAttribute(name = "startChars")
	protected IntegerAttr StartChars;
	@XmlAttribute(name = "end")
	protected ST_SignedTwipsMeasureAttr End;
	@XmlAttribute(name = "endChars")
	protected IntegerAttr EndChars;
	@XmlAttribute(name = "hanging")
	protected ST_TwipsMeasureAttr Hanging;
	@XmlAttribute(name = "hangingChars")
	protected IntegerAttr HangingChars;
	@XmlAttribute(name = "firstLine")
	protected ST_TwipsMeasureAttr FirstLine;
	@XmlAttribute(name = "firstLineChars")
	protected IntegerAttr FirstLineChars;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Jc")
public class ST_Jc {
	protected String ST_Jc;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_JcTable")
public class ST_JcTable {
	protected String ST_JcTable;
}

public class CT_Jc {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_JcTable {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_View")
public class ST_View {
	protected String ST_View;
}

public class CT_View {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Zoom")
public class ST_Zoom {
	protected String ST_Zoom;
}

public class CT_Zoom {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
	@XmlAttribute(name = "percent", required = true)
	protected ST_DecimalNumberOrPercentAttr Percent;
}

public class CT_WritingStyle {
	@XmlAttribute(name = "lang", required = true)
	protected StringAttr Lang;
	@XmlAttribute(name = "vendorID", required = true)
	protected StringAttr VendorID;
	@XmlAttribute(name = "dllVersion", required = true)
	protected StringAttr DllVersion;
	@XmlAttribute(name = "nlCheck")
	protected ST_OnOffAttr NlCheck;
	@XmlAttribute(name = "checkStyle", required = true)
	protected ST_OnOffAttr CheckStyle;
	@XmlAttribute(name = "appName", required = true)
	protected StringAttr AppName;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Proof")
public class ST_Proof {
	protected String ST_Proof;
}

public class CT_Proof {
	@XmlAttribute(name = "spelling")
	protected StringAttr Spelling;
	@XmlAttribute(name = "grammar")
	protected StringAttr Grammar;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DocType")
public class ST_DocType {
	protected String ST_DocType;
}

public class CT_DocType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DocProtect")
public class ST_DocProtect {
	protected String ST_DocProtect;
}

public class AG_Password {
	@XmlAttribute(name = "algorithmName")
	protected StringAttr AlgorithmName;
	@XmlAttribute(name = "hashValue")
	protected List<Byte>Attr HashValue;
	@XmlAttribute(name = "saltValue")
	protected List<Byte>Attr SaltValue;
	@XmlAttribute(name = "spinCount")
	protected IntegerAttr SpinCount;
}

public class CT_DocProtect {
	@XmlElement(required = true)
	protected AG_Password AG_Password;
	@XmlAttribute(name = "edit")
	protected StringAttr Edit;
	@XmlAttribute(name = "formatting")
	protected ST_OnOffAttr Formatting;
	@XmlAttribute(name = "enforcement")
	protected ST_OnOffAttr Enforcement;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MailMergeDocType")
public class ST_MailMergeDocType {
	protected String ST_MailMergeDocType;
}

public class CT_MailMergeDocType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MailMergeDataType")
public class ST_MailMergeDataType {
	protected String ST_MailMergeDataType;
}

public class CT_MailMergeDataType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MailMergeDest")
public class ST_MailMergeDest {
	protected String ST_MailMergeDest;
}

public class CT_MailMergeDest {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MailMergeOdsoFMDFieldType")
public class ST_MailMergeOdsoFMDFieldType {
	protected String ST_MailMergeOdsoFMDFieldType;
}

public class CT_MailMergeOdsoFMDFieldType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_TrackChangesView {
	@XmlAttribute(name = "markup")
	protected ST_OnOffAttr Markup;
	@XmlAttribute(name = "comments")
	protected ST_OnOffAttr Comments;
	@XmlAttribute(name = "insDel")
	protected ST_OnOffAttr InsDel;
	@XmlAttribute(name = "formatting")
	protected ST_OnOffAttr Formatting;
	@XmlAttribute(name = "inkAnnotations")
	protected ST_OnOffAttr InkAnnotations;
}

public class CT_Kinsoku {
	@XmlAttribute(name = "lang", required = true)
	protected StringAttr Lang;
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextDirection")
public class ST_TextDirection {
	protected String ST_TextDirection;
}

public class CT_TextDirection {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextAlignment")
public class ST_TextAlignment {
	protected String ST_TextAlignment;
}

public class CT_TextAlignment {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DisplacedByCustomXml")
public class ST_DisplacedByCustomXml {
	protected String ST_DisplacedByCustomXml;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AnnotationVMerge")
public class ST_AnnotationVMerge {
	protected String ST_AnnotationVMerge;
}

public class CT_Markup {
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
}

public class CT_TrackChange {
	@XmlAttribute(name = "author", required = true)
	protected StringAttr Author;
	@XmlAttribute(name = "date")
	protected ByteAttr Date;
}

public class CT_CellMergeTrackChange {
	@XmlAttribute(name = "vMerge")
	protected StringAttr VMerge;
	@XmlAttribute(name = "vMergeOrig")
	protected StringAttr VMergeOrig;
}

public class CT_TrackChangeRange {
	@XmlAttribute(name = "displacedByCustomXml")
	protected StringAttr DisplacedByCustomXml;
}

public class CT_MarkupRange {
	@XmlAttribute(name = "displacedByCustomXml")
	protected StringAttr DisplacedByCustomXml;
}

public class CT_BookmarkRange {
	@XmlAttribute(name = "colFirst")
	protected IntegerAttr ColFirst;
	@XmlAttribute(name = "colLast")
	protected IntegerAttr ColLast;
}

public class CT_Bookmark {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
}

public class CT_MoveBookmark {
	@XmlAttribute(name = "author", required = true)
	protected StringAttr Author;
	@XmlAttribute(name = "date", required = true)
	protected ByteAttr Date;
}

public class CT_Comment {
	@XmlAttribute(name = "initials")
	protected StringAttr Initials;
	protected List<EG_BlockLevelElts> EG_BlockLevelElts;
}

public class CT_TblPrExChange {
	@XmlElement(required = true, name = "tblPrEx")
	protected CT_TblPrExBase TblPrEx;
}

public class CT_TcPrChange {
	@XmlElement(required = true, name = "tcPr")
	protected CT_TcPrInner TcPr;
}

public class CT_TrPrChange {
	@XmlElement(required = true, name = "trPr")
	protected CT_TrPrBase TrPr;
}

public class CT_TblGridChange {
	@XmlElement(required = true, name = "tblGrid")
	protected CT_TblGridBase TblGrid;
}

public class CT_TblPrChange {
	@XmlElement(required = true, name = "tblPr")
	protected CT_TblPrBase TblPr;
}

public class CT_SectPrChange {
	@XmlElement(required = true, name = "sectPr")
	protected CT_SectPrBase SectPr;
}

public class CT_PPrChange {
	@XmlElement(required = true, name = "pPr")
	protected CT_PPrBase PPr;
}

public class CT_RPrChange {
	@XmlElement(required = true, name = "rPr")
	protected CT_RPrOriginal RPr;
}

public class CT_ParaRPrChange {
	@XmlElement(required = true, name = "rPr")
	protected CT_ParaRPrOriginal RPr;
}

public class CT_RunTrackChange {
	protected EG_ContentRunContent EG_ContentRunContent;
	protected EG_OMathMathElements MEG_OMathMathElements;
}

public class EG_PContentMath {
	protected List<EG_PContentBase> EG_PContentBase;
	protected List<EG_ContentRunContentBase> EG_ContentRunContentBase;
}

public class EG_PContentBase {
	@XmlElement(required = true, name = "customXml")
	protected CT_CustomXmlRun CustomXml;
	@XmlElement(required = true, name = "fldSimple")
	protected List<CT_SimpleField> FldSimple;
	@XmlElement(required = true, name = "hyperlink")
	protected CT_Hyperlink Hyperlink;
}

public class EG_ContentRunContentBase {
	@XmlElement(required = true, name = "smartTag")
	protected CT_SmartTagRun SmartTag;
	@XmlElement(required = true, name = "sdt")
	protected CT_SdtRun Sdt;
	protected List<EG_RunLevelElts> EG_RunLevelElts;
}

public class EG_CellMarkupElements {
	@XmlElement(required = true, name = "cellIns")
	protected CT_TrackChange CellIns;
	@XmlElement(required = true, name = "cellDel")
	protected CT_TrackChange CellDel;
	@XmlElement(required = true, name = "cellMerge")
	protected CT_CellMergeTrackChange CellMerge;
}

public class EG_RangeMarkupElements {
	@XmlElement(required = true, name = "bookmarkStart")
	protected CT_Bookmark BookmarkStart;
	@XmlElement(required = true, name = "bookmarkEnd")
	protected CT_MarkupRange BookmarkEnd;
	@XmlElement(required = true, name = "moveFromRangeStart")
	protected CT_MoveBookmark MoveFromRangeStart;
	@XmlElement(required = true, name = "moveFromRangeEnd")
	protected CT_MarkupRange MoveFromRangeEnd;
	@XmlElement(required = true, name = "moveToRangeStart")
	protected CT_MoveBookmark MoveToRangeStart;
	@XmlElement(required = true, name = "moveToRangeEnd")
	protected CT_MarkupRange MoveToRangeEnd;
	@XmlElement(required = true, name = "commentRangeStart")
	protected CT_MarkupRange CommentRangeStart;
	@XmlElement(required = true, name = "commentRangeEnd")
	protected CT_MarkupRange CommentRangeEnd;
	@XmlElement(required = true, name = "customXmlInsRangeStart")
	protected CT_TrackChange CustomXmlInsRangeStart;
	@XmlElement(required = true, name = "customXmlInsRangeEnd")
	protected CT_Markup CustomXmlInsRangeEnd;
	@XmlElement(required = true, name = "customXmlDelRangeStart")
	protected CT_TrackChange CustomXmlDelRangeStart;
	@XmlElement(required = true, name = "customXmlDelRangeEnd")
	protected CT_Markup CustomXmlDelRangeEnd;
	@XmlElement(required = true, name = "customXmlMoveFromRangeStart")
	protected CT_TrackChange CustomXmlMoveFromRangeStart;
	@XmlElement(required = true, name = "customXmlMoveFromRangeEnd")
	protected CT_Markup CustomXmlMoveFromRangeEnd;
	@XmlElement(required = true, name = "customXmlMoveToRangeStart")
	protected CT_TrackChange CustomXmlMoveToRangeStart;
	@XmlElement(required = true, name = "customXmlMoveToRangeEnd")
	protected CT_Markup CustomXmlMoveToRangeEnd;
}

public class CT_NumPr {
	@XmlElement(required = true, name = "ilvl")
	protected CT_DecimalNumber Ilvl;
	@XmlElement(required = true, name = "numId")
	protected CT_DecimalNumber NumId;
	@XmlElement(required = true, name = "ins")
	protected CT_TrackChange Ins;
}

public class CT_PBdr {
	@XmlElement(required = true, name = "top")
	protected CT_Border Top;
	@XmlElement(required = true, name = "left")
	protected CT_Border Left;
	@XmlElement(required = true, name = "bottom")
	protected CT_Border Bottom;
	@XmlElement(required = true, name = "right")
	protected CT_Border Right;
	@XmlElement(required = true, name = "between")
	protected CT_Border Between;
	@XmlElement(required = true, name = "bar")
	protected CT_Border Bar;
}

public class CT_Tabs {
	@XmlElement(required = true, name = "tab")
	protected List<CT_TabStop> Tab;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextboxTightWrap")
public class ST_TextboxTightWrap {
	protected String ST_TextboxTightWrap;
}

public class CT_TextboxTightWrap {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_PPr {
	@XmlElement(required = true, name = "rPr")
	protected CT_ParaRPr RPr;
	@XmlElement(required = true, name = "sectPr")
	protected CT_SectPr SectPr;
	@XmlElement(required = true, name = "pPrChange")
	protected CT_PPrChange PPrChange;
}

public class CT_PPrBase {
	@XmlElement(required = true, name = "pStyle")
	protected CT_String PStyle;
	@XmlElement(required = true, name = "keepNext")
	protected CT_OnOff KeepNext;
	@XmlElement(required = true, name = "keepLines")
	protected CT_OnOff KeepLines;
	@XmlElement(required = true, name = "pageBreakBefore")
	protected CT_OnOff PageBreakBefore;
	@XmlElement(required = true, name = "framePr")
	protected CT_FramePr FramePr;
	@XmlElement(required = true, name = "widowControl")
	protected CT_OnOff WidowControl;
	@XmlElement(required = true, name = "numPr")
	protected CT_NumPr NumPr;
	@XmlElement(required = true, name = "suppressLineNumbers")
	protected CT_OnOff SuppressLineNumbers;
	@XmlElement(required = true, name = "pBdr")
	protected CT_PBdr PBdr;
	@XmlElement(required = true, name = "shd")
	protected CT_Shd Shd;
	@XmlElement(required = true, name = "tabs")
	protected CT_Tabs Tabs;
	@XmlElement(required = true, name = "suppressAutoHyphens")
	protected CT_OnOff SuppressAutoHyphens;
	@XmlElement(required = true, name = "kinsoku")
	protected CT_OnOff Kinsoku;
	@XmlElement(required = true, name = "wordWrap")
	protected CT_OnOff WordWrap;
	@XmlElement(required = true, name = "overflowPunct")
	protected CT_OnOff OverflowPunct;
	@XmlElement(required = true, name = "topLinePunct")
	protected CT_OnOff TopLinePunct;
	@XmlElement(required = true, name = "autoSpaceDE")
	protected CT_OnOff AutoSpaceDE;
	@XmlElement(required = true, name = "autoSpaceDN")
	protected CT_OnOff AutoSpaceDN;
	@XmlElement(required = true, name = "bidi")
	protected CT_OnOff Bidi;
	@XmlElement(required = true, name = "adjustRightInd")
	protected CT_OnOff AdjustRightInd;
	@XmlElement(required = true, name = "snapToGrid")
	protected CT_OnOff SnapToGrid;
	@XmlElement(required = true, name = "spacing")
	protected CT_Spacing Spacing;
	@XmlElement(required = true, name = "ind")
	protected CT_Ind Ind;
	@XmlElement(required = true, name = "contextualSpacing")
	protected CT_OnOff ContextualSpacing;
	@XmlElement(required = true, name = "mirrorIndents")
	protected CT_OnOff MirrorIndents;
	@XmlElement(required = true, name = "suppressOverlap")
	protected CT_OnOff SuppressOverlap;
	@XmlElement(required = true, name = "jc")
	protected CT_Jc Jc;
	@XmlElement(required = true, name = "textDirection")
	protected CT_TextDirection TextDirection;
	@XmlElement(required = true, name = "textAlignment")
	protected CT_TextAlignment TextAlignment;
	@XmlElement(required = true, name = "textboxTightWrap")
	protected CT_TextboxTightWrap TextboxTightWrap;
	@XmlElement(required = true, name = "outlineLvl")
	protected CT_DecimalNumber OutlineLvl;
	@XmlElement(required = true, name = "divId")
	protected CT_DecimalNumber DivId;
	@XmlElement(required = true, name = "cnfStyle")
	protected List<CT_Cnf> CnfStyle;
}

public class CT_PPrGeneral {
	@XmlElement(required = true, name = "pPrChange")
	protected CT_PPrChange PPrChange;
}

public class CT_Control {
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "shapeid")
	protected StringAttr Shapeid;
	@XmlAttribute(name = "r:id")
	protected StringAttr RId;
}

public class CT_Background {
	@XmlAttribute(name = "color")
	protected ST_HexColorAttr Color;
	@XmlAttribute(name = "themeColor")
	protected StringAttr ThemeColor;
	@XmlAttribute(name = "themeTint")
	protected List<Byte>Attr ThemeTint;
	@XmlAttribute(name = "themeShade")
	protected List<Byte>Attr ThemeShade;
	@XmlElement(required = true, name = "drawing")
	protected CT_Drawing Drawing;
}

public class CT_Rel {
	@XmlAttribute(name = "r:id", required = true)
	protected StringAttr RId;
}

public class CT_Object {
	@XmlAttribute(name = "dxaOrig")
	protected ST_TwipsMeasureAttr DxaOrig;
	@XmlAttribute(name = "dyaOrig")
	protected ST_TwipsMeasureAttr DyaOrig;
	@XmlElement(required = true, name = "drawing")
	protected CT_Drawing Drawing;
	@XmlElement(required = true, name = "control")
	protected CT_Control Control;
	@XmlElement(required = true, name = "objectLink")
	protected CT_ObjectLink ObjectLink;
	@XmlElement(required = true, name = "objectEmbed")
	protected CT_ObjectEmbed ObjectEmbed;
	@XmlElement(required = true, name = "movie")
	protected CT_Rel Movie;
}

public class CT_ObjectEmbed {
	@XmlAttribute(name = "drawAspect")
	protected StringAttr DrawAspect;
	@XmlAttribute(name = "r:id", required = true)
	protected StringAttr RId;
	@XmlAttribute(name = "progId")
	protected StringAttr ProgId;
	@XmlAttribute(name = "shapeId")
	protected StringAttr ShapeId;
	@XmlAttribute(name = "fieldCodes")
	protected StringAttr FieldCodes;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ObjectDrawAspect")
public class ST_ObjectDrawAspect {
	protected String ST_ObjectDrawAspect;
}

public class CT_ObjectLink {
	@XmlAttribute(name = "updateMode", required = true)
	protected StringAttr UpdateMode;
	@XmlAttribute(name = "lockedField")
	protected ST_OnOffAttr LockedField;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ObjectUpdateMode")
public class ST_ObjectUpdateMode {
	protected String ST_ObjectUpdateMode;
}

public class CT_Drawing {
	@XmlElement(required = true, name = "wp:anchor")
	protected CT_Anchor WpAnchor;
	@XmlElement(required = true, name = "wp:inline")
	protected CT_Inline WpInline;
}

public class CT_SimpleField {
	@XmlAttribute(name = "instr", required = true)
	protected StringAttr Instr;
	@XmlAttribute(name = "fldLock")
	protected ST_OnOffAttr FldLock;
	@XmlAttribute(name = "dirty")
	protected ST_OnOffAttr Dirty;
	protected List<EG_PContent> EG_PContent;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FldCharType")
public class ST_FldCharType {
	protected String ST_FldCharType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_InfoTextType")
public class ST_InfoTextType {
	protected String ST_InfoTextType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FFHelpTextVal")
public class ST_FFHelpTextVal {
	protected String ST_FFHelpTextVal;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FFStatusTextVal")
public class ST_FFStatusTextVal {
	protected String ST_FFStatusTextVal;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FFName")
public class ST_FFName {
	protected String ST_FFName;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FFTextType")
public class ST_FFTextType {
	protected String ST_FFTextType;
}

public class CT_FFTextType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_FFName {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_FldChar {
	@XmlAttribute(name = "fldCharType", required = true)
	protected StringAttr FldCharType;
	@XmlAttribute(name = "fldLock")
	protected ST_OnOffAttr FldLock;
	@XmlAttribute(name = "dirty")
	protected ST_OnOffAttr Dirty;
	@XmlElement(required = true, name = "ffData")
	protected List<CT_FFData> FfData;
}

public class CT_Hyperlink {
	@XmlAttribute(name = "tgtFrame")
	protected StringAttr TgtFrame;
	@XmlAttribute(name = "tooltip")
	protected StringAttr Tooltip;
	@XmlAttribute(name = "docLocation")
	protected StringAttr DocLocation;
	@XmlAttribute(name = "history")
	protected ST_OnOffAttr History;
	@XmlAttribute(name = "anchor")
	protected StringAttr Anchor;
	@XmlAttribute(name = "r:id")
	protected StringAttr RId;
	protected List<EG_PContent> EG_PContent;
}

public class CT_FFData {
	@XmlElement(required = true, name = "name")
	protected CT_FFName Name;
	@XmlElement(required = true, name = "label")
	protected CT_DecimalNumber Label;
	@XmlElement(required = true, name = "tabIndex")
	protected CT_UnsignedDecimalNumber TabIndex;
	@XmlElement(required = true, name = "enabled")
	protected CT_OnOff Enabled;
	@XmlElement(required = true, name = "calcOnExit")
	protected CT_OnOff CalcOnExit;
	@XmlElement(required = true, name = "entryMacro")
	protected List<CT_MacroName> EntryMacro;
	@XmlElement(required = true, name = "exitMacro")
	protected List<CT_MacroName> ExitMacro;
	@XmlElement(required = true, name = "helpText")
	protected List<CT_FFHelpText> HelpText;
	@XmlElement(required = true, name = "statusText")
	protected List<CT_FFStatusText> StatusText;
	@XmlElement(required = true, name = "checkBox")
	protected CT_FFCheckBox CheckBox;
	@XmlElement(required = true, name = "ddList")
	protected CT_FFDDList DdList;
	@XmlElement(required = true, name = "textInput")
	protected CT_FFTextInput TextInput;
}

public class CT_FFHelpText {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_FFStatusText {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_FFCheckBox {
	@XmlElement(required = true, name = "size")
	protected CT_HpsMeasure Size;
	@XmlElement(required = true, name = "sizeAuto")
	protected CT_OnOff SizeAuto;
	@XmlElement(required = true, name = "default")
	protected CT_OnOff Default;
	@XmlElement(required = true, name = "checked")
	protected CT_OnOff Checked;
}

public class CT_FFDDList {
	@XmlElement(required = true, name = "result")
	protected CT_DecimalNumber Result;
	@XmlElement(required = true, name = "default")
	protected CT_DecimalNumber Default;
	@XmlElement(required = true, name = "listEntry")
	protected List<CT_String> ListEntry;
}

public class CT_FFTextInput {
	@XmlElement(required = true, name = "type")
	protected CT_FFTextType Type;
	@XmlElement(required = true, name = "default")
	protected CT_String Default;
	@XmlElement(required = true, name = "maxLength")
	protected CT_DecimalNumber MaxLength;
	@XmlElement(required = true, name = "format")
	protected CT_String Format;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SectionMark")
public class ST_SectionMark {
	protected String ST_SectionMark;
}

public class CT_SectType {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_PaperSource {
	@XmlAttribute(name = "first")
	protected IntegerAttr First;
	@XmlAttribute(name = "other")
	protected IntegerAttr Other;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_NumberFormat")
public class ST_NumberFormat {
	protected String ST_NumberFormat;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PageOrientation")
public class ST_PageOrientation {
	protected String ST_PageOrientation;
}

public class CT_PageSz {
	@XmlAttribute(name = "w")
	protected ST_TwipsMeasureAttr W;
	@XmlAttribute(name = "h")
	protected ST_TwipsMeasureAttr H;
	@XmlAttribute(name = "orient")
	protected StringAttr Orient;
	@XmlAttribute(name = "code")
	protected IntegerAttr Code;
}

public class CT_PageMar {
	@XmlAttribute(name = "top", required = true)
	protected ST_SignedTwipsMeasureAttr Top;
	@XmlAttribute(name = "right", required = true)
	protected ST_TwipsMeasureAttr Right;
	@XmlAttribute(name = "bottom", required = true)
	protected ST_SignedTwipsMeasureAttr Bottom;
	@XmlAttribute(name = "left", required = true)
	protected ST_TwipsMeasureAttr Left;
	@XmlAttribute(name = "header", required = true)
	protected ST_TwipsMeasureAttr Header;
	@XmlAttribute(name = "footer", required = true)
	protected ST_TwipsMeasureAttr Footer;
	@XmlAttribute(name = "gutter", required = true)
	protected ST_TwipsMeasureAttr Gutter;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PageBorderZOrder")
public class ST_PageBorderZOrder {
	protected String ST_PageBorderZOrder;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PageBorderDisplay")
public class ST_PageBorderDisplay {
	protected String ST_PageBorderDisplay;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PageBorderOffset")
public class ST_PageBorderOffset {
	protected String ST_PageBorderOffset;
}

public class CT_PageBorders {
	@XmlAttribute(name = "zOrder")
	protected StringAttr ZOrder;
	@XmlAttribute(name = "display")
	protected StringAttr Display;
	@XmlAttribute(name = "offsetFrom")
	protected StringAttr OffsetFrom;
	@XmlElement(required = true, name = "top")
	protected CT_TopPageBorder Top;
	@XmlElement(required = true, name = "left")
	protected CT_PageBorder Left;
	@XmlElement(required = true, name = "bottom")
	protected CT_BottomPageBorder Bottom;
	@XmlElement(required = true, name = "right")
	protected CT_PageBorder Right;
}

public class CT_PageBorder {
	@XmlAttribute(name = "r:id")
	protected StringAttr RId;
}

public class CT_BottomPageBorder {
	@XmlAttribute(name = "r:bottomLeft")
	protected StringAttr RBottomLeft;
	@XmlAttribute(name = "r:bottomRight")
	protected StringAttr RBottomRight;
}

public class CT_TopPageBorder {
	@XmlAttribute(name = "r:topLeft")
	protected StringAttr RTopLeft;
	@XmlAttribute(name = "r:topRight")
	protected StringAttr RTopRight;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ChapterSep")
public class ST_ChapterSep {
	protected String ST_ChapterSep;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineNumberRestart")
public class ST_LineNumberRestart {
	protected String ST_LineNumberRestart;
}

public class CT_LineNumber {
	@XmlAttribute(name = "countBy")
	protected IntegerAttr CountBy;
	@XmlAttribute(name = "start")
	protected IntegerAttr Start;
	@XmlAttribute(name = "distance")
	protected ST_TwipsMeasureAttr Distance;
	@XmlAttribute(name = "restart")
	protected StringAttr Restart;
}

public class CT_PageNumber {
	@XmlAttribute(name = "fmt")
	protected StringAttr Fmt;
	@XmlAttribute(name = "start")
	protected IntegerAttr Start;
	@XmlAttribute(name = "chapStyle")
	protected IntegerAttr ChapStyle;
	@XmlAttribute(name = "chapSep")
	protected StringAttr ChapSep;
}

public class CT_Column {
	@XmlAttribute(name = "w")
	protected ST_TwipsMeasureAttr W;
	@XmlAttribute(name = "space")
	protected ST_TwipsMeasureAttr Space;
}

public class CT_Columns {
	@XmlAttribute(name = "equalWidth")
	protected ST_OnOffAttr EqualWidth;
	@XmlAttribute(name = "space")
	protected ST_TwipsMeasureAttr Space;
	@XmlAttribute(name = "num")
	protected IntegerAttr Num;
	@XmlAttribute(name = "sep")
	protected ST_OnOffAttr Sep;
	@XmlElement(required = true, name = "col")
	protected List<CT_Column> Col;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_VerticalJc")
public class ST_VerticalJc {
	protected String ST_VerticalJc;
}

public class CT_VerticalJc {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DocGrid")
public class ST_DocGrid {
	protected String ST_DocGrid;
}

public class CT_DocGrid {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "linePitch")
	protected IntegerAttr LinePitch;
	@XmlAttribute(name = "charSpace")
	protected IntegerAttr CharSpace;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_HdrFtr")
public class ST_HdrFtr {
	protected String ST_HdrFtr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FtnEdn")
public class ST_FtnEdn {
	protected String ST_FtnEdn;
}

public class CT_HdrFtrRef {
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
}

public class EG_HdrFtrReferences {
	@XmlElement(required = true, name = "headerReference")
	protected CT_HdrFtrRef HeaderReference;
	@XmlElement(required = true, name = "footerReference")
	protected CT_HdrFtrRef FooterReference;
}

public class CT_HdrFtr {
	protected List<EG_BlockLevelElts> EG_BlockLevelElts;
}

public class EG_SectPrContents {
	@XmlElement(required = true, name = "footnotePr")
	protected CT_FtnProps FootnotePr;
	@XmlElement(required = true, name = "endnotePr")
	protected CT_EdnProps EndnotePr;
	@XmlElement(required = true, name = "type")
	protected CT_SectType Type;
	@XmlElement(required = true, name = "pgSz")
	protected CT_PageSz PgSz;
	@XmlElement(required = true, name = "pgMar")
	protected CT_PageMar PgMar;
	@XmlElement(required = true, name = "paperSrc")
	protected CT_PaperSource PaperSrc;
	@XmlElement(required = true, name = "pgBorders")
	protected CT_PageBorders PgBorders;
	@XmlElement(required = true, name = "lnNumType")
	protected CT_LineNumber LnNumType;
	@XmlElement(required = true, name = "pgNumType")
	protected CT_PageNumber PgNumType;
	@XmlElement(required = true, name = "cols")
	protected CT_Columns Cols;
	@XmlElement(required = true, name = "formProt")
	protected CT_OnOff FormProt;
	@XmlElement(required = true, name = "vAlign")
	protected CT_VerticalJc VAlign;
	@XmlElement(required = true, name = "noEndnote")
	protected CT_OnOff NoEndnote;
	@XmlElement(required = true, name = "titlePg")
	protected CT_OnOff TitlePg;
	@XmlElement(required = true, name = "textDirection")
	protected CT_TextDirection TextDirection;
	@XmlElement(required = true, name = "bidi")
	protected CT_OnOff Bidi;
	@XmlElement(required = true, name = "rtlGutter")
	protected CT_OnOff RtlGutter;
	@XmlElement(required = true, name = "docGrid")
	protected CT_DocGrid DocGrid;
	@XmlElement(required = true, name = "printerSettings")
	protected CT_Rel PrinterSettings;
}

public class AG_SectPrAttributes {
	@XmlAttribute(name = "rsidRPr")
	protected List<Byte>Attr RsidRPr;
	@XmlAttribute(name = "rsidDel")
	protected List<Byte>Attr RsidDel;
	@XmlAttribute(name = "rsidR")
	protected List<Byte>Attr RsidR;
	@XmlAttribute(name = "rsidSect")
	protected List<Byte>Attr RsidSect;
}

public class CT_SectPrBase {
	@XmlElement(required = true)
	protected AG_SectPrAttributes AG_SectPrAttributes;
	protected EG_SectPrContents EG_SectPrContents;
}

public class CT_SectPr {
	@XmlElement(required = true)
	protected AG_SectPrAttributes AG_SectPrAttributes;
	protected List<EG_HdrFtrReferences> EG_HdrFtrReferences;
	protected EG_SectPrContents EG_SectPrContents;
	@XmlElement(required = true, name = "sectPrChange")
	protected CT_SectPrChange SectPrChange;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BrType")
public class ST_BrType {
	protected String ST_BrType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BrClear")
public class ST_BrClear {
	protected String ST_BrClear;
}

public class CT_Br {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "clear")
	protected StringAttr Clear;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PTabAlignment")
public class ST_PTabAlignment {
	protected String ST_PTabAlignment;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PTabRelativeTo")
public class ST_PTabRelativeTo {
	protected String ST_PTabRelativeTo;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PTabLeader")
public class ST_PTabLeader {
	protected String ST_PTabLeader;
}

public class CT_PTab {
	@XmlAttribute(name = "alignment", required = true)
	protected StringAttr Alignment;
	@XmlAttribute(name = "relativeTo", required = true)
	protected StringAttr RelativeTo;
	@XmlAttribute(name = "leader", required = true)
	protected StringAttr Leader;
}

public class CT_Sym {
	@XmlAttribute(name = "font")
	protected StringAttr Font;
	@XmlAttribute(name = "char")
	protected List<Byte>Attr Char;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ProofErr")
public class ST_ProofErr {
	protected String ST_ProofErr;
}

public class CT_ProofErr {
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_EdGrp")
public class ST_EdGrp {
	protected String ST_EdGrp;
}

public class CT_Perm {
	@XmlAttribute(name = "id", required = true)
	protected StringAttr Id;
	@XmlAttribute(name = "displacedByCustomXml")
	protected StringAttr DisplacedByCustomXml;
}

public class CT_PermStart {
	@XmlAttribute(name = "edGrp")
	protected StringAttr EdGrp;
	@XmlAttribute(name = "ed")
	protected StringAttr Ed;
	@XmlAttribute(name = "colFirst")
	protected IntegerAttr ColFirst;
	@XmlAttribute(name = "colLast")
	protected IntegerAttr ColLast;
}

public class CT_Text {
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

public class EG_RunInnerContent {
	@XmlElement(required = true, name = "br")
	protected CT_Br Br;
	@XmlElement(required = true, name = "t")
	protected CT_Text T;
	@XmlElement(required = true, name = "contentPart")
	protected CT_Rel ContentPart;
	@XmlElement(required = true, name = "delText")
	protected CT_Text DelText;
	@XmlElement(required = true, name = "instrText")
	protected CT_Text InstrText;
	@XmlElement(required = true, name = "delInstrText")
	protected CT_Text DelInstrText;
	@XmlElement(required = true, name = "noBreakHyphen")
	protected CT_Empty NoBreakHyphen;
	@XmlElement(required = true, name = "softHyphen")
	protected CT_Empty SoftHyphen;
	@XmlElement(required = true, name = "dayShort")
	protected CT_Empty DayShort;
	@XmlElement(required = true, name = "monthShort")
	protected CT_Empty MonthShort;
	@XmlElement(required = true, name = "yearShort")
	protected CT_Empty YearShort;
	@XmlElement(required = true, name = "dayLong")
	protected CT_Empty DayLong;
	@XmlElement(required = true, name = "monthLong")
	protected CT_Empty MonthLong;
	@XmlElement(required = true, name = "yearLong")
	protected CT_Empty YearLong;
	@XmlElement(required = true, name = "annotationRef")
	protected CT_Empty AnnotationRef;
	@XmlElement(required = true, name = "footnoteRef")
	protected CT_Empty FootnoteRef;
	@XmlElement(required = true, name = "endnoteRef")
	protected CT_Empty EndnoteRef;
	@XmlElement(required = true, name = "separator")
	protected CT_Empty Separator;
	@XmlElement(required = true, name = "continuationSeparator")
	protected CT_Empty ContinuationSeparator;
	@XmlElement(required = true, name = "sym")
	protected CT_Sym Sym;
	@XmlElement(required = true, name = "pgNum")
	protected CT_Empty PgNum;
	@XmlElement(required = true, name = "cr")
	protected CT_Empty Cr;
	@XmlElement(required = true, name = "tab")
	protected CT_Empty Tab;
	@XmlElement(required = true, name = "object")
	protected CT_Object Object;
	@XmlElement(required = true, name = "fldChar")
	protected CT_FldChar FldChar;
	@XmlElement(required = true, name = "ruby")
	protected CT_Ruby Ruby;
	@XmlElement(required = true, name = "footnoteReference")
	protected CT_FtnEdnRef FootnoteReference;
	@XmlElement(required = true, name = "endnoteReference")
	protected CT_FtnEdnRef EndnoteReference;
	@XmlElement(required = true, name = "commentReference")
	protected CT_Markup CommentReference;
	@XmlElement(required = true, name = "drawing")
	protected CT_Drawing Drawing;
	@XmlElement(required = true, name = "ptab")
	protected CT_PTab Ptab;
	@XmlElement(required = true, name = "lastRenderedPageBreak")
	protected List<CT_Empty> LastRenderedPageBreak;
}

public class CT_R {
	@XmlAttribute(name = "rsidRPr")
	protected List<Byte>Attr RsidRPr;
	@XmlAttribute(name = "rsidDel")
	protected List<Byte>Attr RsidDel;
	@XmlAttribute(name = "rsidR")
	protected List<Byte>Attr RsidR;
	protected EG_RPr EG_RPr;
	protected List<EG_RunInnerContent> EG_RunInnerContent;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Hint")
public class ST_Hint {
	protected String ST_Hint;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Theme")
public class ST_Theme {
	protected String ST_Theme;
}

public class CT_Fonts {
	@XmlAttribute(name = "hint")
	protected StringAttr Hint;
	@XmlAttribute(name = "ascii")
	protected StringAttr Ascii;
	@XmlAttribute(name = "hAnsi")
	protected StringAttr HAnsi;
	@XmlAttribute(name = "eastAsia")
	protected StringAttr EastAsia;
	@XmlAttribute(name = "cs")
	protected StringAttr Cs;
	@XmlAttribute(name = "asciiTheme")
	protected StringAttr AsciiTheme;
	@XmlAttribute(name = "hAnsiTheme")
	protected StringAttr HAnsiTheme;
	@XmlAttribute(name = "eastAsiaTheme")
	protected StringAttr EastAsiaTheme;
	@XmlAttribute(name = "cstheme")
	protected StringAttr Cstheme;
}

public class EG_RPrBase {
	@XmlElement(required = true, name = "rStyle")
	protected CT_String RStyle;
	@XmlElement(required = true, name = "rFonts")
	protected CT_Fonts RFonts;
	@XmlElement(required = true, name = "b")
	protected CT_OnOff B;
	@XmlElement(required = true, name = "bCs")
	protected CT_OnOff BCs;
	@XmlElement(required = true, name = "i")
	protected CT_OnOff I;
	@XmlElement(required = true, name = "iCs")
	protected CT_OnOff ICs;
	@XmlElement(required = true, name = "caps")
	protected CT_OnOff Caps;
	@XmlElement(required = true, name = "smallCaps")
	protected CT_OnOff SmallCaps;
	@XmlElement(required = true, name = "strike")
	protected CT_OnOff Strike;
	@XmlElement(required = true, name = "dstrike")
	protected CT_OnOff Dstrike;
	@XmlElement(required = true, name = "outline")
	protected CT_OnOff Outline;
	@XmlElement(required = true, name = "shadow")
	protected CT_OnOff Shadow;
	@XmlElement(required = true, name = "emboss")
	protected CT_OnOff Emboss;
	@XmlElement(required = true, name = "imprint")
	protected CT_OnOff Imprint;
	@XmlElement(required = true, name = "noProof")
	protected CT_OnOff NoProof;
	@XmlElement(required = true, name = "snapToGrid")
	protected CT_OnOff SnapToGrid;
	@XmlElement(required = true, name = "vanish")
	protected CT_OnOff Vanish;
	@XmlElement(required = true, name = "webHidden")
	protected CT_OnOff WebHidden;
	@XmlElement(required = true, name = "color")
	protected CT_Color Color;
	@XmlElement(required = true, name = "spacing")
	protected CT_SignedTwipsMeasure Spacing;
	@XmlElement(required = true, name = "w")
	protected CT_TextScale W;
	@XmlElement(required = true, name = "kern")
	protected CT_HpsMeasure Kern;
	@XmlElement(required = true, name = "position")
	protected CT_SignedHpsMeasure Position;
	@XmlElement(required = true, name = "sz")
	protected CT_HpsMeasure Sz;
	@XmlElement(required = true, name = "szCs")
	protected CT_HpsMeasure SzCs;
	@XmlElement(required = true, name = "highlight")
	protected CT_Highlight Highlight;
	@XmlElement(required = true, name = "u")
	protected CT_Underline U;
	@XmlElement(required = true, name = "effect")
	protected CT_TextEffect Effect;
	@XmlElement(required = true, name = "bdr")
	protected CT_Border Bdr;
	@XmlElement(required = true, name = "shd")
	protected CT_Shd Shd;
	@XmlElement(required = true, name = "fitText")
	protected CT_FitText FitText;
	@XmlElement(required = true, name = "vertAlign")
	protected CT_VerticalAlignRun VertAlign;
	@XmlElement(required = true, name = "rtl")
	protected CT_OnOff Rtl;
	@XmlElement(required = true, name = "cs")
	protected CT_OnOff Cs;
	@XmlElement(required = true, name = "em")
	protected CT_Em Em;
	@XmlElement(required = true, name = "lang")
	protected CT_Language Lang;
	@XmlElement(required = true, name = "eastAsianLayout")
	protected CT_EastAsianLayout EastAsianLayout;
	@XmlElement(required = true, name = "specVanish")
	protected CT_OnOff SpecVanish;
	@XmlElement(required = true, name = "oMath")
	protected CT_OnOff OMath;
}

public class EG_RPrContent {
	@XmlElement(required = true, name = "rPrChange")
	protected CT_RPrChange RPrChange;
	protected List<EG_RPrBase> EG_RPrBase;
}

public class CT_RPr {
	protected EG_RPrContent EG_RPrContent;
}

public class EG_RPr {
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
}

public class EG_RPrMath {
	@XmlElement(required = true, name = "ins")
	protected CT_MathCtrlIns Ins;
	@XmlElement(required = true, name = "del")
	protected CT_MathCtrlDel Del;
	protected EG_RPr EG_RPr;
}

public class CT_MathCtrlIns {
	@XmlElement(required = true, name = "del")
	protected CT_RPrChange Del;
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
}

public class CT_MathCtrlDel {
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
}

public class CT_RPrOriginal {
	protected List<EG_RPrBase> EG_RPrBase;
}

public class CT_ParaRPrOriginal {
	protected EG_ParaRPrTrackChanges EG_ParaRPrTrackChanges;
	protected List<EG_RPrBase> EG_RPrBase;
}

public class CT_ParaRPr {
	protected EG_ParaRPrTrackChanges EG_ParaRPrTrackChanges;
	protected List<EG_RPrBase> EG_RPrBase;
	@XmlElement(required = true, name = "rPrChange")
	protected CT_ParaRPrChange RPrChange;
}

public class EG_ParaRPrTrackChanges {
	@XmlElement(required = true, name = "ins")
	protected CT_TrackChange Ins;
	@XmlElement(required = true, name = "del")
	protected CT_TrackChange Del;
	@XmlElement(required = true, name = "moveFrom")
	protected CT_TrackChange MoveFrom;
	@XmlElement(required = true, name = "moveTo")
	protected CT_TrackChange MoveTo;
}

public class CT_AltChunk {
	@XmlAttribute(name = "r:id")
	protected StringAttr RId;
	@XmlElement(required = true, name = "altChunkPr")
	protected List<CT_AltChunkPr> AltChunkPr;
}

public class CT_AltChunkPr {
	@XmlElement(required = true, name = "matchSrc")
	protected List<CT_OnOff> MatchSrc;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RubyAlign")
public class ST_RubyAlign {
	protected String ST_RubyAlign;
}

public class CT_RubyAlign {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_RubyPr {
	@XmlElement(required = true, name = "rubyAlign")
	protected CT_RubyAlign RubyAlign;
	@XmlElement(required = true, name = "hps")
	protected CT_HpsMeasure Hps;
	@XmlElement(required = true, name = "hpsRaise")
	protected CT_HpsMeasure HpsRaise;
	@XmlElement(required = true, name = "hpsBaseText")
	protected CT_HpsMeasure HpsBaseText;
	@XmlElement(required = true, name = "lid")
	protected CT_Lang Lid;
	@XmlElement(required = true, name = "dirty")
	protected CT_OnOff Dirty;
}

public class EG_RubyContent {
	@XmlElement(required = true, name = "r")
	protected CT_R R;
	protected List<EG_RunLevelElts> EG_RunLevelElts;
}

public class CT_RubyContent {
	protected List<EG_RubyContent> EG_RubyContent;
}

public class CT_Ruby {
	@XmlElement(required = true, name = "rubyPr")
	protected CT_RubyPr RubyPr;
	@XmlElement(required = true, name = "rt")
	protected CT_RubyContent Rt;
	@XmlElement(required = true, name = "rubyBase")
	protected CT_RubyContent RubyBase;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Lock")
public class ST_Lock {
	protected String ST_Lock;
}

public class CT_Lock {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_SdtListItem {
	@XmlAttribute(name = "displayText")
	protected StringAttr DisplayText;
	@XmlAttribute(name = "value")
	protected StringAttr Value;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SdtDateMappingType")
public class ST_SdtDateMappingType {
	protected String ST_SdtDateMappingType;
}

public class CT_SdtDateMappingType {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_CalendarType {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_SdtDate {
	@XmlAttribute(name = "fullDate")
	protected ByteAttr FullDate;
	@XmlElement(required = true, name = "dateFormat")
	protected CT_String DateFormat;
	@XmlElement(required = true, name = "lid")
	protected CT_Lang Lid;
	@XmlElement(required = true, name = "storeMappedDataAs")
	protected CT_SdtDateMappingType StoreMappedDataAs;
	@XmlElement(required = true, name = "calendar")
	protected CT_CalendarType Calendar;
}

public class CT_SdtComboBox {
	@XmlAttribute(name = "lastValue")
	protected StringAttr LastValue;
	@XmlElement(required = true, name = "listItem")
	protected List<CT_SdtListItem> ListItem;
}

public class CT_SdtDocPart {
	@XmlElement(required = true, name = "docPartGallery")
	protected CT_String DocPartGallery;
	@XmlElement(required = true, name = "docPartCategory")
	protected CT_String DocPartCategory;
	@XmlElement(required = true, name = "docPartUnique")
	protected CT_OnOff DocPartUnique;
}

public class CT_SdtDropDownList {
	@XmlAttribute(name = "lastValue")
	protected StringAttr LastValue;
	@XmlElement(required = true, name = "listItem")
	protected List<CT_SdtListItem> ListItem;
}

public class CT_Placeholder {
	@XmlElement(required = true, name = "docPart")
	protected CT_String DocPart;
}

public class CT_SdtText {
	@XmlAttribute(name = "multiLine")
	protected ST_OnOffAttr MultiLine;
}

public class CT_DataBinding {
	@XmlAttribute(name = "prefixMappings")
	protected StringAttr PrefixMappings;
	@XmlAttribute(name = "xpath", required = true)
	protected StringAttr Xpath;
	@XmlAttribute(name = "storeItemID", required = true)
	protected StringAttr StoreItemID;
}

public class CT_SdtPr {
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
	@XmlElement(required = true, name = "alias")
	protected CT_String Alias;
	@XmlElement(required = true, name = "tag")
	protected CT_String Tag;
	@XmlElement(required = true, name = "id")
	protected CT_DecimalNumber Id;
	@XmlElement(required = true, name = "lock")
	protected CT_Lock Lock;
	@XmlElement(required = true, name = "placeholder")
	protected CT_Placeholder Placeholder;
	@XmlElement(required = true, name = "temporary")
	protected CT_OnOff Temporary;
	@XmlElement(required = true, name = "showingPlcHdr")
	protected CT_OnOff ShowingPlcHdr;
	@XmlElement(required = true, name = "dataBinding")
	protected CT_DataBinding DataBinding;
	@XmlElement(required = true, name = "label")
	protected CT_DecimalNumber Label;
	@XmlElement(required = true, name = "tabIndex")
	protected CT_UnsignedDecimalNumber TabIndex;
	@XmlElement(required = true, name = "equation")
	protected CT_Empty Equation;
	@XmlElement(required = true, name = "comboBox")
	protected CT_SdtComboBox ComboBox;
	@XmlElement(required = true, name = "date")
	protected CT_SdtDate Date;
	@XmlElement(required = true, name = "docPartObj")
	protected CT_SdtDocPart DocPartObj;
	@XmlElement(required = true, name = "docPartList")
	protected CT_SdtDocPart DocPartList;
	@XmlElement(required = true, name = "dropDownList")
	protected CT_SdtDropDownList DropDownList;
	@XmlElement(required = true, name = "picture")
	protected CT_Empty Picture;
	@XmlElement(required = true, name = "richText")
	protected CT_Empty RichText;
	@XmlElement(required = true, name = "text")
	protected CT_SdtText Text;
	@XmlElement(required = true, name = "citation")
	protected CT_Empty Citation;
	@XmlElement(required = true, name = "group")
	protected CT_Empty Group;
	@XmlElement(required = true, name = "bibliography")
	protected CT_Empty Bibliography;
}

public class CT_SdtEndPr {
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
}

public class EG_ContentRunContent {
	@XmlElement(required = true, name = "customXml")
	protected CT_CustomXmlRun CustomXml;
	@XmlElement(required = true, name = "smartTag")
	protected CT_SmartTagRun SmartTag;
	@XmlElement(required = true, name = "sdt")
	protected CT_SdtRun Sdt;
	@XmlElement(required = true, name = "dir")
	protected CT_DirContentRun Dir;
	@XmlElement(required = true, name = "bdo")
	protected CT_BdoContentRun Bdo;
	@XmlElement(required = true, name = "r")
	protected CT_R R;
	protected List<EG_RunLevelElts> EG_RunLevelElts;
}

public class CT_DirContentRun {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
	protected List<EG_PContent> EG_PContent;
}

public class CT_BdoContentRun {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
	protected List<EG_PContent> EG_PContent;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Direction")
public class ST_Direction {
	protected String ST_Direction;
}

public class CT_SdtContentRun {
	protected List<EG_PContent> EG_PContent;
}

public class EG_ContentBlockContent {
	@XmlElement(required = true, name = "customXml")
	protected CT_CustomXmlBlock CustomXml;
	@XmlElement(required = true, name = "sdt")
	protected CT_SdtBlock Sdt;
	@XmlElement(required = true, name = "p")
	protected List<CT_P> P;
	@XmlElement(required = true, name = "tbl")
	protected List<CT_Tbl> Tbl;
	protected List<EG_RunLevelElts> EG_RunLevelElts;
}

public class CT_SdtContentBlock {
	protected List<EG_ContentBlockContent> EG_ContentBlockContent;
}

public class EG_ContentRowContent {
	@XmlElement(required = true, name = "tr")
	protected List<CT_Row> Tr;
	@XmlElement(required = true, name = "customXml")
	protected CT_CustomXmlRow CustomXml;
	@XmlElement(required = true, name = "sdt")
	protected CT_SdtRow Sdt;
	protected List<EG_RunLevelElts> EG_RunLevelElts;
}

public class CT_SdtContentRow {
	protected List<EG_ContentRowContent> EG_ContentRowContent;
}

public class EG_ContentCellContent {
	@XmlElement(required = true, name = "tc")
	protected List<CT_Tc> Tc;
	@XmlElement(required = true, name = "customXml")
	protected CT_CustomXmlCell CustomXml;
	@XmlElement(required = true, name = "sdt")
	protected CT_SdtCell Sdt;
	protected List<EG_RunLevelElts> EG_RunLevelElts;
}

public class CT_SdtContentCell {
	protected List<EG_ContentCellContent> EG_ContentCellContent;
}

public class CT_SdtBlock {
	@XmlElement(required = true, name = "sdtPr")
	protected List<CT_SdtPr> SdtPr;
	@XmlElement(required = true, name = "sdtEndPr")
	protected List<CT_SdtEndPr> SdtEndPr;
	@XmlElement(required = true, name = "sdtContent")
	protected List<CT_SdtContentBlock> SdtContent;
}

public class CT_SdtRun {
	@XmlElement(required = true, name = "sdtPr")
	protected List<CT_SdtPr> SdtPr;
	@XmlElement(required = true, name = "sdtEndPr")
	protected List<CT_SdtEndPr> SdtEndPr;
	@XmlElement(required = true, name = "sdtContent")
	protected List<CT_SdtContentRun> SdtContent;
}

public class CT_SdtCell {
	@XmlElement(required = true, name = "sdtPr")
	protected List<CT_SdtPr> SdtPr;
	@XmlElement(required = true, name = "sdtEndPr")
	protected List<CT_SdtEndPr> SdtEndPr;
	@XmlElement(required = true, name = "sdtContent")
	protected List<CT_SdtContentCell> SdtContent;
}

public class CT_SdtRow {
	@XmlElement(required = true, name = "sdtPr")
	protected List<CT_SdtPr> SdtPr;
	@XmlElement(required = true, name = "sdtEndPr")
	protected List<CT_SdtEndPr> SdtEndPr;
	@XmlElement(required = true, name = "sdtContent")
	protected List<CT_SdtContentRow> SdtContent;
}

public class CT_Attr {
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_CustomXmlRun {
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "element", required = true)
	protected StringAttr Element;
	protected List<EG_PContent> EG_PContent;
	@XmlElement(required = true, name = "customXmlPr")
	protected List<CT_CustomXmlPr> CustomXmlPr;
}

public class CT_SmartTagRun {
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "element", required = true)
	protected StringAttr Element;
	protected List<EG_PContent> EG_PContent;
	@XmlElement(required = true, name = "smartTagPr")
	protected List<CT_SmartTagPr> SmartTagPr;
}

public class CT_CustomXmlBlock {
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "element", required = true)
	protected StringAttr Element;
	protected List<EG_ContentBlockContent> EG_ContentBlockContent;
	@XmlElement(required = true, name = "customXmlPr")
	protected List<CT_CustomXmlPr> CustomXmlPr;
}

public class CT_CustomXmlPr {
	@XmlElement(required = true, name = "placeholder")
	protected CT_String Placeholder;
	@XmlElement(required = true, name = "attr")
	protected List<CT_Attr> Attr;
}

public class CT_CustomXmlRow {
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "element", required = true)
	protected StringAttr Element;
	protected List<EG_ContentRowContent> EG_ContentRowContent;
	@XmlElement(required = true, name = "customXmlPr")
	protected List<CT_CustomXmlPr> CustomXmlPr;
}

public class CT_CustomXmlCell {
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "element", required = true)
	protected StringAttr Element;
	protected List<EG_ContentCellContent> EG_ContentCellContent;
	@XmlElement(required = true, name = "customXmlPr")
	protected List<CT_CustomXmlPr> CustomXmlPr;
}

public class CT_SmartTagPr {
	@XmlElement(required = true, name = "attr")
	protected List<CT_Attr> Attr;
}

public class EG_PContent {
	@XmlElement(required = true, name = "fldSimple")
	protected List<CT_SimpleField> FldSimple;
	@XmlElement(required = true, name = "hyperlink")
	protected CT_Hyperlink Hyperlink;
	@XmlElement(required = true, name = "subDoc")
	protected CT_Rel SubDoc;
	protected List<EG_ContentRunContent> EG_ContentRunContent;
}

public class CT_P {
	@XmlAttribute(name = "rsidRPr")
	protected List<Byte>Attr RsidRPr;
	@XmlAttribute(name = "rsidR")
	protected List<Byte>Attr RsidR;
	@XmlAttribute(name = "rsidDel")
	protected List<Byte>Attr RsidDel;
	@XmlAttribute(name = "rsidP")
	protected List<Byte>Attr RsidP;
	@XmlAttribute(name = "rsidRDefault")
	protected List<Byte>Attr RsidRDefault;
	protected List<EG_PContent> EG_PContent;
	@XmlElement(required = true, name = "pPr")
	protected CT_PPr PPr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TblWidth")
public class ST_TblWidth {
	protected String ST_TblWidth;
}

public class CT_Height {
	@XmlAttribute(name = "val")
	protected ST_TwipsMeasureAttr Val;
	@XmlAttribute(name = "hRule")
	protected StringAttr HRule;
}

public class ST_MeasurementOrPercent {
	@XmlElement(required = true)
	protected ST_DecimalNumberOrPercent ST_DecimalNumberOrPercent;
	@XmlElement(required = true)
	protected String ST_UniversalMeasure;
}

public class CT_TblWidth {
	@XmlAttribute(name = "w")
	protected ST_MeasurementOrPercentAttr W;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
}

public class CT_TblGridCol {
	@XmlAttribute(name = "w")
	protected ST_TwipsMeasureAttr W;
}

public class CT_TblGridBase {
	@XmlElement(required = true, name = "gridCol")
	protected List<CT_TblGridCol> GridCol;
}

public class CT_TblGrid {
	@XmlElement(required = true, name = "tblGridChange")
	protected CT_TblGridChange TblGridChange;
}

public class CT_TcBorders {
	@XmlElement(required = true, name = "top")
	protected CT_Border Top;
	@XmlElement(required = true, name = "start")
	protected CT_Border Start;
	@XmlElement(required = true, name = "bottom")
	protected CT_Border Bottom;
	@XmlElement(required = true, name = "end")
	protected CT_Border End;
	@XmlElement(required = true, name = "insideH")
	protected CT_Border InsideH;
	@XmlElement(required = true, name = "insideV")
	protected CT_Border InsideV;
	@XmlElement(required = true, name = "tl2br")
	protected CT_Border Tl2br;
	@XmlElement(required = true, name = "tr2bl")
	protected CT_Border Tr2bl;
}

public class CT_TcMar {
	@XmlElement(required = true, name = "top")
	protected List<CT_TblWidth> Top;
	@XmlElement(required = true, name = "start")
	protected List<CT_TblWidth> Start;
	@XmlElement(required = true, name = "bottom")
	protected List<CT_TblWidth> Bottom;
	@XmlElement(required = true, name = "end")
	protected List<CT_TblWidth> End;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Merge")
public class ST_Merge {
	protected String ST_Merge;
}

public class CT_VMerge {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_TcPrBase {
	@XmlElement(required = true, name = "cnfStyle")
	protected List<CT_Cnf> CnfStyle;
	@XmlElement(required = true, name = "tcW")
	protected List<CT_TblWidth> TcW;
	@XmlElement(required = true, name = "gridSpan")
	protected CT_DecimalNumber GridSpan;
	@XmlElement(required = true, name = "vMerge")
	protected CT_VMerge VMerge;
	@XmlElement(required = true, name = "tcBorders")
	protected List<CT_TcBorders> TcBorders;
	@XmlElement(required = true, name = "shd")
	protected CT_Shd Shd;
	@XmlElement(required = true, name = "noWrap")
	protected CT_OnOff NoWrap;
	@XmlElement(required = true, name = "tcMar")
	protected List<CT_TcMar> TcMar;
	@XmlElement(required = true, name = "textDirection")
	protected List<CT_TextDirection> TextDirection;
	@XmlElement(required = true, name = "tcFitText")
	protected List<CT_OnOff> TcFitText;
	@XmlElement(required = true, name = "vAlign")
	protected CT_VerticalJc VAlign;
	@XmlElement(required = true, name = "hideMark")
	protected CT_OnOff HideMark;
	@XmlElement(required = true, name = "headers")
	protected CT_Headers Headers;
}

public class CT_TcPr {
	@XmlElement(required = true, name = "tcPrChange")
	protected CT_TcPrChange TcPrChange;
}

public class CT_TcPrInner {
	protected List<EG_CellMarkupElements> EG_CellMarkupElements;
}

public class CT_Tc {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	protected List<EG_BlockLevelElts> EG_BlockLevelElts;
	@XmlElement(required = true, name = "tcPr")
	protected List<CT_TcPr> TcPr;
}

public class CT_Cnf {
	@XmlAttribute(name = "firstRow")
	protected ST_OnOffAttr FirstRow;
	@XmlAttribute(name = "lastRow")
	protected ST_OnOffAttr LastRow;
	@XmlAttribute(name = "firstColumn")
	protected ST_OnOffAttr FirstColumn;
	@XmlAttribute(name = "lastColumn")
	protected ST_OnOffAttr LastColumn;
	@XmlAttribute(name = "oddVBand")
	protected ST_OnOffAttr OddVBand;
	@XmlAttribute(name = "evenVBand")
	protected ST_OnOffAttr EvenVBand;
	@XmlAttribute(name = "oddHBand")
	protected ST_OnOffAttr OddHBand;
	@XmlAttribute(name = "evenHBand")
	protected ST_OnOffAttr EvenHBand;
	@XmlAttribute(name = "firstRowFirstColumn")
	protected ST_OnOffAttr FirstRowFirstColumn;
	@XmlAttribute(name = "firstRowLastColumn")
	protected ST_OnOffAttr FirstRowLastColumn;
	@XmlAttribute(name = "lastRowFirstColumn")
	protected ST_OnOffAttr LastRowFirstColumn;
	@XmlAttribute(name = "lastRowLastColumn")
	protected ST_OnOffAttr LastRowLastColumn;
}

public class CT_Headers {
	@XmlElement(required = true, name = "header")
	protected CT_String Header;
}

public class CT_TrPrBase {
	@XmlElement(required = true, name = "cnfStyle")
	protected List<CT_Cnf> CnfStyle;
	@XmlElement(required = true, name = "divId")
	protected CT_DecimalNumber DivId;
	@XmlElement(required = true, name = "gridBefore")
	protected CT_DecimalNumber GridBefore;
	@XmlElement(required = true, name = "gridAfter")
	protected CT_DecimalNumber GridAfter;
	@XmlElement(required = true, name = "wBefore")
	protected List<CT_TblWidth> WBefore;
	@XmlElement(required = true, name = "wAfter")
	protected List<CT_TblWidth> WAfter;
	@XmlElement(required = true, name = "cantSplit")
	protected CT_OnOff CantSplit;
	@XmlElement(required = true, name = "trHeight")
	protected CT_Height TrHeight;
	@XmlElement(required = true, name = "tblHeader")
	protected CT_OnOff TblHeader;
	@XmlElement(required = true, name = "tblCellSpacing")
	protected List<CT_TblWidth> TblCellSpacing;
	@XmlElement(required = true, name = "jc")
	protected List<CT_JcTable> Jc;
	@XmlElement(required = true, name = "hidden")
	protected CT_OnOff Hidden;
}

public class CT_TrPr {
	@XmlElement(required = true, name = "ins")
	protected CT_TrackChange Ins;
	@XmlElement(required = true, name = "del")
	protected CT_TrackChange Del;
	@XmlElement(required = true, name = "trPrChange")
	protected CT_TrPrChange TrPrChange;
}

public class CT_Row {
	@XmlAttribute(name = "rsidRPr")
	protected List<Byte>Attr RsidRPr;
	@XmlAttribute(name = "rsidR")
	protected List<Byte>Attr RsidR;
	@XmlAttribute(name = "rsidDel")
	protected List<Byte>Attr RsidDel;
	@XmlAttribute(name = "rsidTr")
	protected List<Byte>Attr RsidTr;
	protected List<EG_ContentCellContent> EG_ContentCellContent;
	@XmlElement(required = true, name = "tblPrEx")
	protected List<CT_TblPrEx> TblPrEx;
	@XmlElement(required = true, name = "trPr")
	protected List<CT_TrPr> TrPr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TblLayoutType")
public class ST_TblLayoutType {
	protected String ST_TblLayoutType;
}

public class CT_TblLayoutType {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TblOverlap")
public class ST_TblOverlap {
	protected String ST_TblOverlap;
}

public class CT_TblOverlap {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_TblPPr {
	@XmlAttribute(name = "leftFromText")
	protected ST_TwipsMeasureAttr LeftFromText;
	@XmlAttribute(name = "rightFromText")
	protected ST_TwipsMeasureAttr RightFromText;
	@XmlAttribute(name = "topFromText")
	protected ST_TwipsMeasureAttr TopFromText;
	@XmlAttribute(name = "bottomFromText")
	protected ST_TwipsMeasureAttr BottomFromText;
	@XmlAttribute(name = "vertAnchor")
	protected StringAttr VertAnchor;
	@XmlAttribute(name = "horzAnchor")
	protected StringAttr HorzAnchor;
	@XmlAttribute(name = "tblpXSpec")
	protected StringAttr TblpXSpec;
	@XmlAttribute(name = "tblpX")
	protected ST_SignedTwipsMeasureAttr TblpX;
	@XmlAttribute(name = "tblpYSpec")
	protected StringAttr TblpYSpec;
	@XmlAttribute(name = "tblpY")
	protected ST_SignedTwipsMeasureAttr TblpY;
}

public class CT_TblCellMar {
	@XmlElement(required = true, name = "top")
	protected List<CT_TblWidth> Top;
	@XmlElement(required = true, name = "start")
	protected List<CT_TblWidth> Start;
	@XmlElement(required = true, name = "bottom")
	protected List<CT_TblWidth> Bottom;
	@XmlElement(required = true, name = "end")
	protected List<CT_TblWidth> End;
}

public class CT_TblBorders {
	@XmlElement(required = true, name = "top")
	protected CT_Border Top;
	@XmlElement(required = true, name = "start")
	protected CT_Border Start;
	@XmlElement(required = true, name = "bottom")
	protected CT_Border Bottom;
	@XmlElement(required = true, name = "end")
	protected CT_Border End;
	@XmlElement(required = true, name = "insideH")
	protected CT_Border InsideH;
	@XmlElement(required = true, name = "insideV")
	protected CT_Border InsideV;
}

public class CT_TblPrBase {
	@XmlElement(required = true, name = "tblStyle")
	protected CT_String TblStyle;
	@XmlElement(required = true, name = "tblpPr")
	protected List<CT_TblPPr> TblpPr;
	@XmlElement(required = true, name = "tblOverlap")
	protected List<CT_TblOverlap> TblOverlap;
	@XmlElement(required = true, name = "bidiVisual")
	protected List<CT_OnOff> BidiVisual;
	@XmlElement(required = true, name = "tblStyleRowBandSize")
	protected List<CT_DecimalNumber> TblStyleRowBandSize;
	@XmlElement(required = true, name = "tblStyleColBandSize")
	protected List<CT_DecimalNumber> TblStyleColBandSize;
	@XmlElement(required = true, name = "tblW")
	protected List<CT_TblWidth> TblW;
	@XmlElement(required = true, name = "jc")
	protected List<CT_JcTable> Jc;
	@XmlElement(required = true, name = "tblCellSpacing")
	protected List<CT_TblWidth> TblCellSpacing;
	@XmlElement(required = true, name = "tblInd")
	protected List<CT_TblWidth> TblInd;
	@XmlElement(required = true, name = "tblBorders")
	protected List<CT_TblBorders> TblBorders;
	@XmlElement(required = true, name = "shd")
	protected List<CT_Shd> Shd;
	@XmlElement(required = true, name = "tblLayout")
	protected List<CT_TblLayoutType> TblLayout;
	@XmlElement(required = true, name = "tblCellMar")
	protected List<CT_TblCellMar> TblCellMar;
	@XmlElement(required = true, name = "tblLook")
	protected List<CT_TblLook> TblLook;
	@XmlElement(required = true, name = "tblCaption")
	protected List<CT_String> TblCaption;
	@XmlElement(required = true, name = "tblDescription")
	protected List<CT_String> TblDescription;
}

public class CT_TblPr {
	@XmlElement(required = true, name = "tblPrChange")
	protected CT_TblPrChange TblPrChange;
}

public class CT_TblPrExBase {
	@XmlElement(required = true, name = "tblW")
	protected List<CT_TblWidth> TblW;
	@XmlElement(required = true, name = "jc")
	protected List<CT_JcTable> Jc;
	@XmlElement(required = true, name = "tblCellSpacing")
	protected List<CT_TblWidth> TblCellSpacing;
	@XmlElement(required = true, name = "tblInd")
	protected List<CT_TblWidth> TblInd;
	@XmlElement(required = true, name = "tblBorders")
	protected List<CT_TblBorders> TblBorders;
	@XmlElement(required = true, name = "shd")
	protected List<CT_Shd> Shd;
	@XmlElement(required = true, name = "tblLayout")
	protected List<CT_TblLayoutType> TblLayout;
	@XmlElement(required = true, name = "tblCellMar")
	protected List<CT_TblCellMar> TblCellMar;
	@XmlElement(required = true, name = "tblLook")
	protected List<CT_TblLook> TblLook;
}

public class CT_TblPrEx {
	@XmlElement(required = true, name = "tblPrExChange")
	protected CT_TblPrExChange TblPrExChange;
}

public class CT_Tbl {
	protected List<EG_RangeMarkupElements> EG_RangeMarkupElements;
	protected List<EG_ContentRowContent> EG_ContentRowContent;
	@XmlElement(required = true, name = "tblPr")
	protected CT_TblPr TblPr;
	@XmlElement(required = true, name = "tblGrid")
	protected CT_TblGrid TblGrid;
}

public class CT_TblLook {
	@XmlAttribute(name = "firstRow")
	protected ST_OnOffAttr FirstRow;
	@XmlAttribute(name = "lastRow")
	protected ST_OnOffAttr LastRow;
	@XmlAttribute(name = "firstColumn")
	protected ST_OnOffAttr FirstColumn;
	@XmlAttribute(name = "lastColumn")
	protected ST_OnOffAttr LastColumn;
	@XmlAttribute(name = "noHBand")
	protected ST_OnOffAttr NoHBand;
	@XmlAttribute(name = "noVBand")
	protected ST_OnOffAttr NoVBand;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FtnPos")
public class ST_FtnPos {
	protected String ST_FtnPos;
}

public class CT_FtnPos {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_EdnPos")
public class ST_EdnPos {
	protected String ST_EdnPos;
}

public class CT_EdnPos {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_NumFmt {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	@XmlAttribute(name = "format")
	protected StringAttr Format;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RestartNumber")
public class ST_RestartNumber {
	protected String ST_RestartNumber;
}

public class CT_NumRestart {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_FtnEdnRef {
	@XmlAttribute(name = "customMarkFollows")
	protected ST_OnOffAttr CustomMarkFollows;
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
}

public class CT_FtnEdnSepRef {
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
}

public class CT_FtnEdn {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
	protected List<EG_BlockLevelElts> EG_BlockLevelElts;
}

public class EG_FtnEdnNumProps {
	@XmlElement(required = true, name = "numStart")
	protected CT_DecimalNumber NumStart;
	@XmlElement(required = true, name = "numRestart")
	protected CT_NumRestart NumRestart;
}

public class CT_FtnProps {
	protected EG_FtnEdnNumProps EG_FtnEdnNumProps;
	@XmlElement(required = true, name = "pos")
	protected CT_FtnPos Pos;
	@XmlElement(required = true, name = "numFmt")
	protected CT_NumFmt NumFmt;
}

public class CT_EdnProps {
	protected EG_FtnEdnNumProps EG_FtnEdnNumProps;
	@XmlElement(required = true, name = "pos")
	protected CT_EdnPos Pos;
	@XmlElement(required = true, name = "numFmt")
	protected CT_NumFmt NumFmt;
}

public class CT_FtnDocProps {
	@XmlElement(required = true, name = "footnote")
	protected List<CT_FtnEdnSepRef> Footnote;
}

public class CT_EdnDocProps {
	@XmlElement(required = true, name = "endnote")
	protected List<CT_FtnEdnSepRef> Endnote;
}

public class CT_RecipientData {
	@XmlElement(required = true, name = "active")
	protected CT_OnOff Active;
	@XmlElement(required = true, name = "column")
	protected CT_DecimalNumber Column;
	@XmlElement(required = true, name = "uniqueTag")
	protected CT_Base64Binary UniqueTag;
}

public class CT_Base64Binary {
	@XmlAttribute(name = "val", required = true)
	protected List<Byte>Attr Val;
}

public class CT_Recipients {
	@XmlElement(required = true, name = "recipientData")
	protected List<CT_RecipientData> RecipientData;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "recipients")
public class Recipients {
	protected CT_Recipients Recipients;
}

public class CT_OdsoFieldMapData {
	@XmlElement(required = true, name = "type")
	protected CT_MailMergeOdsoFMDFieldType Type;
	@XmlElement(required = true, name = "name")
	protected CT_String Name;
	@XmlElement(required = true, name = "mappedName")
	protected CT_String MappedName;
	@XmlElement(required = true, name = "column")
	protected CT_DecimalNumber Column;
	@XmlElement(required = true, name = "lid")
	protected CT_Lang Lid;
	@XmlElement(required = true, name = "dynamicAddress")
	protected CT_OnOff DynamicAddress;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MailMergeSourceType")
public class ST_MailMergeSourceType {
	protected String ST_MailMergeSourceType;
}

public class CT_MailMergeSourceType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_Odso {
	@XmlElement(required = true, name = "udl")
	protected CT_String Udl;
	@XmlElement(required = true, name = "table")
	protected CT_String Table;
	@XmlElement(required = true, name = "src")
	protected CT_Rel Src;
	@XmlElement(required = true, name = "colDelim")
	protected CT_DecimalNumber ColDelim;
	@XmlElement(required = true, name = "type")
	protected CT_MailMergeSourceType Type;
	@XmlElement(required = true, name = "fHdr")
	protected CT_OnOff FHdr;
	@XmlElement(required = true, name = "fieldMapData")
	protected List<CT_OdsoFieldMapData> FieldMapData;
	@XmlElement(required = true, name = "recipientData")
	protected List<CT_Rel> RecipientData;
}

public class CT_MailMerge {
	@XmlElement(required = true, name = "mainDocumentType")
	protected CT_MailMergeDocType MainDocumentType;
	@XmlElement(required = true, name = "linkToQuery")
	protected CT_OnOff LinkToQuery;
	@XmlElement(required = true, name = "dataType")
	protected CT_MailMergeDataType DataType;
	@XmlElement(required = true, name = "connectString")
	protected CT_String ConnectString;
	@XmlElement(required = true, name = "query")
	protected CT_String Query;
	@XmlElement(required = true, name = "dataSource")
	protected CT_Rel DataSource;
	@XmlElement(required = true, name = "headerSource")
	protected CT_Rel HeaderSource;
	@XmlElement(required = true, name = "doNotSuppressBlankLines")
	protected CT_OnOff DoNotSuppressBlankLines;
	@XmlElement(required = true, name = "destination")
	protected CT_MailMergeDest Destination;
	@XmlElement(required = true, name = "addressFieldName")
	protected CT_String AddressFieldName;
	@XmlElement(required = true, name = "mailSubject")
	protected CT_String MailSubject;
	@XmlElement(required = true, name = "mailAsAttachment")
	protected CT_OnOff MailAsAttachment;
	@XmlElement(required = true, name = "viewMergedData")
	protected CT_OnOff ViewMergedData;
	@XmlElement(required = true, name = "activeRecord")
	protected CT_DecimalNumber ActiveRecord;
	@XmlElement(required = true, name = "checkErrors")
	protected CT_DecimalNumber CheckErrors;
	@XmlElement(required = true, name = "odso")
	protected CT_Odso Odso;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TargetScreenSz")
public class ST_TargetScreenSz {
	protected String ST_TargetScreenSz;
}

public class CT_TargetScreenSz {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_Compat {
	@XmlElement(required = true, name = "spaceForUL")
	protected CT_OnOff SpaceForUL;
	@XmlElement(required = true, name = "balanceSingleByteDoubleByteWidth")
	protected CT_OnOff BalanceSingleByteDoubleByteWidth;
	@XmlElement(required = true, name = "doNotLeaveBackslashAlone")
	protected CT_OnOff DoNotLeaveBackslashAlone;
	@XmlElement(required = true, name = "ulTrailSpace")
	protected CT_OnOff UlTrailSpace;
	@XmlElement(required = true, name = "doNotExpandShiftReturn")
	protected CT_OnOff DoNotExpandShiftReturn;
	@XmlElement(required = true, name = "adjustLineHeightInTable")
	protected CT_OnOff AdjustLineHeightInTable;
	@XmlElement(required = true, name = "applyBreakingRules")
	protected CT_OnOff ApplyBreakingRules;
	@XmlElement(required = true, name = "compatSetting")
	protected List<CT_CompatSetting> CompatSetting;
}

public class CT_CompatSetting {
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "uri")
	protected StringAttr Uri;
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

public class CT_DocVar {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_DocVars {
	@XmlElement(required = true, name = "docVar")
	protected List<CT_DocVar> DocVar;
}

public class CT_DocRsids {
	@XmlElement(required = true, name = "rsidRoot")
	protected List<CT_LongHexNumber> RsidRoot;
	@XmlElement(required = true, name = "rsid")
	protected List<CT_LongHexNumber> Rsid;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CharacterSpacing")
public class ST_CharacterSpacing {
	protected String ST_CharacterSpacing;
}

public class CT_CharacterSpacing {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_SaveThroughXslt {
	@XmlAttribute(name = "r:id")
	protected StringAttr RId;
	@XmlAttribute(name = "solutionID")
	protected StringAttr SolutionID;
}

public class CT_RPrDefault {
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
}

public class CT_PPrDefault {
	@XmlElement(required = true, name = "pPr")
	protected CT_PPrGeneral PPr;
}

public class CT_DocDefaults {
	@XmlElement(required = true, name = "rPrDefault")
	protected CT_RPrDefault RPrDefault;
	@XmlElement(required = true, name = "pPrDefault")
	protected CT_PPrDefault PPrDefault;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_WmlColorSchemeIndex")
public class ST_WmlColorSchemeIndex {
	protected String ST_WmlColorSchemeIndex;
}

public class CT_ColorSchemeMapping {
	@XmlAttribute(name = "bg1")
	protected StringAttr Bg1;
	@XmlAttribute(name = "t1")
	protected StringAttr T1;
	@XmlAttribute(name = "bg2")
	protected StringAttr Bg2;
	@XmlAttribute(name = "t2")
	protected StringAttr T2;
	@XmlAttribute(name = "accent1")
	protected StringAttr Accent1;
	@XmlAttribute(name = "accent2")
	protected StringAttr Accent2;
	@XmlAttribute(name = "accent3")
	protected StringAttr Accent3;
	@XmlAttribute(name = "accent4")
	protected StringAttr Accent4;
	@XmlAttribute(name = "accent5")
	protected StringAttr Accent5;
	@XmlAttribute(name = "accent6")
	protected StringAttr Accent6;
	@XmlAttribute(name = "hyperlink")
	protected StringAttr Hyperlink;
	@XmlAttribute(name = "followedHyperlink")
	protected StringAttr FollowedHyperlink;
}

public class CT_ReadingModeInkLockDown {
	@XmlAttribute(name = "actualPg", required = true)
	protected ST_OnOffAttr ActualPg;
	@XmlAttribute(name = "w", required = true)
	protected LongAttr W;
	@XmlAttribute(name = "h", required = true)
	protected LongAttr H;
	@XmlAttribute(name = "fontSz", required = true)
	protected ST_DecimalNumberOrPercentAttr FontSz;
}

public class CT_WriteProtection {
	@XmlElement(required = true)
	protected AG_Password AG_Password;
	@XmlAttribute(name = "recommended")
	protected ST_OnOffAttr Recommended;
}

public class CT_Settings {
	@XmlElement(required = true, name = "writeProtection")
	protected CT_WriteProtection WriteProtection;
	@XmlElement(required = true, name = "view")
	protected CT_View View;
	@XmlElement(required = true, name = "zoom")
	protected CT_Zoom Zoom;
	@XmlElement(required = true, name = "removePersonalInformation")
	protected CT_OnOff RemovePersonalInformation;
	@XmlElement(required = true, name = "removeDateAndTime")
	protected CT_OnOff RemoveDateAndTime;
	@XmlElement(required = true, name = "doNotDisplayPageBoundaries")
	protected CT_OnOff DoNotDisplayPageBoundaries;
	@XmlElement(required = true, name = "displayBackgroundShape")
	protected CT_OnOff DisplayBackgroundShape;
	@XmlElement(required = true, name = "printPostScriptOverText")
	protected CT_OnOff PrintPostScriptOverText;
	@XmlElement(required = true, name = "printFractionalCharacterWidth")
	protected CT_OnOff PrintFractionalCharacterWidth;
	@XmlElement(required = true, name = "printFormsData")
	protected CT_OnOff PrintFormsData;
	@XmlElement(required = true, name = "embedTrueTypeFonts")
	protected CT_OnOff EmbedTrueTypeFonts;
	@XmlElement(required = true, name = "embedSystemFonts")
	protected CT_OnOff EmbedSystemFonts;
	@XmlElement(required = true, name = "saveSubsetFonts")
	protected CT_OnOff SaveSubsetFonts;
	@XmlElement(required = true, name = "saveFormsData")
	protected CT_OnOff SaveFormsData;
	@XmlElement(required = true, name = "mirrorMargins")
	protected CT_OnOff MirrorMargins;
	@XmlElement(required = true, name = "alignBordersAndEdges")
	protected CT_OnOff AlignBordersAndEdges;
	@XmlElement(required = true, name = "bordersDoNotSurroundHeader")
	protected CT_OnOff BordersDoNotSurroundHeader;
	@XmlElement(required = true, name = "bordersDoNotSurroundFooter")
	protected CT_OnOff BordersDoNotSurroundFooter;
	@XmlElement(required = true, name = "gutterAtTop")
	protected CT_OnOff GutterAtTop;
	@XmlElement(required = true, name = "hideSpellingErrors")
	protected CT_OnOff HideSpellingErrors;
	@XmlElement(required = true, name = "hideGrammaticalErrors")
	protected CT_OnOff HideGrammaticalErrors;
	@XmlElement(required = true, name = "activeWritingStyle")
	protected List<CT_WritingStyle> ActiveWritingStyle;
	@XmlElement(required = true, name = "proofState")
	protected CT_Proof ProofState;
	@XmlElement(required = true, name = "formsDesign")
	protected CT_OnOff FormsDesign;
	@XmlElement(required = true, name = "attachedTemplate")
	protected CT_Rel AttachedTemplate;
	@XmlElement(required = true, name = "linkStyles")
	protected CT_OnOff LinkStyles;
	@XmlElement(required = true, name = "stylePaneFormatFilter")
	protected CT_StylePaneFilter StylePaneFormatFilter;
	@XmlElement(required = true, name = "stylePaneSortMethod")
	protected CT_StyleSort StylePaneSortMethod;
	@XmlElement(required = true, name = "documentType")
	protected CT_DocType DocumentType;
	@XmlElement(required = true, name = "mailMerge")
	protected CT_MailMerge MailMerge;
	@XmlElement(required = true, name = "revisionView")
	protected CT_TrackChangesView RevisionView;
	@XmlElement(required = true, name = "trackRevisions")
	protected CT_OnOff TrackRevisions;
	@XmlElement(required = true, name = "doNotTrackMoves")
	protected CT_OnOff DoNotTrackMoves;
	@XmlElement(required = true, name = "doNotTrackFormatting")
	protected CT_OnOff DoNotTrackFormatting;
	@XmlElement(required = true, name = "documentProtection")
	protected CT_DocProtect DocumentProtection;
	@XmlElement(required = true, name = "autoFormatOverride")
	protected CT_OnOff AutoFormatOverride;
	@XmlElement(required = true, name = "styleLockTheme")
	protected CT_OnOff StyleLockTheme;
	@XmlElement(required = true, name = "styleLockQFSet")
	protected CT_OnOff StyleLockQFSet;
	@XmlElement(required = true, name = "defaultTabStop")
	protected CT_TwipsMeasure DefaultTabStop;
	@XmlElement(required = true, name = "autoHyphenation")
	protected CT_OnOff AutoHyphenation;
	@XmlElement(required = true, name = "consecutiveHyphenLimit")
	protected CT_DecimalNumber ConsecutiveHyphenLimit;
	@XmlElement(required = true, name = "hyphenationZone")
	protected CT_TwipsMeasure HyphenationZone;
	@XmlElement(required = true, name = "doNotHyphenateCaps")
	protected CT_OnOff DoNotHyphenateCaps;
	@XmlElement(required = true, name = "showEnvelope")
	protected CT_OnOff ShowEnvelope;
	@XmlElement(required = true, name = "summaryLength")
	protected CT_DecimalNumberOrPrecent SummaryLength;
	@XmlElement(required = true, name = "clickAndTypeStyle")
	protected CT_String ClickAndTypeStyle;
	@XmlElement(required = true, name = "defaultTableStyle")
	protected CT_String DefaultTableStyle;
	@XmlElement(required = true, name = "evenAndOddHeaders")
	protected CT_OnOff EvenAndOddHeaders;
	@XmlElement(required = true, name = "bookFoldRevPrinting")
	protected CT_OnOff BookFoldRevPrinting;
	@XmlElement(required = true, name = "bookFoldPrinting")
	protected CT_OnOff BookFoldPrinting;
	@XmlElement(required = true, name = "bookFoldPrintingSheets")
	protected CT_DecimalNumber BookFoldPrintingSheets;
	@XmlElement(required = true, name = "drawingGridHorizontalSpacing")
	protected CT_TwipsMeasure DrawingGridHorizontalSpacing;
	@XmlElement(required = true, name = "drawingGridVerticalSpacing")
	protected CT_TwipsMeasure DrawingGridVerticalSpacing;
	@XmlElement(required = true, name = "displayHorizontalDrawingGridEvery")
	protected CT_DecimalNumber DisplayHorizontalDrawingGridEvery;
	@XmlElement(required = true, name = "displayVerticalDrawingGridEvery")
	protected CT_DecimalNumber DisplayVerticalDrawingGridEvery;
	@XmlElement(required = true, name = "doNotUseMarginsForDrawingGridOrigin")
	protected CT_OnOff DoNotUseMarginsForDrawingGridOrigin;
	@XmlElement(required = true, name = "drawingGridHorizontalOrigin")
	protected CT_TwipsMeasure DrawingGridHorizontalOrigin;
	@XmlElement(required = true, name = "drawingGridVerticalOrigin")
	protected CT_TwipsMeasure DrawingGridVerticalOrigin;
	@XmlElement(required = true, name = "doNotShadeFormData")
	protected CT_OnOff DoNotShadeFormData;
	@XmlElement(required = true, name = "noPunctuationKerning")
	protected CT_OnOff NoPunctuationKerning;
	@XmlElement(required = true, name = "characterSpacingControl")
	protected CT_CharacterSpacing CharacterSpacingControl;
	@XmlElement(required = true, name = "printTwoOnOne")
	protected CT_OnOff PrintTwoOnOne;
	@XmlElement(required = true, name = "strictFirstAndLastChars")
	protected CT_OnOff StrictFirstAndLastChars;
	@XmlElement(required = true, name = "noLineBreaksAfter")
	protected CT_Kinsoku NoLineBreaksAfter;
	@XmlElement(required = true, name = "noLineBreaksBefore")
	protected CT_Kinsoku NoLineBreaksBefore;
	@XmlElement(required = true, name = "savePreviewPicture")
	protected CT_OnOff SavePreviewPicture;
	@XmlElement(required = true, name = "doNotValidateAgainstSchema")
	protected CT_OnOff DoNotValidateAgainstSchema;
	@XmlElement(required = true, name = "saveInvalidXml")
	protected CT_OnOff SaveInvalidXml;
	@XmlElement(required = true, name = "ignoreMixedContent")
	protected CT_OnOff IgnoreMixedContent;
	@XmlElement(required = true, name = "alwaysShowPlaceholderText")
	protected CT_OnOff AlwaysShowPlaceholderText;
	@XmlElement(required = true, name = "doNotDemarcateInvalidXml")
	protected CT_OnOff DoNotDemarcateInvalidXml;
	@XmlElement(required = true, name = "saveXmlDataOnly")
	protected CT_OnOff SaveXmlDataOnly;
	@XmlElement(required = true, name = "useXSLTWhenSaving")
	protected CT_OnOff UseXSLTWhenSaving;
	@XmlElement(required = true, name = "saveThroughXslt")
	protected CT_SaveThroughXslt SaveThroughXslt;
	@XmlElement(required = true, name = "showXMLTags")
	protected CT_OnOff ShowXMLTags;
	@XmlElement(required = true, name = "alwaysMergeEmptyNamespace")
	protected CT_OnOff AlwaysMergeEmptyNamespace;
	@XmlElement(required = true, name = "updateFields")
	protected CT_OnOff UpdateFields;
	@XmlElement(required = true, name = "footnotePr")
	protected CT_FtnDocProps FootnotePr;
	@XmlElement(required = true, name = "endnotePr")
	protected CT_EdnDocProps EndnotePr;
	@XmlElement(required = true, name = "compat")
	protected CT_Compat Compat;
	@XmlElement(required = true, name = "docVars")
	protected CT_DocVars DocVars;
	@XmlElement(required = true, name = "rsids")
	protected CT_DocRsids Rsids;
	@XmlElement(required = true, name = "m:mathPr")
	protected List<CT_MathPr> MMathPr;
	@XmlElement(required = true, name = "attachedSchema")
	protected List<CT_String> AttachedSchema;
	@XmlElement(required = true, name = "themeFontLang")
	protected List<CT_Language> ThemeFontLang;
	@XmlElement(required = true, name = "clrSchemeMapping")
	protected CT_ColorSchemeMapping ClrSchemeMapping;
	@XmlElement(required = true, name = "doNotIncludeSubdocsInStats")
	protected CT_OnOff DoNotIncludeSubdocsInStats;
	@XmlElement(required = true, name = "doNotAutoCompressPictures")
	protected CT_OnOff DoNotAutoCompressPictures;
	@XmlElement(required = true, name = "forceUpgrade")
	protected List<CT_Empty> ForceUpgrade;
	@XmlElement(required = true, name = "captions")
	protected List<CT_Captions> Captions;
	@XmlElement(required = true, name = "readModeInkLockDown")
	protected CT_ReadingModeInkLockDown ReadModeInkLockDown;
	@XmlElement(required = true, name = "smartTagType")
	protected List<CT_SmartTagType> SmartTagType;
	@XmlElement(required = true, name = "sl:schemaLibrary")
	protected List<CT_SchemaLibrary> SlSchemaLibrary;
	@XmlElement(required = true, name = "doNotEmbedSmartTags")
	protected CT_OnOff DoNotEmbedSmartTags;
	@XmlElement(required = true, name = "decimalSymbol")
	protected List<CT_String> DecimalSymbol;
	@XmlElement(required = true, name = "listSeparator")
	protected List<CT_String> ListSeparator;
}

public class CT_StyleSort {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_StylePaneFilter {
	@XmlAttribute(name = "allStyles")
	protected ST_OnOffAttr AllStyles;
	@XmlAttribute(name = "customStyles")
	protected ST_OnOffAttr CustomStyles;
	@XmlAttribute(name = "latentStyles")
	protected ST_OnOffAttr LatentStyles;
	@XmlAttribute(name = "stylesInUse")
	protected ST_OnOffAttr StylesInUse;
	@XmlAttribute(name = "headingStyles")
	protected ST_OnOffAttr HeadingStyles;
	@XmlAttribute(name = "numberingStyles")
	protected ST_OnOffAttr NumberingStyles;
	@XmlAttribute(name = "tableStyles")
	protected ST_OnOffAttr TableStyles;
	@XmlAttribute(name = "directFormattingOnRuns")
	protected ST_OnOffAttr DirectFormattingOnRuns;
	@XmlAttribute(name = "directFormattingOnParagraphs")
	protected ST_OnOffAttr DirectFormattingOnParagraphs;
	@XmlAttribute(name = "directFormattingOnNumbering")
	protected ST_OnOffAttr DirectFormattingOnNumbering;
	@XmlAttribute(name = "directFormattingOnTables")
	protected ST_OnOffAttr DirectFormattingOnTables;
	@XmlAttribute(name = "clearFormatting")
	protected ST_OnOffAttr ClearFormatting;
	@XmlAttribute(name = "top3HeadingStyles")
	protected ST_OnOffAttr Top3HeadingStyles;
	@XmlAttribute(name = "visibleStyles")
	protected ST_OnOffAttr VisibleStyles;
	@XmlAttribute(name = "alternateStyleNames")
	protected ST_OnOffAttr AlternateStyleNames;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_StyleSort")
public class ST_StyleSort {
	protected String ST_StyleSort;
}

public class CT_WebSettings {
	@XmlElement(required = true, name = "frameset")
	protected CT_Frameset Frameset;
	@XmlElement(required = true, name = "divs")
	protected CT_Divs Divs;
	@XmlElement(required = true, name = "encoding")
	protected CT_String Encoding;
	@XmlElement(required = true, name = "optimizeForBrowser")
	protected CT_OptimizeForBrowser OptimizeForBrowser;
	@XmlElement(required = true, name = "allowPNG")
	protected CT_OnOff AllowPNG;
	@XmlElement(required = true, name = "doNotRelyOnCSS")
	protected CT_OnOff DoNotRelyOnCSS;
	@XmlElement(required = true, name = "doNotSaveAsSingleFile")
	protected CT_OnOff DoNotSaveAsSingleFile;
	@XmlElement(required = true, name = "doNotOrganizeInFolder")
	protected CT_OnOff DoNotOrganizeInFolder;
	@XmlElement(required = true, name = "doNotUseLongFileNames")
	protected CT_OnOff DoNotUseLongFileNames;
	@XmlElement(required = true, name = "pixelsPerInch")
	protected CT_DecimalNumber PixelsPerInch;
	@XmlElement(required = true, name = "targetScreenSz")
	protected CT_TargetScreenSz TargetScreenSz;
	@XmlElement(required = true, name = "saveSmartTagsAsXml")
	protected CT_OnOff SaveSmartTagsAsXml;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FrameScrollbar")
public class ST_FrameScrollbar {
	protected String ST_FrameScrollbar;
}

public class CT_FrameScrollbar {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_OptimizeForBrowser {
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

public class CT_Frame {
	@XmlElement(required = true, name = "sz")
	protected CT_String Sz;
	@XmlElement(required = true, name = "name")
	protected CT_String Name;
	@XmlElement(required = true, name = "title")
	protected CT_String Title;
	@XmlElement(required = true, name = "longDesc")
	protected CT_Rel LongDesc;
	@XmlElement(required = true, name = "sourceFileName")
	protected CT_Rel SourceFileName;
	@XmlElement(required = true, name = "marW")
	protected CT_PixelsMeasure MarW;
	@XmlElement(required = true, name = "marH")
	protected CT_PixelsMeasure MarH;
	@XmlElement(required = true, name = "scrollbar")
	protected CT_FrameScrollbar Scrollbar;
	@XmlElement(required = true, name = "noResizeAllowed")
	protected CT_OnOff NoResizeAllowed;
	@XmlElement(required = true, name = "linkedToFile")
	protected CT_OnOff LinkedToFile;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FrameLayout")
public class ST_FrameLayout {
	protected String ST_FrameLayout;
}

public class CT_FrameLayout {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_FramesetSplitbar {
	@XmlElement(required = true, name = "w")
	protected CT_TwipsMeasure W;
	@XmlElement(required = true, name = "color")
	protected CT_Color Color;
	@XmlElement(required = true, name = "noBorder")
	protected CT_OnOff NoBorder;
	@XmlElement(required = true, name = "flatBorders")
	protected CT_OnOff FlatBorders;
}

public class CT_Frameset {
	@XmlElement(required = true, name = "sz")
	protected CT_String Sz;
	@XmlElement(required = true, name = "framesetSplitbar")
	protected CT_FramesetSplitbar FramesetSplitbar;
	@XmlElement(required = true, name = "frameLayout")
	protected CT_FrameLayout FrameLayout;
	@XmlElement(required = true, name = "title")
	protected CT_String Title;
	@XmlElement(required = true, name = "frameset")
	protected List<CT_Frameset> Frameset;
	@XmlElement(required = true, name = "frame")
	protected List<CT_Frame> Frame;
}

public class CT_NumPicBullet {
	@XmlAttribute(name = "numPicBulletId", required = true)
	protected IntegerAttr NumPicBulletId;
	@XmlElement(required = true, name = "drawing")
	protected CT_Drawing Drawing;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LevelSuffix")
public class ST_LevelSuffix {
	protected String ST_LevelSuffix;
}

public class CT_LevelSuffix {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_LevelText {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
	@XmlAttribute(name = "null")
	protected ST_OnOffAttr Null;
}

public class CT_Lvl {
	@XmlAttribute(name = "ilvl", required = true)
	protected IntegerAttr Ilvl;
	@XmlAttribute(name = "tplc")
	protected List<Byte>Attr Tplc;
	@XmlAttribute(name = "tentative")
	protected ST_OnOffAttr Tentative;
	@XmlElement(required = true, name = "start")
	protected CT_DecimalNumber Start;
	@XmlElement(required = true, name = "numFmt")
	protected CT_NumFmt NumFmt;
	@XmlElement(required = true, name = "lvlRestart")
	protected CT_DecimalNumber LvlRestart;
	@XmlElement(required = true, name = "pStyle")
	protected CT_String PStyle;
	@XmlElement(required = true, name = "isLgl")
	protected CT_OnOff IsLgl;
	@XmlElement(required = true, name = "suff")
	protected CT_LevelSuffix Suff;
	@XmlElement(required = true, name = "lvlText")
	protected CT_LevelText LvlText;
	@XmlElement(required = true, name = "lvlPicBulletId")
	protected CT_DecimalNumber LvlPicBulletId;
	@XmlElement(required = true, name = "lvlJc")
	protected CT_Jc LvlJc;
	@XmlElement(required = true, name = "pPr")
	protected CT_PPrGeneral PPr;
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_MultiLevelType")
public class ST_MultiLevelType {
	protected String ST_MultiLevelType;
}

public class CT_MultiLevelType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_AbstractNum {
	@XmlAttribute(name = "abstractNumId", required = true)
	protected IntegerAttr AbstractNumId;
	@XmlElement(required = true, name = "nsid")
	protected CT_LongHexNumber Nsid;
	@XmlElement(required = true, name = "multiLevelType")
	protected CT_MultiLevelType MultiLevelType;
	@XmlElement(required = true, name = "tmpl")
	protected CT_LongHexNumber Tmpl;
	@XmlElement(required = true, name = "name")
	protected CT_String Name;
	@XmlElement(required = true, name = "styleLink")
	protected CT_String StyleLink;
	@XmlElement(required = true, name = "numStyleLink")
	protected CT_String NumStyleLink;
	@XmlElement(required = true, name = "lvl")
	protected List<CT_Lvl> Lvl;
}

public class CT_NumLvl {
	@XmlAttribute(name = "ilvl", required = true)
	protected IntegerAttr Ilvl;
	@XmlElement(required = true, name = "startOverride")
	protected CT_DecimalNumber StartOverride;
	@XmlElement(required = true, name = "lvl")
	protected List<CT_Lvl> Lvl;
}

public class CT_Num {
	@XmlAttribute(name = "numId", required = true)
	protected IntegerAttr NumId;
	@XmlElement(required = true, name = "abstractNumId")
	protected CT_DecimalNumber AbstractNumId;
	@XmlElement(required = true, name = "lvlOverride")
	protected List<CT_NumLvl> LvlOverride;
}

public class CT_Numbering {
	@XmlElement(required = true, name = "numPicBullet")
	protected List<CT_NumPicBullet> NumPicBullet;
	@XmlElement(required = true, name = "abstractNum")
	protected List<CT_AbstractNum> AbstractNum;
	@XmlElement(required = true, name = "num")
	protected List<CT_Num> Num;
	@XmlElement(required = true, name = "numIdMacAtCleanup")
	protected CT_DecimalNumber NumIdMacAtCleanup;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TblStyleOverrideType")
public class ST_TblStyleOverrideType {
	protected String ST_TblStyleOverrideType;
}

public class CT_TblStylePr {
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlElement(required = true, name = "pPr")
	protected CT_PPrGeneral PPr;
	@XmlElement(required = true, name = "rPr")
	protected CT_RPr RPr;
	@XmlElement(required = true, name = "tblPr")
	protected CT_TblPrBase TblPr;
	@XmlElement(required = true, name = "trPr")
	protected List<CT_TrPr> TrPr;
	@XmlElement(required = true, name = "tcPr")
	protected List<CT_TcPr> TcPr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_StyleType")
public class ST_StyleType {
	protected String ST_StyleType;
}

public class CT_Style {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "styleId")
	protected StringAttr StyleId;
	@XmlAttribute(name = "default")
	protected ST_OnOffAttr Default;
	@XmlAttribute(name = "customStyle")
	protected ST_OnOffAttr CustomStyle;
	@XmlElement(required = true, name = "name")
	protected List<CT_String> Name;
	@XmlElement(required = true, name = "aliases")
	protected CT_String Aliases;
	@XmlElement(required = true, name = "basedOn")
	protected CT_String BasedOn;
	@XmlElement(required = true, name = "next")
	protected CT_String Next;
	@XmlElement(required = true, name = "link")
	protected CT_String Link;
	@XmlElement(required = true, name = "autoRedefine")
	protected CT_OnOff AutoRedefine;
	@XmlElement(required = true, name = "hidden")
	protected CT_OnOff Hidden;
	@XmlElement(required = true, name = "uiPriority")
	protected CT_DecimalNumber UiPriority;
	@XmlElement(required = true, name = "semiHidden")
	protected CT_OnOff SemiHidden;
	@XmlElement(required = true, name = "unhideWhenUsed")
	protected CT_OnOff UnhideWhenUsed;
	@XmlElement(required = true, name = "qFormat")
	protected CT_OnOff QFormat;
	@XmlElement(required = true, name = "locked")
	protected CT_OnOff Locked;
	@XmlElement(required = true, name = "personal")
	protected CT_OnOff Personal;
	@XmlElement(required = true, name = "personalCompose")
	protected CT_OnOff PersonalCompose;
	@XmlElement(required = true, name = "personalReply")
	protected CT_OnOff PersonalReply;
	@XmlElement(required = true, name = "rsid")
	protected CT_LongHexNumber Rsid;
	@XmlElement(required = true, name = "pPr")
	protected List<CT_PPrGeneral> PPr;
	@XmlElement(required = true, name = "rPr")
	protected List<CT_RPr> RPr;
	@XmlElement(required = true, name = "tblPr")
	protected List<CT_TblPrBase> TblPr;
	@XmlElement(required = true, name = "trPr")
	protected List<CT_TrPr> TrPr;
	@XmlElement(required = true, name = "tcPr")
	protected List<CT_TcPr> TcPr;
	@XmlElement(required = true, name = "tblStylePr")
	protected List<CT_TblStylePr> TblStylePr;
}

public class CT_LsdException {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "locked")
	protected ST_OnOffAttr Locked;
	@XmlAttribute(name = "uiPriority")
	protected IntegerAttr UiPriority;
	@XmlAttribute(name = "semiHidden")
	protected ST_OnOffAttr SemiHidden;
	@XmlAttribute(name = "unhideWhenUsed")
	protected ST_OnOffAttr UnhideWhenUsed;
	@XmlAttribute(name = "qFormat")
	protected ST_OnOffAttr QFormat;
}

public class CT_LatentStyles {
	@XmlAttribute(name = "defLockedState")
	protected ST_OnOffAttr DefLockedState;
	@XmlAttribute(name = "defUIPriority")
	protected IntegerAttr DefUIPriority;
	@XmlAttribute(name = "defSemiHidden")
	protected ST_OnOffAttr DefSemiHidden;
	@XmlAttribute(name = "defUnhideWhenUsed")
	protected ST_OnOffAttr DefUnhideWhenUsed;
	@XmlAttribute(name = "defQFormat")
	protected ST_OnOffAttr DefQFormat;
	@XmlAttribute(name = "count")
	protected IntegerAttr Count;
	@XmlElement(required = true, name = "lsdException")
	protected List<CT_LsdException> LsdException;
}

public class CT_Styles {
	@XmlElement(required = true, name = "docDefaults")
	protected CT_DocDefaults DocDefaults;
	@XmlElement(required = true, name = "latentStyles")
	protected List<CT_LatentStyles> LatentStyles;
	@XmlElement(required = true, name = "style")
	protected List<CT_Style> Style;
}

public class CT_Panose {
	@XmlAttribute(name = "val", required = true)
	protected List<Byte>Attr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FontFamily")
public class ST_FontFamily {
	protected String ST_FontFamily;
}

public class CT_FontFamily {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Pitch")
public class ST_Pitch {
	protected String ST_Pitch;
}

public class CT_Pitch {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_FontSig {
	@XmlAttribute(name = "usb0", required = true)
	protected List<Byte>Attr Usb0;
	@XmlAttribute(name = "usb1", required = true)
	protected List<Byte>Attr Usb1;
	@XmlAttribute(name = "usb2", required = true)
	protected List<Byte>Attr Usb2;
	@XmlAttribute(name = "usb3", required = true)
	protected List<Byte>Attr Usb3;
	@XmlAttribute(name = "csb0", required = true)
	protected List<Byte>Attr Csb0;
	@XmlAttribute(name = "csb1", required = true)
	protected List<Byte>Attr Csb1;
}

public class CT_FontRel {
	@XmlAttribute(name = "fontKey")
	protected StringAttr FontKey;
	@XmlAttribute(name = "subsetted")
	protected ST_OnOffAttr Subsetted;
}

public class CT_Font {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlElement(required = true, name = "altName")
	protected List<CT_String> AltName;
	@XmlElement(required = true, name = "panose1")
	protected List<CT_Panose> Panose1;
	@XmlElement(required = true, name = "charset")
	protected List<CT_Charset> Charset;
	@XmlElement(required = true, name = "family")
	protected List<CT_FontFamily> Family;
	@XmlElement(required = true, name = "notTrueType")
	protected List<CT_OnOff> NotTrueType;
	@XmlElement(required = true, name = "pitch")
	protected List<CT_Pitch> Pitch;
	@XmlElement(required = true, name = "sig")
	protected List<CT_FontSig> Sig;
	@XmlElement(required = true, name = "embedRegular")
	protected List<CT_FontRel> EmbedRegular;
	@XmlElement(required = true, name = "embedBold")
	protected List<CT_FontRel> EmbedBold;
	@XmlElement(required = true, name = "embedItalic")
	protected List<CT_FontRel> EmbedItalic;
	@XmlElement(required = true, name = "embedBoldItalic")
	protected List<CT_FontRel> EmbedBoldItalic;
}

public class CT_FontsList {
	@XmlElement(required = true, name = "font")
	protected List<CT_Font> Font;
}

public class CT_DivBdr {
	@XmlElement(required = true, name = "top")
	protected CT_Border Top;
	@XmlElement(required = true, name = "left")
	protected CT_Border Left;
	@XmlElement(required = true, name = "bottom")
	protected CT_Border Bottom;
	@XmlElement(required = true, name = "right")
	protected CT_Border Right;
}

public class CT_Div {
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
	@XmlElement(required = true, name = "blockQuote")
	protected CT_OnOff BlockQuote;
	@XmlElement(required = true, name = "bodyDiv")
	protected CT_OnOff BodyDiv;
	@XmlElement(required = true, name = "marLeft")
	protected CT_SignedTwipsMeasure MarLeft;
	@XmlElement(required = true, name = "marRight")
	protected CT_SignedTwipsMeasure MarRight;
	@XmlElement(required = true, name = "marTop")
	protected CT_SignedTwipsMeasure MarTop;
	@XmlElement(required = true, name = "marBottom")
	protected CT_SignedTwipsMeasure MarBottom;
	@XmlElement(required = true, name = "divBdr")
	protected CT_DivBdr DivBdr;
	@XmlElement(required = true, name = "divsChild")
	protected List<CT_Divs> DivsChild;
}

public class CT_Divs {
	@XmlElement(required = true, name = "div")
	protected CT_Div Div;
}

public class EG_MathContent {
	@XmlElement(required = true, name = "m:oMathPara")
	protected CT_OMathPara MOMathPara;
	@XmlElement(required = true, name = "m:oMath")
	protected CT_OMath MOMath;
}

public class EG_BlockLevelChunkElts {
	protected List<EG_ContentBlockContent> EG_ContentBlockContent;
}

public class EG_BlockLevelElts {
	@XmlElement(required = true, name = "altChunk")
	protected List<CT_AltChunk> AltChunk;
	protected List<EG_BlockLevelChunkElts> EG_BlockLevelChunkElts;
}

public class EG_RunLevelElts {
	@XmlElement(required = true, name = "proofErr")
	protected CT_ProofErr ProofErr;
	@XmlElement(required = true, name = "permStart")
	protected CT_PermStart PermStart;
	@XmlElement(required = true, name = "permEnd")
	protected CT_Perm PermEnd;
	@XmlElement(required = true, name = "ins")
	protected CT_RunTrackChange Ins;
	@XmlElement(required = true, name = "del")
	protected CT_RunTrackChange Del;
	@XmlElement(required = true, name = "moveFrom")
	protected CT_RunTrackChange MoveFrom;
	@XmlElement(required = true, name = "moveTo")
	protected CT_RunTrackChange MoveTo;
	protected List<EG_RangeMarkupElements> EG_RangeMarkupElements;
	protected List<EG_MathContent> EG_MathContent;
}

public class CT_Body {
	protected List<EG_BlockLevelElts> EG_BlockLevelElts;
	@XmlElement(required = true, name = "sectPr")
	protected List<CT_SectPr> SectPr;
}

public class CT_Comments {
	@XmlElement(required = true, name = "comment")
	protected List<CT_Comment> Comment;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "comments")
public class Comments {
	protected CT_Comments Comments;
}

public class CT_Footnotes {
	@XmlElement(required = true, name = "footnote")
	protected CT_FtnEdn Footnote;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "footnotes")
public class Footnotes {
	protected CT_Footnotes Footnotes;
}

public class CT_Endnotes {
	@XmlElement(required = true, name = "endnote")
	protected CT_FtnEdn Endnote;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "endnotes")
public class Endnotes {
	protected CT_Endnotes Endnotes;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "hdr")
public class Hdr {
	protected CT_HdrFtr Hdr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ftr")
public class Ftr {
	protected CT_HdrFtr Ftr;
}

public class CT_SmartTagType {
	@XmlAttribute(name = "namespaceuri")
	protected StringAttr Namespaceuri;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "url")
	protected StringAttr Url;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ThemeColor")
public class ST_ThemeColor {
	protected String ST_ThemeColor;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DocPartBehavior")
public class ST_DocPartBehavior {
	protected String ST_DocPartBehavior;
}

public class CT_DocPartBehavior {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_DocPartBehaviors {
	@XmlElement(required = true, name = "behavior")
	protected List<CT_DocPartBehavior> Behavior;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DocPartType")
public class ST_DocPartType {
	protected String ST_DocPartType;
}

public class CT_DocPartType {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_DocPartTypes {
	@XmlAttribute(name = "all")
	protected ST_OnOffAttr All;
	@XmlElement(required = true, name = "type")
	protected List<CT_DocPartType> Type;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DocPartGallery")
public class ST_DocPartGallery {
	protected String ST_DocPartGallery;
}

public class CT_DocPartGallery {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

public class CT_DocPartCategory {
	@XmlElement(required = true, name = "name")
	protected List<CT_String> Name;
	@XmlElement(required = true, name = "gallery")
	protected List<CT_DocPartGallery> Gallery;
}

public class CT_DocPartName {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	@XmlAttribute(name = "decorated")
	protected ST_OnOffAttr Decorated;
}

public class CT_DocPartPr {
	@XmlElement(required = true, name = "name")
	protected CT_DocPartName Name;
	@XmlElement(required = true, name = "style")
	protected CT_String Style;
	@XmlElement(required = true, name = "category")
	protected CT_DocPartCategory Category;
	@XmlElement(required = true, name = "types")
	protected CT_DocPartTypes Types;
	@XmlElement(required = true, name = "behaviors")
	protected CT_DocPartBehaviors Behaviors;
	@XmlElement(required = true, name = "description")
	protected CT_String Description;
	@XmlElement(required = true, name = "guid")
	protected CT_Guid Guid;
}

public class CT_DocPart {
	@XmlElement(required = true, name = "docPartPr")
	protected CT_DocPartPr DocPartPr;
	@XmlElement(required = true, name = "docPartBody")
	protected CT_Body DocPartBody;
}

public class CT_DocParts {
	@XmlElement(required = true, name = "docPart")
	protected List<CT_DocPart> DocPart;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "settings")
public class Settings {
	protected CT_Settings Settings;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "webSettings")
public class WebSettings {
	protected CT_WebSettings WebSettings;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "fonts")
public class Fonts {
	protected CT_FontsList Fonts;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "numbering")
public class Numbering {
	protected CT_Numbering Numbering;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "styles")
public class Styles {
	protected CT_Styles Styles;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CaptionPos")
public class ST_CaptionPos {
	protected String ST_CaptionPos;
}

public class CT_Caption {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "pos")
	protected StringAttr Pos;
	@XmlAttribute(name = "chapNum")
	protected ST_OnOffAttr ChapNum;
	@XmlAttribute(name = "heading")
	protected IntegerAttr Heading;
	@XmlAttribute(name = "noLabel")
	protected ST_OnOffAttr NoLabel;
	@XmlAttribute(name = "numFmt")
	protected StringAttr NumFmt;
	@XmlAttribute(name = "sep")
	protected StringAttr Sep;
}

public class CT_AutoCaption {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "caption", required = true)
	protected StringAttr Caption;
}

public class CT_AutoCaptions {
	@XmlElement(required = true, name = "autoCaption")
	protected List<CT_AutoCaption> AutoCaption;
}

public class CT_Captions {
	@XmlElement(required = true, name = "caption")
	protected List<CT_Caption> Caption;
	@XmlElement(required = true, name = "autoCaptions")
	protected List<CT_AutoCaptions> AutoCaptions;
}

public class CT_DocumentBase {
	@XmlElement(required = true, name = "background")
	protected CT_Background Background;
}

public class CT_Document {
	@XmlAttribute(name = "conformance")
	protected StringAttr Conformance;
	@XmlElement(required = true, name = "body")
	protected List<CT_Body> Body;
}

public class CT_GlossaryDocument {
	@XmlElement(required = true, name = "docParts")
	protected CT_DocParts DocParts;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "document")
public class Document {
	protected CT_Document Document;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "glossaryDocument")
public class GlossaryDocument {
	protected CT_GlossaryDocument GlossaryDocument;
}
