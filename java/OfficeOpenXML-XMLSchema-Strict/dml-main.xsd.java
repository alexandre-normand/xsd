// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

// CT_AudioFile ...
public class CT_AudioFile {
	@XmlAttribute(name = "r:link", required = true)
	protected StringAttr RLink;
	@XmlAttribute(name = "contentType")
	protected StringAttr ContentType;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_VideoFile ...
public class CT_VideoFile {
	@XmlAttribute(name = "r:link", required = true)
	protected StringAttr RLink;
	@XmlAttribute(name = "contentType")
	protected StringAttr ContentType;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_QuickTimeFile ...
public class CT_QuickTimeFile {
	@XmlAttribute(name = "r:link", required = true)
	protected StringAttr RLink;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_AudioCDTime ...
public class CT_AudioCDTime {
	@XmlAttribute(name = "track", required = true)
	protected ByteAttr Track;
	@XmlAttribute(name = "time")
	protected IntegerAttr Time;
}

// CT_AudioCD ...
public class CT_AudioCD {
	@XmlElement(required = true, name = "st")
	protected CT_AudioCDTime St;
	@XmlElement(required = true, name = "end")
	protected CT_AudioCDTime End;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// EG_Media ...
public class EG_Media {
	@XmlElement(required = true, name = "audioCd")
	protected CT_AudioCD AudioCd;
	@XmlElement(required = true, name = "wavAudioFile")
	protected CT_EmbeddedWAVAudioFile WavAudioFile;
	@XmlElement(required = true, name = "audioFile")
	protected CT_AudioFile AudioFile;
	@XmlElement(required = true, name = "videoFile")
	protected CT_VideoFile VideoFile;
	@XmlElement(required = true, name = "quickTimeFile")
	protected CT_QuickTimeFile QuickTimeFile;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "videoFile")
public class VideoFile {
	protected CT_VideoFile VideoFile;
}

// ST_StyleMatrixColumnIndex ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_StyleMatrixColumnIndex")
public class ST_StyleMatrixColumnIndex {
	protected Integer ST_StyleMatrixColumnIndex;
}

// ST_FontCollectionIndex ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FontCollectionIndex")
public class ST_FontCollectionIndex {
	protected String ST_FontCollectionIndex;
}

// ST_ColorSchemeIndex ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ColorSchemeIndex")
public class ST_ColorSchemeIndex {
	protected String ST_ColorSchemeIndex;
}

// CT_ColorScheme ...
public class CT_ColorScheme {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlElement(required = true, name = "dk1")
	protected CT_Color Dk1;
	@XmlElement(required = true, name = "lt1")
	protected CT_Color Lt1;
	@XmlElement(required = true, name = "dk2")
	protected CT_Color Dk2;
	@XmlElement(required = true, name = "lt2")
	protected CT_Color Lt2;
	@XmlElement(required = true, name = "accent1")
	protected CT_Color Accent1;
	@XmlElement(required = true, name = "accent2")
	protected CT_Color Accent2;
	@XmlElement(required = true, name = "accent3")
	protected CT_Color Accent3;
	@XmlElement(required = true, name = "accent4")
	protected CT_Color Accent4;
	@XmlElement(required = true, name = "accent5")
	protected CT_Color Accent5;
	@XmlElement(required = true, name = "accent6")
	protected CT_Color Accent6;
	@XmlElement(required = true, name = "hlink")
	protected CT_Color Hlink;
	@XmlElement(required = true, name = "folHlink")
	protected CT_Color FolHlink;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_CustomColor ...
public class CT_CustomColor {
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_SupplementalFont ...
public class CT_SupplementalFont {
	@XmlAttribute(name = "script", required = true)
	protected StringAttr Script;
	@XmlAttribute(name = "typeface", required = true)
	protected StringAttr Typeface;
}

// CT_CustomColorList ...
public class CT_CustomColorList {
	@XmlElement(required = true, name = "custClr")
	protected List<CT_CustomColor> CustClr;
}

// CT_FontCollection ...
public class CT_FontCollection {
	@XmlElement(required = true, name = "latin")
	protected CT_TextFont Latin;
	@XmlElement(required = true, name = "ea")
	protected CT_TextFont Ea;
	@XmlElement(required = true, name = "cs")
	protected CT_TextFont Cs;
	@XmlElement(required = true, name = "font")
	protected List<CT_SupplementalFont> Font;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_EffectStyleItem ...
public class CT_EffectStyleItem {
	protected List<EG_EffectProperties> EG_EffectProperties;
	@XmlElement(required = true, name = "scene3d")
	protected CT_Scene3D Scene3d;
	@XmlElement(required = true, name = "sp3d")
	protected CT_Shape3D Sp3d;
}

// CT_FontScheme ...
public class CT_FontScheme {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlElement(required = true, name = "majorFont")
	protected CT_FontCollection MajorFont;
	@XmlElement(required = true, name = "minorFont")
	protected CT_FontCollection MinorFont;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_FillStyleList ...
public class CT_FillStyleList {
	protected List<EG_FillProperties> EG_FillProperties;
}

// CT_LineStyleList ...
public class CT_LineStyleList {
	@XmlElement(required = true, name = "ln")
	protected List<CT_LineProperties> Ln;
}

// CT_EffectStyleList ...
public class CT_EffectStyleList {
	@XmlElement(required = true, name = "effectStyle")
	protected List<CT_EffectStyleItem> EffectStyle;
}

// CT_BackgroundFillStyleList ...
public class CT_BackgroundFillStyleList {
	protected List<EG_FillProperties> EG_FillProperties;
}

// CT_StyleMatrix ...
public class CT_StyleMatrix {
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlElement(required = true, name = "fillStyleLst")
	protected CT_FillStyleList FillStyleLst;
	@XmlElement(required = true, name = "lnStyleLst")
	protected CT_LineStyleList LnStyleLst;
	@XmlElement(required = true, name = "effectStyleLst")
	protected CT_EffectStyleList EffectStyleLst;
	@XmlElement(required = true, name = "bgFillStyleLst")
	protected CT_BackgroundFillStyleList BgFillStyleLst;
}

// CT_BaseStyles ...
public class CT_BaseStyles {
	@XmlElement(required = true, name = "clrScheme")
	protected CT_ColorScheme ClrScheme;
	@XmlElement(required = true, name = "fontScheme")
	protected CT_FontScheme FontScheme;
	@XmlElement(required = true, name = "fmtScheme")
	protected CT_StyleMatrix FmtScheme;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_OfficeArtExtension ...
public class CT_OfficeArtExtension {
	@XmlAttribute(name = "uri", required = true)
	protected StringAttr Uri;
}

// ST_Coordinate ...
public class ST_Coordinate {
	@XmlElement(required = true)
	protected ST_CoordinateUnqualified ST_CoordinateUnqualified;
	@XmlElement(required = true)
	protected String ST_UniversalMeasure;
}

// ST_CoordinateUnqualified ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CoordinateUnqualified")
public class ST_CoordinateUnqualified {
	protected Long ST_CoordinateUnqualified;
}

// ST_Coordinate32 ...
public class ST_Coordinate32 {
	@XmlElement(required = true)
	protected String ST_UniversalMeasure;
	@XmlElement(required = true)
	protected ST_Coordinate32Unqualified ST_Coordinate32Unqualified;
}

// ST_Coordinate32Unqualified ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Coordinate32Unqualified")
public class ST_Coordinate32Unqualified {
	protected Integer ST_Coordinate32Unqualified;
}

// ST_PositiveCoordinate ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PositiveCoordinate")
public class ST_PositiveCoordinate {
	protected Long ST_PositiveCoordinate;
}

// ST_PositiveCoordinate32 ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PositiveCoordinate32")
public class ST_PositiveCoordinate32 {
	protected Integer ST_PositiveCoordinate32;
}

// ST_Angle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_Angle")
public class ST_Angle {
	protected Integer ST_Angle;
}

// CT_Angle ...
public class CT_Angle {
	@XmlAttribute(name = "val", required = true)
	protected IntegerAttr Val;
}

// ST_FixedAngle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FixedAngle")
public class ST_FixedAngle {
	protected Integer ST_FixedAngle;
}

// ST_PositiveFixedAngle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PositiveFixedAngle")
public class ST_PositiveFixedAngle {
	protected Integer ST_PositiveFixedAngle;
}

// CT_PositiveFixedAngle ...
public class CT_PositiveFixedAngle {
	@XmlAttribute(name = "val", required = true)
	protected IntegerAttr Val;
}

// ST_Percentage ...
public class ST_Percentage {
	@XmlElement(required = true)
	protected String ST_Percentage;
}

// CT_Percentage ...
public class CT_Percentage {
	@XmlAttribute(name = "val", required = true)
	protected ST_PercentageAttr Val;
}

// ST_PositivePercentage ...
public class ST_PositivePercentage {
	@XmlElement(required = true)
	protected String ST_PositivePercentage;
}

// CT_PositivePercentage ...
public class CT_PositivePercentage {
	@XmlAttribute(name = "val", required = true)
	protected ST_PositivePercentageAttr Val;
}

// ST_FixedPercentage ...
public class ST_FixedPercentage {
	@XmlElement(required = true)
	protected String ST_FixedPercentage;
}

// CT_FixedPercentage ...
public class CT_FixedPercentage {
	@XmlAttribute(name = "val", required = true)
	protected ST_FixedPercentageAttr Val;
}

// ST_PositiveFixedPercentage ...
public class ST_PositiveFixedPercentage {
	@XmlElement(required = true)
	protected String ST_PositiveFixedPercentage;
}

// CT_PositiveFixedPercentage ...
public class CT_PositiveFixedPercentage {
	@XmlAttribute(name = "val", required = true)
	protected ST_PositiveFixedPercentageAttr Val;
}

// CT_Ratio ...
public class CT_Ratio {
	@XmlAttribute(name = "n", required = true)
	protected LongAttr N;
	@XmlAttribute(name = "d", required = true)
	protected LongAttr D;
}

// CT_Point2D ...
public class CT_Point2D {
	@XmlAttribute(name = "x", required = true)
	protected ST_CoordinateAttr X;
	@XmlAttribute(name = "y", required = true)
	protected ST_CoordinateAttr Y;
}

// CT_PositiveSize2D ...
public class CT_PositiveSize2D {
	@XmlAttribute(name = "cx", required = true)
	protected LongAttr Cx;
	@XmlAttribute(name = "cy", required = true)
	protected LongAttr Cy;
}

// CT_ComplementTransform ...
public class CT_ComplementTransform {
}

// CT_InverseTransform ...
public class CT_InverseTransform {
}

// CT_GrayscaleTransform ...
public class CT_GrayscaleTransform {
}

// CT_GammaTransform ...
public class CT_GammaTransform {
}

// CT_InverseGammaTransform ...
public class CT_InverseGammaTransform {
}

// EG_ColorTransform ...
public class EG_ColorTransform {
	@XmlElement(required = true, name = "tint")
	protected CT_PositiveFixedPercentage Tint;
	@XmlElement(required = true, name = "shade")
	protected CT_PositiveFixedPercentage Shade;
	@XmlElement(required = true, name = "comp")
	protected CT_ComplementTransform Comp;
	@XmlElement(required = true, name = "inv")
	protected CT_InverseTransform Inv;
	@XmlElement(required = true, name = "gray")
	protected CT_GrayscaleTransform Gray;
	@XmlElement(required = true, name = "alpha")
	protected CT_PositiveFixedPercentage Alpha;
	@XmlElement(required = true, name = "alphaOff")
	protected CT_FixedPercentage AlphaOff;
	@XmlElement(required = true, name = "alphaMod")
	protected CT_PositivePercentage AlphaMod;
	@XmlElement(required = true, name = "hue")
	protected CT_PositiveFixedAngle Hue;
	@XmlElement(required = true, name = "hueOff")
	protected CT_Angle HueOff;
	@XmlElement(required = true, name = "hueMod")
	protected CT_PositivePercentage HueMod;
	@XmlElement(required = true, name = "sat")
	protected CT_Percentage Sat;
	@XmlElement(required = true, name = "satOff")
	protected CT_Percentage SatOff;
	@XmlElement(required = true, name = "satMod")
	protected CT_Percentage SatMod;
	@XmlElement(required = true, name = "lum")
	protected CT_Percentage Lum;
	@XmlElement(required = true, name = "lumOff")
	protected CT_Percentage LumOff;
	@XmlElement(required = true, name = "lumMod")
	protected CT_Percentage LumMod;
	@XmlElement(required = true, name = "red")
	protected CT_Percentage Red;
	@XmlElement(required = true, name = "redOff")
	protected CT_Percentage RedOff;
	@XmlElement(required = true, name = "redMod")
	protected CT_Percentage RedMod;
	@XmlElement(required = true, name = "green")
	protected CT_Percentage Green;
	@XmlElement(required = true, name = "greenOff")
	protected CT_Percentage GreenOff;
	@XmlElement(required = true, name = "greenMod")
	protected CT_Percentage GreenMod;
	@XmlElement(required = true, name = "blue")
	protected CT_Percentage Blue;
	@XmlElement(required = true, name = "blueOff")
	protected CT_Percentage BlueOff;
	@XmlElement(required = true, name = "blueMod")
	protected CT_Percentage BlueMod;
	@XmlElement(required = true, name = "gamma")
	protected CT_GammaTransform Gamma;
	@XmlElement(required = true, name = "invGamma")
	protected CT_InverseGammaTransform InvGamma;
}

// CT_ScRgbColor ...
public class CT_ScRgbColor {
	@XmlAttribute(name = "r", required = true)
	protected ST_PercentageAttr R;
	@XmlAttribute(name = "g", required = true)
	protected ST_PercentageAttr G;
	@XmlAttribute(name = "b", required = true)
	protected ST_PercentageAttr B;
	protected List<EG_ColorTransform> EG_ColorTransform;
}

// CT_SRgbColor ...
public class CT_SRgbColor {
	@XmlAttribute(name = "val", required = true)
	protected List<Byte>Attr Val;
	protected List<EG_ColorTransform> EG_ColorTransform;
}

// CT_HslColor ...
public class CT_HslColor {
	@XmlAttribute(name = "hue", required = true)
	protected IntegerAttr Hue;
	@XmlAttribute(name = "sat", required = true)
	protected ST_PercentageAttr Sat;
	@XmlAttribute(name = "lum", required = true)
	protected ST_PercentageAttr Lum;
	protected List<EG_ColorTransform> EG_ColorTransform;
}

// ST_SystemColorVal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SystemColorVal")
public class ST_SystemColorVal {
	protected String ST_SystemColorVal;
}

// CT_SystemColor ...
public class CT_SystemColor {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	@XmlAttribute(name = "lastClr")
	protected List<Byte>Attr LastClr;
	protected List<EG_ColorTransform> EG_ColorTransform;
}

// ST_SchemeColorVal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_SchemeColorVal")
public class ST_SchemeColorVal {
	protected String ST_SchemeColorVal;
}

// CT_SchemeColor ...
public class CT_SchemeColor {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	protected List<EG_ColorTransform> EG_ColorTransform;
}

// ST_PresetColorVal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PresetColorVal")
public class ST_PresetColorVal {
	protected String ST_PresetColorVal;
}

// CT_PresetColor ...
public class CT_PresetColor {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
	protected List<EG_ColorTransform> EG_ColorTransform;
}

// EG_OfficeArtExtensionList ...
public class EG_OfficeArtExtensionList {
	@XmlElement(required = true, name = "ext")
	protected List<CT_OfficeArtExtension> Ext;
}

// CT_OfficeArtExtensionList ...
public class CT_OfficeArtExtensionList {
	protected List<EG_OfficeArtExtensionList> EG_OfficeArtExtensionList;
}

// CT_Scale2D ...
public class CT_Scale2D {
	@XmlElement(required = true, name = "sx")
	protected CT_Ratio Sx;
	@XmlElement(required = true, name = "sy")
	protected CT_Ratio Sy;
}

// CT_Transform2D ...
public class CT_Transform2D {
	@XmlAttribute(name = "rot")
	protected IntegerAttr Rot;
	@XmlAttribute(name = "flipH")
	protected BooleanAttr FlipH;
	@XmlAttribute(name = "flipV")
	protected BooleanAttr FlipV;
	@XmlElement(required = true, name = "off")
	protected CT_Point2D Off;
	@XmlElement(required = true, name = "ext")
	protected CT_PositiveSize2D Ext;
}

// CT_GroupTransform2D ...
public class CT_GroupTransform2D {
	@XmlAttribute(name = "rot")
	protected IntegerAttr Rot;
	@XmlAttribute(name = "flipH")
	protected BooleanAttr FlipH;
	@XmlAttribute(name = "flipV")
	protected BooleanAttr FlipV;
	@XmlElement(required = true, name = "off")
	protected CT_Point2D Off;
	@XmlElement(required = true, name = "ext")
	protected CT_PositiveSize2D Ext;
	@XmlElement(required = true, name = "chOff")
	protected CT_Point2D ChOff;
	@XmlElement(required = true, name = "chExt")
	protected CT_PositiveSize2D ChExt;
}

// CT_Point3D ...
public class CT_Point3D {
	@XmlAttribute(name = "x", required = true)
	protected ST_CoordinateAttr X;
	@XmlAttribute(name = "y", required = true)
	protected ST_CoordinateAttr Y;
	@XmlAttribute(name = "z", required = true)
	protected ST_CoordinateAttr Z;
}

// CT_Vector3D ...
public class CT_Vector3D {
	@XmlAttribute(name = "dx", required = true)
	protected ST_CoordinateAttr Dx;
	@XmlAttribute(name = "dy", required = true)
	protected ST_CoordinateAttr Dy;
	@XmlAttribute(name = "dz", required = true)
	protected ST_CoordinateAttr Dz;
}

// CT_SphereCoords ...
public class CT_SphereCoords {
	@XmlAttribute(name = "lat", required = true)
	protected IntegerAttr Lat;
	@XmlAttribute(name = "lon", required = true)
	protected IntegerAttr Lon;
	@XmlAttribute(name = "rev", required = true)
	protected IntegerAttr Rev;
}

// CT_RelativeRect ...
public class CT_RelativeRect {
	@XmlAttribute(name = "l")
	protected ST_PercentageAttr L;
	@XmlAttribute(name = "t")
	protected ST_PercentageAttr T;
	@XmlAttribute(name = "r")
	protected ST_PercentageAttr R;
	@XmlAttribute(name = "b")
	protected ST_PercentageAttr B;
}

// ST_RectAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_RectAlignment")
public class ST_RectAlignment {
	protected String ST_RectAlignment;
}

// EG_ColorChoice ...
public class EG_ColorChoice {
	@XmlElement(required = true, name = "scrgbClr")
	protected CT_ScRgbColor ScrgbClr;
	@XmlElement(required = true, name = "srgbClr")
	protected CT_SRgbColor SrgbClr;
	@XmlElement(required = true, name = "hslClr")
	protected CT_HslColor HslClr;
	@XmlElement(required = true, name = "sysClr")
	protected CT_SystemColor SysClr;
	@XmlElement(required = true, name = "schemeClr")
	protected CT_SchemeColor SchemeClr;
	@XmlElement(required = true, name = "prstClr")
	protected CT_PresetColor PrstClr;
}

// CT_Color ...
public class CT_Color {
	protected EG_ColorChoice EG_ColorChoice;
}

// CT_ColorMRU ...
public class CT_ColorMRU {
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// ST_BlackWhiteMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BlackWhiteMode")
public class ST_BlackWhiteMode {
	protected String ST_BlackWhiteMode;
}

// AG_Blob ...
public class AG_Blob {
	@XmlAttribute(name = "r:embed")
	protected StringAttr REmbed;
	@XmlAttribute(name = "r:link")
	protected StringAttr RLink;
}

// CT_EmbeddedWAVAudioFile ...
public class CT_EmbeddedWAVAudioFile {
	@XmlAttribute(name = "r:embed", required = true)
	protected StringAttr REmbed;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
}

// CT_Hyperlink ...
public class CT_Hyperlink {
	@XmlAttribute(name = "r:id")
	protected StringAttr RId;
	@XmlAttribute(name = "invalidUrl")
	protected StringAttr InvalidUrl;
	@XmlAttribute(name = "action")
	protected StringAttr Action;
	@XmlAttribute(name = "tgtFrame")
	protected StringAttr TgtFrame;
	@XmlAttribute(name = "tooltip")
	protected StringAttr Tooltip;
	@XmlAttribute(name = "history")
	protected BooleanAttr History;
	@XmlAttribute(name = "highlightClick")
	protected BooleanAttr HighlightClick;
	@XmlAttribute(name = "endSnd")
	protected BooleanAttr EndSnd;
	@XmlElement(required = true, name = "snd")
	protected CT_EmbeddedWAVAudioFile Snd;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// ST_DrawingElementId ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DrawingElementId")
public class ST_DrawingElementId {
	protected Integer ST_DrawingElementId;
}

// AG_Locking ...
public class AG_Locking {
	@XmlAttribute(name = "noGrp")
	protected BooleanAttr NoGrp;
	@XmlAttribute(name = "noSelect")
	protected BooleanAttr NoSelect;
	@XmlAttribute(name = "noRot")
	protected BooleanAttr NoRot;
	@XmlAttribute(name = "noChangeAspect")
	protected BooleanAttr NoChangeAspect;
	@XmlAttribute(name = "noMove")
	protected BooleanAttr NoMove;
	@XmlAttribute(name = "noResize")
	protected BooleanAttr NoResize;
	@XmlAttribute(name = "noEditPoints")
	protected BooleanAttr NoEditPoints;
	@XmlAttribute(name = "noAdjustHandles")
	protected BooleanAttr NoAdjustHandles;
	@XmlAttribute(name = "noChangeArrowheads")
	protected BooleanAttr NoChangeArrowheads;
	@XmlAttribute(name = "noChangeShapeType")
	protected BooleanAttr NoChangeShapeType;
}

// CT_ConnectorLocking ...
public class CT_ConnectorLocking {
	@XmlElement(required = true)
	protected AG_Locking AG_Locking;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_ShapeLocking ...
public class CT_ShapeLocking {
	@XmlElement(required = true)
	protected AG_Locking AG_Locking;
	@XmlAttribute(name = "noTextEdit")
	protected BooleanAttr NoTextEdit;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_PictureLocking ...
public class CT_PictureLocking {
	@XmlElement(required = true)
	protected AG_Locking AG_Locking;
	@XmlAttribute(name = "noCrop")
	protected BooleanAttr NoCrop;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GroupLocking ...
public class CT_GroupLocking {
	@XmlAttribute(name = "noGrp")
	protected BooleanAttr NoGrp;
	@XmlAttribute(name = "noUngrp")
	protected BooleanAttr NoUngrp;
	@XmlAttribute(name = "noSelect")
	protected BooleanAttr NoSelect;
	@XmlAttribute(name = "noRot")
	protected BooleanAttr NoRot;
	@XmlAttribute(name = "noChangeAspect")
	protected BooleanAttr NoChangeAspect;
	@XmlAttribute(name = "noMove")
	protected BooleanAttr NoMove;
	@XmlAttribute(name = "noResize")
	protected BooleanAttr NoResize;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GraphicalObjectFrameLocking ...
public class CT_GraphicalObjectFrameLocking {
	@XmlAttribute(name = "noGrp")
	protected BooleanAttr NoGrp;
	@XmlAttribute(name = "noDrilldown")
	protected BooleanAttr NoDrilldown;
	@XmlAttribute(name = "noSelect")
	protected BooleanAttr NoSelect;
	@XmlAttribute(name = "noChangeAspect")
	protected BooleanAttr NoChangeAspect;
	@XmlAttribute(name = "noMove")
	protected BooleanAttr NoMove;
	@XmlAttribute(name = "noResize")
	protected BooleanAttr NoResize;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_ContentPartLocking ...
public class CT_ContentPartLocking {
	@XmlElement(required = true)
	protected AG_Locking AG_Locking;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualDrawingProps ...
public class CT_NonVisualDrawingProps {
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "descr")
	protected StringAttr Descr;
	@XmlAttribute(name = "hidden")
	protected BooleanAttr Hidden;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
	@XmlElement(required = true, name = "hlinkClick")
	protected CT_Hyperlink HlinkClick;
	@XmlElement(required = true, name = "hlinkHover")
	protected CT_Hyperlink HlinkHover;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualDrawingShapeProps ...
public class CT_NonVisualDrawingShapeProps {
	@XmlAttribute(name = "txBox")
	protected BooleanAttr TxBox;
	@XmlElement(required = true, name = "spLocks")
	protected CT_ShapeLocking SpLocks;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualConnectorProperties ...
public class CT_NonVisualConnectorProperties {
	@XmlElement(required = true, name = "cxnSpLocks")
	protected CT_ConnectorLocking CxnSpLocks;
	@XmlElement(required = true, name = "stCxn")
	protected CT_Connection StCxn;
	@XmlElement(required = true, name = "endCxn")
	protected CT_Connection EndCxn;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualPictureProperties ...
public class CT_NonVisualPictureProperties {
	@XmlAttribute(name = "preferRelativeResize")
	protected BooleanAttr PreferRelativeResize;
	@XmlElement(required = true, name = "picLocks")
	protected CT_PictureLocking PicLocks;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualGroupDrawingShapeProps ...
public class CT_NonVisualGroupDrawingShapeProps {
	@XmlElement(required = true, name = "grpSpLocks")
	protected CT_GroupLocking GrpSpLocks;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualGraphicFrameProperties ...
public class CT_NonVisualGraphicFrameProperties {
	@XmlElement(required = true, name = "graphicFrameLocks")
	protected CT_GraphicalObjectFrameLocking GraphicFrameLocks;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_NonVisualContentPartProperties ...
public class CT_NonVisualContentPartProperties {
	@XmlAttribute(name = "isComment")
	protected BooleanAttr IsComment;
	@XmlElement(required = true, name = "cpLocks")
	protected CT_ContentPartLocking CpLocks;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GraphicalObjectData ...
public class CT_GraphicalObjectData {
	@XmlAttribute(name = "uri", required = true)
	protected StringAttr Uri;
}

// CT_GraphicalObject ...
public class CT_GraphicalObject {
	@XmlElement(required = true, name = "graphicData")
	protected CT_GraphicalObjectData GraphicData;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "graphic")
public class Graphic {
	protected CT_GraphicalObject Graphic;
}

// ST_ChartBuildStep ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ChartBuildStep")
public class ST_ChartBuildStep {
	protected String ST_ChartBuildStep;
}

// ST_DgmBuildStep ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_DgmBuildStep")
public class ST_DgmBuildStep {
	protected String ST_DgmBuildStep;
}

// CT_AnimationDgmElement ...
public class CT_AnimationDgmElement {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "bldStep")
	protected StringAttr BldStep;
}

// CT_AnimationChartElement ...
public class CT_AnimationChartElement {
	@XmlAttribute(name = "seriesIdx")
	protected IntegerAttr SeriesIdx;
	@XmlAttribute(name = "categoryIdx")
	protected IntegerAttr CategoryIdx;
	@XmlAttribute(name = "bldStep", required = true)
	protected StringAttr BldStep;
}

// CT_AnimationElementChoice ...
public class CT_AnimationElementChoice {
	@XmlElement(required = true, name = "dgm")
	protected CT_AnimationDgmElement Dgm;
	@XmlElement(required = true, name = "chart")
	protected CT_AnimationChartElement Chart;
}

// ST_AnimationBuildType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AnimationBuildType")
public class ST_AnimationBuildType {
	protected String ST_AnimationBuildType;
}

// ST_AnimationDgmOnlyBuildType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AnimationDgmOnlyBuildType")
public class ST_AnimationDgmOnlyBuildType {
	protected String ST_AnimationDgmOnlyBuildType;
}

// ST_AnimationDgmBuildType ...
public class ST_AnimationDgmBuildType {
	@XmlElement(required = true)
	protected String ST_AnimationBuildType;
	@XmlElement(required = true)
	protected String ST_AnimationDgmOnlyBuildType;
}

// CT_AnimationDgmBuildProperties ...
public class CT_AnimationDgmBuildProperties {
	@XmlAttribute(name = "bld")
	protected ST_AnimationDgmBuildTypeAttr Bld;
	@XmlAttribute(name = "rev")
	protected BooleanAttr Rev;
}

// ST_AnimationChartOnlyBuildType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_AnimationChartOnlyBuildType")
public class ST_AnimationChartOnlyBuildType {
	protected String ST_AnimationChartOnlyBuildType;
}

// ST_AnimationChartBuildType ...
public class ST_AnimationChartBuildType {
	@XmlElement(required = true)
	protected String ST_AnimationBuildType;
	@XmlElement(required = true)
	protected String ST_AnimationChartOnlyBuildType;
}

// CT_AnimationChartBuildProperties ...
public class CT_AnimationChartBuildProperties {
	@XmlAttribute(name = "bld")
	protected ST_AnimationChartBuildTypeAttr Bld;
	@XmlAttribute(name = "animBg")
	protected BooleanAttr AnimBg;
}

// CT_AnimationGraphicalObjectBuildProperties ...
public class CT_AnimationGraphicalObjectBuildProperties {
	@XmlElement(required = true, name = "bldDgm")
	protected CT_AnimationDgmBuildProperties BldDgm;
	@XmlElement(required = true, name = "bldChart")
	protected CT_AnimationChartBuildProperties BldChart;
}

// CT_BackgroundFormatting ...
public class CT_BackgroundFormatting {
	protected List<EG_FillProperties> EG_FillProperties;
	protected List<EG_EffectProperties> EG_EffectProperties;
}

// CT_WholeE2oFormatting ...
public class CT_WholeE2oFormatting {
	protected List<EG_EffectProperties> EG_EffectProperties;
	@XmlElement(required = true, name = "ln")
	protected CT_LineProperties Ln;
}

// CT_GvmlUseShapeRectangle ...
public class CT_GvmlUseShapeRectangle {
}

// CT_GvmlTextShape ...
public class CT_GvmlTextShape {
	@XmlElement(required = true, name = "txBody")
	protected CT_TextBody TxBody;
	@XmlElement(required = true, name = "useSpRect")
	protected CT_GvmlUseShapeRectangle UseSpRect;
	@XmlElement(required = true, name = "xfrm")
	protected CT_Transform2D Xfrm;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GvmlShapeNonVisual ...
public class CT_GvmlShapeNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvSpPr")
	protected CT_NonVisualDrawingShapeProps CNvSpPr;
}

// CT_GvmlShape ...
public class CT_GvmlShape {
	@XmlElement(required = true, name = "nvSpPr")
	protected CT_GvmlShapeNonVisual NvSpPr;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "txSp")
	protected CT_GvmlTextShape TxSp;
	@XmlElement(required = true, name = "style")
	protected CT_ShapeStyle Style;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GvmlConnectorNonVisual ...
public class CT_GvmlConnectorNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvCxnSpPr")
	protected CT_NonVisualConnectorProperties CNvCxnSpPr;
}

// CT_GvmlConnector ...
public class CT_GvmlConnector {
	@XmlElement(required = true, name = "nvCxnSpPr")
	protected CT_GvmlConnectorNonVisual NvCxnSpPr;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "style")
	protected CT_ShapeStyle Style;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GvmlPictureNonVisual ...
public class CT_GvmlPictureNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvPicPr")
	protected CT_NonVisualPictureProperties CNvPicPr;
}

// CT_GvmlPicture ...
public class CT_GvmlPicture {
	@XmlElement(required = true, name = "nvPicPr")
	protected CT_GvmlPictureNonVisual NvPicPr;
	@XmlElement(required = true, name = "blipFill")
	protected CT_BlipFillProperties BlipFill;
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "style")
	protected CT_ShapeStyle Style;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GvmlGraphicFrameNonVisual ...
public class CT_GvmlGraphicFrameNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvGraphicFramePr")
	protected CT_NonVisualGraphicFrameProperties CNvGraphicFramePr;
}

// CT_GvmlGraphicalObjectFrame ...
public class CT_GvmlGraphicalObjectFrame {
	@XmlElement(required = true, name = "nvGraphicFramePr")
	protected CT_GvmlGraphicFrameNonVisual NvGraphicFramePr;
	@XmlElement(required = true, name = "graphic")
	protected CT_GraphicalObject Graphic;
	@XmlElement(required = true, name = "xfrm")
	protected CT_Transform2D Xfrm;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GvmlGroupShapeNonVisual ...
public class CT_GvmlGroupShapeNonVisual {
	@XmlElement(required = true, name = "cNvPr")
	protected CT_NonVisualDrawingProps CNvPr;
	@XmlElement(required = true, name = "cNvGrpSpPr")
	protected CT_NonVisualGroupDrawingShapeProps CNvGrpSpPr;
}

// CT_GvmlGroupShape ...
public class CT_GvmlGroupShape {
	@XmlElement(required = true, name = "nvGrpSpPr")
	protected CT_GvmlGroupShapeNonVisual NvGrpSpPr;
	@XmlElement(required = true, name = "grpSpPr")
	protected CT_GroupShapeProperties GrpSpPr;
	@XmlElement(required = true, name = "txSp")
	protected CT_GvmlTextShape TxSp;
	@XmlElement(required = true, name = "sp")
	protected CT_GvmlShape Sp;
	@XmlElement(required = true, name = "cxnSp")
	protected CT_GvmlConnector CxnSp;
	@XmlElement(required = true, name = "pic")
	protected CT_GvmlPicture Pic;
	@XmlElement(required = true, name = "graphicFrame")
	protected CT_GvmlGraphicalObjectFrame GraphicFrame;
	@XmlElement(required = true, name = "grpSp")
	protected CT_GvmlGroupShape GrpSp;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// ST_PresetCameraType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PresetCameraType")
public class ST_PresetCameraType {
	protected String ST_PresetCameraType;
}

// ST_FOVAngle ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_FOVAngle")
public class ST_FOVAngle {
	protected Integer ST_FOVAngle;
}

// CT_Camera ...
public class CT_Camera {
	@XmlAttribute(name = "prst", required = true)
	protected StringAttr Prst;
	@XmlAttribute(name = "fov")
	protected IntegerAttr Fov;
	@XmlAttribute(name = "zoom")
	protected ST_PositivePercentageAttr Zoom;
	@XmlElement(required = true, name = "rot")
	protected CT_SphereCoords Rot;
}

// ST_LightRigDirection ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LightRigDirection")
public class ST_LightRigDirection {
	protected String ST_LightRigDirection;
}

// ST_LightRigType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LightRigType")
public class ST_LightRigType {
	protected String ST_LightRigType;
}

// CT_LightRig ...
public class CT_LightRig {
	@XmlAttribute(name = "rig", required = true)
	protected StringAttr Rig;
	@XmlAttribute(name = "dir", required = true)
	protected StringAttr Dir;
	@XmlElement(required = true, name = "rot")
	protected CT_SphereCoords Rot;
}

// CT_Scene3D ...
public class CT_Scene3D {
	@XmlElement(required = true, name = "camera")
	protected CT_Camera Camera;
	@XmlElement(required = true, name = "lightRig")
	protected CT_LightRig LightRig;
	@XmlElement(required = true, name = "backdrop")
	protected CT_Backdrop Backdrop;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Backdrop ...
public class CT_Backdrop {
	@XmlElement(required = true, name = "anchor")
	protected CT_Point3D Anchor;
	@XmlElement(required = true, name = "norm")
	protected CT_Vector3D Norm;
	@XmlElement(required = true, name = "up")
	protected CT_Vector3D Up;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// ST_BevelPresetType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BevelPresetType")
public class ST_BevelPresetType {
	protected String ST_BevelPresetType;
}

// CT_Bevel ...
public class CT_Bevel {
	@XmlAttribute(name = "w")
	protected LongAttr W;
	@XmlAttribute(name = "h")
	protected LongAttr H;
	@XmlAttribute(name = "prst")
	protected StringAttr Prst;
}

// ST_PresetMaterialType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PresetMaterialType")
public class ST_PresetMaterialType {
	protected String ST_PresetMaterialType;
}

// CT_Shape3D ...
public class CT_Shape3D {
	@XmlAttribute(name = "z")
	protected ST_CoordinateAttr Z;
	@XmlAttribute(name = "extrusionH")
	protected LongAttr ExtrusionH;
	@XmlAttribute(name = "contourW")
	protected LongAttr ContourW;
	@XmlAttribute(name = "prstMaterial")
	protected StringAttr PrstMaterial;
	@XmlElement(required = true, name = "bevelT")
	protected CT_Bevel BevelT;
	@XmlElement(required = true, name = "bevelB")
	protected CT_Bevel BevelB;
	@XmlElement(required = true, name = "extrusionClr")
	protected CT_Color ExtrusionClr;
	@XmlElement(required = true, name = "contourClr")
	protected CT_Color ContourClr;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_FlatText ...
public class CT_FlatText {
	@XmlAttribute(name = "z")
	protected ST_CoordinateAttr Z;
}

// EG_Text3D ...
public class EG_Text3D {
	@XmlElement(required = true, name = "sp3d")
	protected CT_Shape3D Sp3d;
	@XmlElement(required = true, name = "flatTx")
	protected CT_FlatText FlatTx;
}

// CT_AlphaBiLevelEffect ...
public class CT_AlphaBiLevelEffect {
	@XmlAttribute(name = "thresh", required = true)
	protected ST_PositiveFixedPercentageAttr Thresh;
}

// CT_AlphaCeilingEffect ...
public class CT_AlphaCeilingEffect {
}

// CT_AlphaFloorEffect ...
public class CT_AlphaFloorEffect {
}

// CT_AlphaInverseEffect ...
public class CT_AlphaInverseEffect {
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_AlphaModulateFixedEffect ...
public class CT_AlphaModulateFixedEffect {
	@XmlAttribute(name = "amt")
	protected ST_PositivePercentageAttr Amt;
}

// CT_AlphaOutsetEffect ...
public class CT_AlphaOutsetEffect {
	@XmlAttribute(name = "rad")
	protected ST_CoordinateAttr Rad;
}

// CT_AlphaReplaceEffect ...
public class CT_AlphaReplaceEffect {
	@XmlAttribute(name = "a", required = true)
	protected ST_PositiveFixedPercentageAttr A;
}

// CT_BiLevelEffect ...
public class CT_BiLevelEffect {
	@XmlAttribute(name = "thresh", required = true)
	protected ST_PositiveFixedPercentageAttr Thresh;
}

// CT_BlurEffect ...
public class CT_BlurEffect {
	@XmlAttribute(name = "rad")
	protected LongAttr Rad;
	@XmlAttribute(name = "grow")
	protected BooleanAttr Grow;
}

// CT_ColorChangeEffect ...
public class CT_ColorChangeEffect {
	@XmlAttribute(name = "useA")
	protected BooleanAttr UseA;
	@XmlElement(required = true, name = "clrFrom")
	protected CT_Color ClrFrom;
	@XmlElement(required = true, name = "clrTo")
	protected CT_Color ClrTo;
}

// CT_ColorReplaceEffect ...
public class CT_ColorReplaceEffect {
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_DuotoneEffect ...
public class CT_DuotoneEffect {
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_GlowEffect ...
public class CT_GlowEffect {
	@XmlAttribute(name = "rad")
	protected LongAttr Rad;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_GrayscaleEffect ...
public class CT_GrayscaleEffect {
}

// CT_HSLEffect ...
public class CT_HSLEffect {
	@XmlAttribute(name = "hue")
	protected IntegerAttr Hue;
	@XmlAttribute(name = "sat")
	protected ST_FixedPercentageAttr Sat;
	@XmlAttribute(name = "lum")
	protected ST_FixedPercentageAttr Lum;
}

// CT_InnerShadowEffect ...
public class CT_InnerShadowEffect {
	@XmlAttribute(name = "blurRad")
	protected LongAttr BlurRad;
	@XmlAttribute(name = "dist")
	protected LongAttr Dist;
	@XmlAttribute(name = "dir")
	protected IntegerAttr Dir;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_LuminanceEffect ...
public class CT_LuminanceEffect {
	@XmlAttribute(name = "bright")
	protected ST_FixedPercentageAttr Bright;
	@XmlAttribute(name = "contrast")
	protected ST_FixedPercentageAttr Contrast;
}

// CT_OuterShadowEffect ...
public class CT_OuterShadowEffect {
	@XmlAttribute(name = "blurRad")
	protected LongAttr BlurRad;
	@XmlAttribute(name = "dist")
	protected LongAttr Dist;
	@XmlAttribute(name = "dir")
	protected IntegerAttr Dir;
	@XmlAttribute(name = "sx")
	protected ST_PercentageAttr Sx;
	@XmlAttribute(name = "sy")
	protected ST_PercentageAttr Sy;
	@XmlAttribute(name = "kx")
	protected IntegerAttr Kx;
	@XmlAttribute(name = "ky")
	protected IntegerAttr Ky;
	@XmlAttribute(name = "algn")
	protected StringAttr Algn;
	@XmlAttribute(name = "rotWithShape")
	protected BooleanAttr RotWithShape;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// ST_PresetShadowVal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PresetShadowVal")
public class ST_PresetShadowVal {
	protected String ST_PresetShadowVal;
}

// CT_PresetShadowEffect ...
public class CT_PresetShadowEffect {
	@XmlAttribute(name = "prst", required = true)
	protected StringAttr Prst;
	@XmlAttribute(name = "dist")
	protected LongAttr Dist;
	@XmlAttribute(name = "dir")
	protected IntegerAttr Dir;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_ReflectionEffect ...
public class CT_ReflectionEffect {
	@XmlAttribute(name = "blurRad")
	protected LongAttr BlurRad;
	@XmlAttribute(name = "stA")
	protected ST_PositiveFixedPercentageAttr StA;
	@XmlAttribute(name = "stPos")
	protected ST_PositiveFixedPercentageAttr StPos;
	@XmlAttribute(name = "endA")
	protected ST_PositiveFixedPercentageAttr EndA;
	@XmlAttribute(name = "endPos")
	protected ST_PositiveFixedPercentageAttr EndPos;
	@XmlAttribute(name = "dist")
	protected LongAttr Dist;
	@XmlAttribute(name = "dir")
	protected IntegerAttr Dir;
	@XmlAttribute(name = "fadeDir")
	protected IntegerAttr FadeDir;
	@XmlAttribute(name = "sx")
	protected ST_PercentageAttr Sx;
	@XmlAttribute(name = "sy")
	protected ST_PercentageAttr Sy;
	@XmlAttribute(name = "kx")
	protected IntegerAttr Kx;
	@XmlAttribute(name = "ky")
	protected IntegerAttr Ky;
	@XmlAttribute(name = "algn")
	protected StringAttr Algn;
	@XmlAttribute(name = "rotWithShape")
	protected BooleanAttr RotWithShape;
}

// CT_RelativeOffsetEffect ...
public class CT_RelativeOffsetEffect {
	@XmlAttribute(name = "tx")
	protected ST_PercentageAttr Tx;
	@XmlAttribute(name = "ty")
	protected ST_PercentageAttr Ty;
}

// CT_SoftEdgesEffect ...
public class CT_SoftEdgesEffect {
	@XmlAttribute(name = "rad", required = true)
	protected LongAttr Rad;
}

// CT_TintEffect ...
public class CT_TintEffect {
	@XmlAttribute(name = "hue")
	protected IntegerAttr Hue;
	@XmlAttribute(name = "amt")
	protected ST_FixedPercentageAttr Amt;
}

// CT_TransformEffect ...
public class CT_TransformEffect {
	@XmlAttribute(name = "sx")
	protected ST_PercentageAttr Sx;
	@XmlAttribute(name = "sy")
	protected ST_PercentageAttr Sy;
	@XmlAttribute(name = "kx")
	protected IntegerAttr Kx;
	@XmlAttribute(name = "ky")
	protected IntegerAttr Ky;
	@XmlAttribute(name = "tx")
	protected ST_CoordinateAttr Tx;
	@XmlAttribute(name = "ty")
	protected ST_CoordinateAttr Ty;
}

// CT_NoFillProperties ...
public class CT_NoFillProperties {
}

// CT_SolidColorFillProperties ...
public class CT_SolidColorFillProperties {
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_LinearShadeProperties ...
public class CT_LinearShadeProperties {
	@XmlAttribute(name = "ang")
	protected IntegerAttr Ang;
	@XmlAttribute(name = "scaled")
	protected BooleanAttr Scaled;
}

// ST_PathShadeType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PathShadeType")
public class ST_PathShadeType {
	protected String ST_PathShadeType;
}

// CT_PathShadeProperties ...
public class CT_PathShadeProperties {
	@XmlAttribute(name = "path")
	protected StringAttr Path;
	@XmlElement(required = true, name = "fillToRect")
	protected CT_RelativeRect FillToRect;
}

// EG_ShadeProperties ...
public class EG_ShadeProperties {
	@XmlElement(required = true, name = "lin")
	protected CT_LinearShadeProperties Lin;
	@XmlElement(required = true, name = "path")
	protected CT_PathShadeProperties Path;
}

// ST_TileFlipMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TileFlipMode")
public class ST_TileFlipMode {
	protected String ST_TileFlipMode;
}

// CT_GradientStop ...
public class CT_GradientStop {
	@XmlAttribute(name = "pos", required = true)
	protected ST_PositiveFixedPercentageAttr Pos;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_GradientStopList ...
public class CT_GradientStopList {
	@XmlElement(required = true, name = "gs")
	protected List<CT_GradientStop> Gs;
}

// CT_GradientFillProperties ...
public class CT_GradientFillProperties {
	@XmlAttribute(name = "flip")
	protected StringAttr Flip;
	@XmlAttribute(name = "rotWithShape")
	protected BooleanAttr RotWithShape;
	protected List<EG_ShadeProperties> EG_ShadeProperties;
	@XmlElement(required = true, name = "gsLst")
	protected CT_GradientStopList GsLst;
	@XmlElement(required = true, name = "tileRect")
	protected CT_RelativeRect TileRect;
}

// CT_TileInfoProperties ...
public class CT_TileInfoProperties {
	@XmlAttribute(name = "tx")
	protected ST_CoordinateAttr Tx;
	@XmlAttribute(name = "ty")
	protected ST_CoordinateAttr Ty;
	@XmlAttribute(name = "sx")
	protected ST_PercentageAttr Sx;
	@XmlAttribute(name = "sy")
	protected ST_PercentageAttr Sy;
	@XmlAttribute(name = "flip")
	protected StringAttr Flip;
	@XmlAttribute(name = "algn")
	protected StringAttr Algn;
}

// CT_StretchInfoProperties ...
public class CT_StretchInfoProperties {
	@XmlElement(required = true, name = "fillRect")
	protected CT_RelativeRect FillRect;
}

// EG_FillModeProperties ...
public class EG_FillModeProperties {
	@XmlElement(required = true, name = "tile")
	protected CT_TileInfoProperties Tile;
	@XmlElement(required = true, name = "stretch")
	protected CT_StretchInfoProperties Stretch;
}

// ST_BlipCompression ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BlipCompression")
public class ST_BlipCompression {
	protected String ST_BlipCompression;
}

// CT_Blip ...
public class CT_Blip {
	@XmlElement(required = true)
	protected AG_Blob AG_Blob;
	@XmlAttribute(name = "cstate")
	protected StringAttr Cstate;
	@XmlElement(required = true, name = "alphaBiLevel")
	protected CT_AlphaBiLevelEffect AlphaBiLevel;
	@XmlElement(required = true, name = "alphaCeiling")
	protected CT_AlphaCeilingEffect AlphaCeiling;
	@XmlElement(required = true, name = "alphaFloor")
	protected CT_AlphaFloorEffect AlphaFloor;
	@XmlElement(required = true, name = "alphaInv")
	protected CT_AlphaInverseEffect AlphaInv;
	@XmlElement(required = true, name = "alphaMod")
	protected CT_AlphaModulateEffect AlphaMod;
	@XmlElement(required = true, name = "alphaModFix")
	protected CT_AlphaModulateFixedEffect AlphaModFix;
	@XmlElement(required = true, name = "alphaRepl")
	protected CT_AlphaReplaceEffect AlphaRepl;
	@XmlElement(required = true, name = "biLevel")
	protected CT_BiLevelEffect BiLevel;
	@XmlElement(required = true, name = "blur")
	protected CT_BlurEffect Blur;
	@XmlElement(required = true, name = "clrChange")
	protected CT_ColorChangeEffect ClrChange;
	@XmlElement(required = true, name = "clrRepl")
	protected CT_ColorReplaceEffect ClrRepl;
	@XmlElement(required = true, name = "duotone")
	protected CT_DuotoneEffect Duotone;
	@XmlElement(required = true, name = "fillOverlay")
	protected CT_FillOverlayEffect FillOverlay;
	@XmlElement(required = true, name = "grayscl")
	protected CT_GrayscaleEffect Grayscl;
	@XmlElement(required = true, name = "hsl")
	protected CT_HSLEffect Hsl;
	@XmlElement(required = true, name = "lum")
	protected CT_LuminanceEffect Lum;
	@XmlElement(required = true, name = "tint")
	protected CT_TintEffect Tint;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_BlipFillProperties ...
public class CT_BlipFillProperties {
	@XmlAttribute(name = "dpi")
	protected IntegerAttr Dpi;
	@XmlAttribute(name = "rotWithShape")
	protected BooleanAttr RotWithShape;
	protected List<EG_FillModeProperties> EG_FillModeProperties;
	@XmlElement(required = true, name = "blip")
	protected CT_Blip Blip;
	@XmlElement(required = true, name = "srcRect")
	protected CT_RelativeRect SrcRect;
}

// ST_PresetPatternVal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PresetPatternVal")
public class ST_PresetPatternVal {
	protected String ST_PresetPatternVal;
}

// CT_PatternFillProperties ...
public class CT_PatternFillProperties {
	@XmlAttribute(name = "prst")
	protected StringAttr Prst;
	@XmlElement(required = true, name = "fgClr")
	protected CT_Color FgClr;
	@XmlElement(required = true, name = "bgClr")
	protected CT_Color BgClr;
}

// CT_GroupFillProperties ...
public class CT_GroupFillProperties {
}

// EG_FillProperties ...
public class EG_FillProperties {
	@XmlElement(required = true, name = "noFill")
	protected CT_NoFillProperties NoFill;
	@XmlElement(required = true, name = "solidFill")
	protected CT_SolidColorFillProperties SolidFill;
	@XmlElement(required = true, name = "gradFill")
	protected CT_GradientFillProperties GradFill;
	@XmlElement(required = true, name = "blipFill")
	protected CT_BlipFillProperties BlipFill;
	@XmlElement(required = true, name = "pattFill")
	protected CT_PatternFillProperties PattFill;
	@XmlElement(required = true, name = "grpFill")
	protected CT_GroupFillProperties GrpFill;
}

// CT_FillProperties ...
public class CT_FillProperties {
	protected List<EG_FillProperties> EG_FillProperties;
}

// CT_FillEffect ...
public class CT_FillEffect {
	protected List<EG_FillProperties> EG_FillProperties;
}

// ST_BlendMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_BlendMode")
public class ST_BlendMode {
	protected String ST_BlendMode;
}

// CT_FillOverlayEffect ...
public class CT_FillOverlayEffect {
	@XmlAttribute(name = "blend", required = true)
	protected StringAttr Blend;
	protected List<EG_FillProperties> EG_FillProperties;
}

// CT_EffectReference ...
public class CT_EffectReference {
	@XmlAttribute(name = "ref", required = true)
	protected StringAttr Ref;
}

// EG_Effect ...
public class EG_Effect {
	@XmlElement(required = true, name = "cont")
	protected CT_EffectContainer Cont;
	@XmlElement(required = true, name = "effect")
	protected CT_EffectReference Effect;
	@XmlElement(required = true, name = "alphaBiLevel")
	protected CT_AlphaBiLevelEffect AlphaBiLevel;
	@XmlElement(required = true, name = "alphaCeiling")
	protected CT_AlphaCeilingEffect AlphaCeiling;
	@XmlElement(required = true, name = "alphaFloor")
	protected CT_AlphaFloorEffect AlphaFloor;
	@XmlElement(required = true, name = "alphaInv")
	protected CT_AlphaInverseEffect AlphaInv;
	@XmlElement(required = true, name = "alphaMod")
	protected CT_AlphaModulateEffect AlphaMod;
	@XmlElement(required = true, name = "alphaModFix")
	protected CT_AlphaModulateFixedEffect AlphaModFix;
	@XmlElement(required = true, name = "alphaOutset")
	protected CT_AlphaOutsetEffect AlphaOutset;
	@XmlElement(required = true, name = "alphaRepl")
	protected CT_AlphaReplaceEffect AlphaRepl;
	@XmlElement(required = true, name = "biLevel")
	protected CT_BiLevelEffect BiLevel;
	@XmlElement(required = true, name = "blend")
	protected CT_BlendEffect Blend;
	@XmlElement(required = true, name = "blur")
	protected CT_BlurEffect Blur;
	@XmlElement(required = true, name = "clrChange")
	protected CT_ColorChangeEffect ClrChange;
	@XmlElement(required = true, name = "clrRepl")
	protected CT_ColorReplaceEffect ClrRepl;
	@XmlElement(required = true, name = "duotone")
	protected CT_DuotoneEffect Duotone;
	@XmlElement(required = true, name = "fill")
	protected CT_FillEffect Fill;
	@XmlElement(required = true, name = "fillOverlay")
	protected CT_FillOverlayEffect FillOverlay;
	@XmlElement(required = true, name = "glow")
	protected CT_GlowEffect Glow;
	@XmlElement(required = true, name = "grayscl")
	protected CT_GrayscaleEffect Grayscl;
	@XmlElement(required = true, name = "hsl")
	protected CT_HSLEffect Hsl;
	@XmlElement(required = true, name = "innerShdw")
	protected CT_InnerShadowEffect InnerShdw;
	@XmlElement(required = true, name = "lum")
	protected CT_LuminanceEffect Lum;
	@XmlElement(required = true, name = "outerShdw")
	protected CT_OuterShadowEffect OuterShdw;
	@XmlElement(required = true, name = "prstShdw")
	protected CT_PresetShadowEffect PrstShdw;
	@XmlElement(required = true, name = "reflection")
	protected CT_ReflectionEffect Reflection;
	@XmlElement(required = true, name = "relOff")
	protected CT_RelativeOffsetEffect RelOff;
	@XmlElement(required = true, name = "softEdge")
	protected CT_SoftEdgesEffect SoftEdge;
	@XmlElement(required = true, name = "tint")
	protected CT_TintEffect Tint;
	@XmlElement(required = true, name = "xfrm")
	protected CT_TransformEffect Xfrm;
}

// ST_EffectContainerType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_EffectContainerType")
public class ST_EffectContainerType {
	protected String ST_EffectContainerType;
}

// CT_EffectContainer ...
public class CT_EffectContainer {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	protected List<EG_Effect> EG_Effect;
}

// CT_AlphaModulateEffect ...
public class CT_AlphaModulateEffect {
	@XmlElement(required = true, name = "cont")
	protected CT_EffectContainer Cont;
}

// CT_BlendEffect ...
public class CT_BlendEffect {
	@XmlAttribute(name = "blend", required = true)
	protected StringAttr Blend;
	@XmlElement(required = true, name = "cont")
	protected CT_EffectContainer Cont;
}

// CT_EffectList ...
public class CT_EffectList {
	@XmlElement(required = true, name = "blur")
	protected CT_BlurEffect Blur;
	@XmlElement(required = true, name = "fillOverlay")
	protected CT_FillOverlayEffect FillOverlay;
	@XmlElement(required = true, name = "glow")
	protected CT_GlowEffect Glow;
	@XmlElement(required = true, name = "innerShdw")
	protected CT_InnerShadowEffect InnerShdw;
	@XmlElement(required = true, name = "outerShdw")
	protected CT_OuterShadowEffect OuterShdw;
	@XmlElement(required = true, name = "prstShdw")
	protected CT_PresetShadowEffect PrstShdw;
	@XmlElement(required = true, name = "reflection")
	protected CT_ReflectionEffect Reflection;
	@XmlElement(required = true, name = "softEdge")
	protected CT_SoftEdgesEffect SoftEdge;
}

// EG_EffectProperties ...
public class EG_EffectProperties {
	@XmlElement(required = true, name = "effectLst")
	protected CT_EffectList EffectLst;
	@XmlElement(required = true, name = "effectDag")
	protected CT_EffectContainer EffectDag;
}

// CT_EffectProperties ...
public class CT_EffectProperties {
	protected List<EG_EffectProperties> EG_EffectProperties;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "blip")
public class Blip {
	protected CT_Blip Blip;
}

// ST_ShapeType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ShapeType")
public class ST_ShapeType {
	protected String ST_ShapeType;
}

// ST_TextShapeType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextShapeType")
public class ST_TextShapeType {
	protected String ST_TextShapeType;
}

// ST_GeomGuideName ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GeomGuideName")
public class ST_GeomGuideName {
	protected String ST_GeomGuideName;
}

// ST_GeomGuideFormula ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_GeomGuideFormula")
public class ST_GeomGuideFormula {
	protected String ST_GeomGuideFormula;
}

// CT_GeomGuide ...
public class CT_GeomGuide {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlAttribute(name = "fmla", required = true)
	protected StringAttr Fmla;
}

// CT_GeomGuideList ...
public class CT_GeomGuideList {
	@XmlElement(required = true, name = "gd")
	protected List<CT_GeomGuide> Gd;
}

// ST_AdjCoordinate ...
public class ST_AdjCoordinate {
	@XmlElement(required = true)
	protected ST_Coordinate ST_Coordinate;
	@XmlElement(required = true)
	protected String ST_GeomGuideName;
}

// ST_AdjAngle ...
public class ST_AdjAngle {
	@XmlElement(required = true)
	protected Integer ST_Angle;
	@XmlElement(required = true)
	protected String ST_GeomGuideName;
}

// CT_AdjPoint2D ...
public class CT_AdjPoint2D {
	@XmlAttribute(name = "x", required = true)
	protected ST_AdjCoordinateAttr X;
	@XmlAttribute(name = "y", required = true)
	protected ST_AdjCoordinateAttr Y;
}

// CT_GeomRect ...
public class CT_GeomRect {
	@XmlAttribute(name = "l", required = true)
	protected ST_AdjCoordinateAttr L;
	@XmlAttribute(name = "t", required = true)
	protected ST_AdjCoordinateAttr T;
	@XmlAttribute(name = "r", required = true)
	protected ST_AdjCoordinateAttr R;
	@XmlAttribute(name = "b", required = true)
	protected ST_AdjCoordinateAttr B;
}

// CT_XYAdjustHandle ...
public class CT_XYAdjustHandle {
	@XmlAttribute(name = "gdRefX")
	protected StringAttr GdRefX;
	@XmlAttribute(name = "minX")
	protected ST_AdjCoordinateAttr MinX;
	@XmlAttribute(name = "maxX")
	protected ST_AdjCoordinateAttr MaxX;
	@XmlAttribute(name = "gdRefY")
	protected StringAttr GdRefY;
	@XmlAttribute(name = "minY")
	protected ST_AdjCoordinateAttr MinY;
	@XmlAttribute(name = "maxY")
	protected ST_AdjCoordinateAttr MaxY;
	@XmlElement(required = true, name = "pos")
	protected CT_AdjPoint2D Pos;
}

// CT_PolarAdjustHandle ...
public class CT_PolarAdjustHandle {
	@XmlAttribute(name = "gdRefR")
	protected StringAttr GdRefR;
	@XmlAttribute(name = "minR")
	protected ST_AdjCoordinateAttr MinR;
	@XmlAttribute(name = "maxR")
	protected ST_AdjCoordinateAttr MaxR;
	@XmlAttribute(name = "gdRefAng")
	protected StringAttr GdRefAng;
	@XmlAttribute(name = "minAng")
	protected ST_AdjAngleAttr MinAng;
	@XmlAttribute(name = "maxAng")
	protected ST_AdjAngleAttr MaxAng;
	@XmlElement(required = true, name = "pos")
	protected CT_AdjPoint2D Pos;
}

// CT_ConnectionSite ...
public class CT_ConnectionSite {
	@XmlAttribute(name = "ang", required = true)
	protected ST_AdjAngleAttr Ang;
	@XmlElement(required = true, name = "pos")
	protected CT_AdjPoint2D Pos;
}

// CT_AdjustHandleList ...
public class CT_AdjustHandleList {
	@XmlElement(required = true, name = "ahXY")
	protected CT_XYAdjustHandle AhXY;
	@XmlElement(required = true, name = "ahPolar")
	protected CT_PolarAdjustHandle AhPolar;
}

// CT_ConnectionSiteList ...
public class CT_ConnectionSiteList {
	@XmlElement(required = true, name = "cxn")
	protected List<CT_ConnectionSite> Cxn;
}

// CT_Connection ...
public class CT_Connection {
	@XmlAttribute(name = "id", required = true)
	protected IntegerAttr Id;
	@XmlAttribute(name = "idx", required = true)
	protected IntegerAttr Idx;
}

// CT_Path2DMoveTo ...
public class CT_Path2DMoveTo {
	@XmlElement(required = true, name = "pt")
	protected CT_AdjPoint2D Pt;
}

// CT_Path2DLineTo ...
public class CT_Path2DLineTo {
	@XmlElement(required = true, name = "pt")
	protected CT_AdjPoint2D Pt;
}

// CT_Path2DArcTo ...
public class CT_Path2DArcTo {
	@XmlAttribute(name = "wR", required = true)
	protected ST_AdjCoordinateAttr WR;
	@XmlAttribute(name = "hR", required = true)
	protected ST_AdjCoordinateAttr HR;
	@XmlAttribute(name = "stAng", required = true)
	protected ST_AdjAngleAttr StAng;
	@XmlAttribute(name = "swAng", required = true)
	protected ST_AdjAngleAttr SwAng;
}

// CT_Path2DQuadBezierTo ...
public class CT_Path2DQuadBezierTo {
	@XmlElement(required = true, name = "pt")
	protected List<CT_AdjPoint2D> Pt;
}

// CT_Path2DCubicBezierTo ...
public class CT_Path2DCubicBezierTo {
	@XmlElement(required = true, name = "pt")
	protected List<CT_AdjPoint2D> Pt;
}

// CT_Path2DClose ...
public class CT_Path2DClose {
}

// ST_PathFillMode ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PathFillMode")
public class ST_PathFillMode {
	protected String ST_PathFillMode;
}

// CT_Path2D ...
public class CT_Path2D {
	@XmlAttribute(name = "w")
	protected LongAttr W;
	@XmlAttribute(name = "h")
	protected LongAttr H;
	@XmlAttribute(name = "fill")
	protected StringAttr Fill;
	@XmlAttribute(name = "stroke")
	protected BooleanAttr Stroke;
	@XmlAttribute(name = "extrusionOk")
	protected BooleanAttr ExtrusionOk;
	@XmlElement(required = true, name = "close")
	protected CT_Path2DClose Close;
	@XmlElement(required = true, name = "moveTo")
	protected CT_Path2DMoveTo MoveTo;
	@XmlElement(required = true, name = "lnTo")
	protected CT_Path2DLineTo LnTo;
	@XmlElement(required = true, name = "arcTo")
	protected CT_Path2DArcTo ArcTo;
	@XmlElement(required = true, name = "quadBezTo")
	protected CT_Path2DQuadBezierTo QuadBezTo;
	@XmlElement(required = true, name = "cubicBezTo")
	protected CT_Path2DCubicBezierTo CubicBezTo;
}

// CT_Path2DList ...
public class CT_Path2DList {
	@XmlElement(required = true, name = "path")
	protected List<CT_Path2D> Path;
}

// CT_PresetGeometry2D ...
public class CT_PresetGeometry2D {
	@XmlAttribute(name = "prst", required = true)
	protected StringAttr Prst;
	@XmlElement(required = true, name = "avLst")
	protected CT_GeomGuideList AvLst;
}

// CT_PresetTextShape ...
public class CT_PresetTextShape {
	@XmlAttribute(name = "prst", required = true)
	protected StringAttr Prst;
	@XmlElement(required = true, name = "avLst")
	protected CT_GeomGuideList AvLst;
}

// CT_CustomGeometry2D ...
public class CT_CustomGeometry2D {
	@XmlElement(required = true, name = "avLst")
	protected CT_GeomGuideList AvLst;
	@XmlElement(required = true, name = "gdLst")
	protected CT_GeomGuideList GdLst;
	@XmlElement(required = true, name = "ahLst")
	protected CT_AdjustHandleList AhLst;
	@XmlElement(required = true, name = "cxnLst")
	protected CT_ConnectionSiteList CxnLst;
	@XmlElement(required = true, name = "rect")
	protected CT_GeomRect Rect;
	@XmlElement(required = true, name = "pathLst")
	protected CT_Path2DList PathLst;
}

// EG_Geometry ...
public class EG_Geometry {
	@XmlElement(required = true, name = "custGeom")
	protected CT_CustomGeometry2D CustGeom;
	@XmlElement(required = true, name = "prstGeom")
	protected CT_PresetGeometry2D PrstGeom;
}

// EG_TextGeometry ...
public class EG_TextGeometry {
	@XmlElement(required = true, name = "custGeom")
	protected CT_CustomGeometry2D CustGeom;
	@XmlElement(required = true, name = "prstTxWarp")
	protected CT_PresetTextShape PrstTxWarp;
}

// ST_LineEndType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineEndType")
public class ST_LineEndType {
	protected String ST_LineEndType;
}

// ST_LineEndWidth ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineEndWidth")
public class ST_LineEndWidth {
	protected String ST_LineEndWidth;
}

// ST_LineEndLength ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineEndLength")
public class ST_LineEndLength {
	protected String ST_LineEndLength;
}

// CT_LineEndProperties ...
public class CT_LineEndProperties {
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "w")
	protected StringAttr W;
	@XmlAttribute(name = "len")
	protected StringAttr Len;
}

// EG_LineFillProperties ...
public class EG_LineFillProperties {
	@XmlElement(required = true, name = "noFill")
	protected CT_NoFillProperties NoFill;
	@XmlElement(required = true, name = "solidFill")
	protected CT_SolidColorFillProperties SolidFill;
	@XmlElement(required = true, name = "gradFill")
	protected CT_GradientFillProperties GradFill;
	@XmlElement(required = true, name = "pattFill")
	protected CT_PatternFillProperties PattFill;
}

// CT_LineJoinBevel ...
public class CT_LineJoinBevel {
}

// CT_LineJoinRound ...
public class CT_LineJoinRound {
}

// CT_LineJoinMiterProperties ...
public class CT_LineJoinMiterProperties {
	@XmlAttribute(name = "lim")
	protected ST_PositivePercentageAttr Lim;
}

// EG_LineJoinProperties ...
public class EG_LineJoinProperties {
	@XmlElement(required = true, name = "round")
	protected CT_LineJoinRound Round;
	@XmlElement(required = true, name = "bevel")
	protected CT_LineJoinBevel Bevel;
	@XmlElement(required = true, name = "miter")
	protected CT_LineJoinMiterProperties Miter;
}

// ST_PresetLineDashVal ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PresetLineDashVal")
public class ST_PresetLineDashVal {
	protected String ST_PresetLineDashVal;
}

// CT_PresetLineDashProperties ...
public class CT_PresetLineDashProperties {
	@XmlAttribute(name = "val")
	protected StringAttr Val;
}

// CT_DashStop ...
public class CT_DashStop {
	@XmlAttribute(name = "d", required = true)
	protected ST_PositivePercentageAttr D;
	@XmlAttribute(name = "sp", required = true)
	protected ST_PositivePercentageAttr Sp;
}

// CT_DashStopList ...
public class CT_DashStopList {
	@XmlElement(required = true, name = "ds")
	protected List<CT_DashStop> Ds;
}

// EG_LineDashProperties ...
public class EG_LineDashProperties {
	@XmlElement(required = true, name = "prstDash")
	protected CT_PresetLineDashProperties PrstDash;
	@XmlElement(required = true, name = "custDash")
	protected CT_DashStopList CustDash;
}

// ST_LineCap ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineCap")
public class ST_LineCap {
	protected String ST_LineCap;
}

// ST_LineWidth ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_LineWidth")
public class ST_LineWidth {
	protected Integer ST_LineWidth;
}

// ST_PenAlignment ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PenAlignment")
public class ST_PenAlignment {
	protected String ST_PenAlignment;
}

// ST_CompoundLine ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_CompoundLine")
public class ST_CompoundLine {
	protected String ST_CompoundLine;
}

// CT_LineProperties ...
public class CT_LineProperties {
	@XmlAttribute(name = "w")
	protected IntegerAttr W;
	@XmlAttribute(name = "cap")
	protected StringAttr Cap;
	@XmlAttribute(name = "cmpd")
	protected StringAttr Cmpd;
	@XmlAttribute(name = "algn")
	protected StringAttr Algn;
	protected List<EG_LineFillProperties> EG_LineFillProperties;
	protected List<EG_LineDashProperties> EG_LineDashProperties;
	protected List<EG_LineJoinProperties> EG_LineJoinProperties;
	@XmlElement(required = true, name = "headEnd")
	protected CT_LineEndProperties HeadEnd;
	@XmlElement(required = true, name = "tailEnd")
	protected CT_LineEndProperties TailEnd;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// ST_ShapeID ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_ShapeID")
public class ST_ShapeID {
	protected String ST_ShapeID;
}

// CT_ShapeProperties ...
public class CT_ShapeProperties {
	@XmlAttribute(name = "bwMode")
	protected StringAttr BwMode;
	protected List<EG_Geometry> EG_Geometry;
	protected List<EG_FillProperties> EG_FillProperties;
	protected List<EG_EffectProperties> EG_EffectProperties;
	@XmlElement(required = true, name = "xfrm")
	protected CT_Transform2D Xfrm;
	@XmlElement(required = true, name = "ln")
	protected CT_LineProperties Ln;
	@XmlElement(required = true, name = "scene3d")
	protected CT_Scene3D Scene3d;
	@XmlElement(required = true, name = "sp3d")
	protected CT_Shape3D Sp3d;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_GroupShapeProperties ...
public class CT_GroupShapeProperties {
	@XmlAttribute(name = "bwMode")
	protected StringAttr BwMode;
	protected List<EG_FillProperties> EG_FillProperties;
	protected List<EG_EffectProperties> EG_EffectProperties;
	@XmlElement(required = true, name = "xfrm")
	protected CT_GroupTransform2D Xfrm;
	@XmlElement(required = true, name = "scene3d")
	protected CT_Scene3D Scene3d;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_StyleMatrixReference ...
public class CT_StyleMatrixReference {
	@XmlAttribute(name = "idx", required = true)
	protected IntegerAttr Idx;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_FontReference ...
public class CT_FontReference {
	@XmlAttribute(name = "idx", required = true)
	protected StringAttr Idx;
	protected List<EG_ColorChoice> EG_ColorChoice;
}

// CT_ShapeStyle ...
public class CT_ShapeStyle {
	@XmlElement(required = true, name = "lnRef")
	protected CT_StyleMatrixReference LnRef;
	@XmlElement(required = true, name = "fillRef")
	protected CT_StyleMatrixReference FillRef;
	@XmlElement(required = true, name = "effectRef")
	protected CT_StyleMatrixReference EffectRef;
	@XmlElement(required = true, name = "fontRef")
	protected CT_FontReference FontRef;
}

// CT_DefaultShapeDefinition ...
public class CT_DefaultShapeDefinition {
	@XmlElement(required = true, name = "spPr")
	protected CT_ShapeProperties SpPr;
	@XmlElement(required = true, name = "bodyPr")
	protected CT_TextBodyProperties BodyPr;
	@XmlElement(required = true, name = "lstStyle")
	protected CT_TextListStyle LstStyle;
	@XmlElement(required = true, name = "style")
	protected CT_ShapeStyle Style;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_ObjectStyleDefaults ...
public class CT_ObjectStyleDefaults {
	@XmlElement(required = true, name = "spDef")
	protected CT_DefaultShapeDefinition SpDef;
	@XmlElement(required = true, name = "lnDef")
	protected CT_DefaultShapeDefinition LnDef;
	@XmlElement(required = true, name = "txDef")
	protected CT_DefaultShapeDefinition TxDef;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_EmptyElement ...
public class CT_EmptyElement {
}

// CT_ColorMapping ...
public class CT_ColorMapping {
	@XmlAttribute(name = "bg1", required = true)
	protected StringAttr Bg1;
	@XmlAttribute(name = "tx1", required = true)
	protected StringAttr Tx1;
	@XmlAttribute(name = "bg2", required = true)
	protected StringAttr Bg2;
	@XmlAttribute(name = "tx2", required = true)
	protected StringAttr Tx2;
	@XmlAttribute(name = "accent1", required = true)
	protected StringAttr Accent1;
	@XmlAttribute(name = "accent2", required = true)
	protected StringAttr Accent2;
	@XmlAttribute(name = "accent3", required = true)
	protected StringAttr Accent3;
	@XmlAttribute(name = "accent4", required = true)
	protected StringAttr Accent4;
	@XmlAttribute(name = "accent5", required = true)
	protected StringAttr Accent5;
	@XmlAttribute(name = "accent6", required = true)
	protected StringAttr Accent6;
	@XmlAttribute(name = "hlink", required = true)
	protected StringAttr Hlink;
	@XmlAttribute(name = "folHlink", required = true)
	protected StringAttr FolHlink;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_ColorMappingOverride ...
public class CT_ColorMappingOverride {
	@XmlElement(required = true, name = "masterClrMapping")
	protected CT_EmptyElement MasterClrMapping;
	@XmlElement(required = true, name = "overrideClrMapping")
	protected CT_ColorMapping OverrideClrMapping;
}

// CT_ColorSchemeAndMapping ...
public class CT_ColorSchemeAndMapping {
	@XmlElement(required = true, name = "clrScheme")
	protected CT_ColorScheme ClrScheme;
	@XmlElement(required = true, name = "clrMap")
	protected CT_ColorMapping ClrMap;
}

// CT_ColorSchemeList ...
public class CT_ColorSchemeList {
	@XmlElement(required = true, name = "extraClrScheme")
	protected List<CT_ColorSchemeAndMapping> ExtraClrScheme;
}

// CT_OfficeStyleSheet ...
public class CT_OfficeStyleSheet {
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlElement(required = true, name = "themeElements")
	protected CT_BaseStyles ThemeElements;
	@XmlElement(required = true, name = "objectDefaults")
	protected CT_ObjectStyleDefaults ObjectDefaults;
	@XmlElement(required = true, name = "extraClrSchemeLst")
	protected CT_ColorSchemeList ExtraClrSchemeLst;
	@XmlElement(required = true, name = "custClrLst")
	protected CT_CustomColorList CustClrLst;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_BaseStylesOverride ...
public class CT_BaseStylesOverride {
	@XmlElement(required = true, name = "clrScheme")
	protected CT_ColorScheme ClrScheme;
	@XmlElement(required = true, name = "fontScheme")
	protected CT_FontScheme FontScheme;
	@XmlElement(required = true, name = "fmtScheme")
	protected CT_StyleMatrix FmtScheme;
}

// CT_ClipboardStyleSheet ...
public class CT_ClipboardStyleSheet {
	@XmlElement(required = true, name = "themeElements")
	protected CT_BaseStyles ThemeElements;
	@XmlElement(required = true, name = "clrMap")
	protected CT_ColorMapping ClrMap;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "theme")
public class Theme {
	protected CT_OfficeStyleSheet Theme;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "themeOverride")
public class ThemeOverride {
	protected CT_BaseStylesOverride ThemeOverride;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "themeManager")
public class ThemeManager {
	protected CT_EmptyElement ThemeManager;
}

// CT_TableCellProperties ...
public class CT_TableCellProperties {
	@XmlAttribute(name = "marL")
	protected ST_Coordinate32Attr MarL;
	@XmlAttribute(name = "marR")
	protected ST_Coordinate32Attr MarR;
	@XmlAttribute(name = "marT")
	protected ST_Coordinate32Attr MarT;
	@XmlAttribute(name = "marB")
	protected ST_Coordinate32Attr MarB;
	@XmlAttribute(name = "vert")
	protected StringAttr Vert;
	@XmlAttribute(name = "anchor")
	protected StringAttr Anchor;
	@XmlAttribute(name = "anchorCtr")
	protected BooleanAttr AnchorCtr;
	@XmlAttribute(name = "horzOverflow")
	protected StringAttr HorzOverflow;
	protected List<EG_FillProperties> EG_FillProperties;
	@XmlElement(required = true, name = "lnL")
	protected CT_LineProperties LnL;
	@XmlElement(required = true, name = "lnR")
	protected CT_LineProperties LnR;
	@XmlElement(required = true, name = "lnT")
	protected CT_LineProperties LnT;
	@XmlElement(required = true, name = "lnB")
	protected CT_LineProperties LnB;
	@XmlElement(required = true, name = "lnTlToBr")
	protected CT_LineProperties LnTlToBr;
	@XmlElement(required = true, name = "lnBlToTr")
	protected CT_LineProperties LnBlToTr;
	@XmlElement(required = true, name = "cell3D")
	protected CT_Cell3D Cell3D;
	@XmlElement(required = true, name = "headers")
	protected CT_Headers Headers;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Headers ...
public class CT_Headers {
	@XmlElement(required = true, name = "header")
	protected String Header;
}

// CT_TableCol ...
public class CT_TableCol {
	@XmlAttribute(name = "w", required = true)
	protected ST_CoordinateAttr W;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TableGrid ...
public class CT_TableGrid {
	@XmlElement(required = true, name = "gridCol")
	protected List<CT_TableCol> GridCol;
}

// CT_TableCell ...
public class CT_TableCell {
	@XmlAttribute(name = "rowSpan")
	protected IntegerAttr RowSpan;
	@XmlAttribute(name = "gridSpan")
	protected IntegerAttr GridSpan;
	@XmlAttribute(name = "hMerge")
	protected BooleanAttr HMerge;
	@XmlAttribute(name = "vMerge")
	protected BooleanAttr VMerge;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlElement(required = true, name = "txBody")
	protected CT_TextBody TxBody;
	@XmlElement(required = true, name = "tcPr")
	protected CT_TableCellProperties TcPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TableRow ...
public class CT_TableRow {
	@XmlAttribute(name = "h", required = true)
	protected ST_CoordinateAttr H;
	@XmlElement(required = true, name = "tc")
	protected List<CT_TableCell> Tc;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TableProperties ...
public class CT_TableProperties {
	@XmlAttribute(name = "rtl")
	protected BooleanAttr Rtl;
	@XmlAttribute(name = "firstRow")
	protected BooleanAttr FirstRow;
	@XmlAttribute(name = "firstCol")
	protected BooleanAttr FirstCol;
	@XmlAttribute(name = "lastRow")
	protected BooleanAttr LastRow;
	@XmlAttribute(name = "lastCol")
	protected BooleanAttr LastCol;
	@XmlAttribute(name = "bandRow")
	protected BooleanAttr BandRow;
	@XmlAttribute(name = "bandCol")
	protected BooleanAttr BandCol;
	protected List<EG_FillProperties> EG_FillProperties;
	protected List<EG_EffectProperties> EG_EffectProperties;
	@XmlElement(required = true, name = "tableStyle")
	protected CT_TableStyle TableStyle;
	@XmlElement(required = true, name = "tableStyleId")
	protected String TableStyleId;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Table ...
public class CT_Table {
	@XmlElement(required = true, name = "tblPr")
	protected CT_TableProperties TblPr;
	@XmlElement(required = true, name = "tblGrid")
	protected CT_TableGrid TblGrid;
	@XmlElement(required = true, name = "tr")
	protected List<CT_TableRow> Tr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "tbl")
public class Tbl {
	protected CT_Table Tbl;
}

// CT_Cell3D ...
public class CT_Cell3D {
	@XmlAttribute(name = "prstMaterial")
	protected StringAttr PrstMaterial;
	@XmlElement(required = true, name = "bevel")
	protected CT_Bevel Bevel;
	@XmlElement(required = true, name = "lightRig")
	protected CT_LightRig LightRig;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// EG_ThemeableFillStyle ...
public class EG_ThemeableFillStyle {
	@XmlElement(required = true, name = "fill")
	protected CT_FillProperties Fill;
	@XmlElement(required = true, name = "fillRef")
	protected CT_StyleMatrixReference FillRef;
}

// CT_ThemeableLineStyle ...
public class CT_ThemeableLineStyle {
	@XmlElement(required = true, name = "ln")
	protected CT_LineProperties Ln;
	@XmlElement(required = true, name = "lnRef")
	protected CT_StyleMatrixReference LnRef;
}

// EG_ThemeableEffectStyle ...
public class EG_ThemeableEffectStyle {
	@XmlElement(required = true, name = "effect")
	protected CT_EffectProperties Effect;
	@XmlElement(required = true, name = "effectRef")
	protected CT_StyleMatrixReference EffectRef;
}

// EG_ThemeableFontStyles ...
public class EG_ThemeableFontStyles {
	@XmlElement(required = true, name = "font")
	protected CT_FontCollection Font;
	@XmlElement(required = true, name = "fontRef")
	protected CT_FontReference FontRef;
}

// ST_OnOffStyleType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_OnOffStyleType")
public class ST_OnOffStyleType {
	protected String ST_OnOffStyleType;
}

// CT_TableStyleTextStyle ...
public class CT_TableStyleTextStyle {
	@XmlAttribute(name = "b")
	protected StringAttr B;
	@XmlAttribute(name = "i")
	protected StringAttr I;
	protected List<EG_ThemeableFontStyles> EG_ThemeableFontStyles;
	protected List<EG_ColorChoice> EG_ColorChoice;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TableCellBorderStyle ...
public class CT_TableCellBorderStyle {
	@XmlElement(required = true, name = "left")
	protected CT_ThemeableLineStyle Left;
	@XmlElement(required = true, name = "right")
	protected CT_ThemeableLineStyle Right;
	@XmlElement(required = true, name = "top")
	protected CT_ThemeableLineStyle Top;
	@XmlElement(required = true, name = "bottom")
	protected CT_ThemeableLineStyle Bottom;
	@XmlElement(required = true, name = "insideH")
	protected CT_ThemeableLineStyle InsideH;
	@XmlElement(required = true, name = "insideV")
	protected CT_ThemeableLineStyle InsideV;
	@XmlElement(required = true, name = "tl2br")
	protected CT_ThemeableLineStyle Tl2br;
	@XmlElement(required = true, name = "tr2bl")
	protected CT_ThemeableLineStyle Tr2bl;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TableBackgroundStyle ...
public class CT_TableBackgroundStyle {
	protected List<EG_ThemeableFillStyle> EG_ThemeableFillStyle;
	protected List<EG_ThemeableEffectStyle> EG_ThemeableEffectStyle;
}

// CT_TableStyleCellStyle ...
public class CT_TableStyleCellStyle {
	protected List<EG_ThemeableFillStyle> EG_ThemeableFillStyle;
	@XmlElement(required = true, name = "tcBdr")
	protected CT_TableCellBorderStyle TcBdr;
	@XmlElement(required = true, name = "cell3D")
	protected CT_Cell3D Cell3D;
}

// CT_TablePartStyle ...
public class CT_TablePartStyle {
	@XmlElement(required = true, name = "tcTxStyle")
	protected CT_TableStyleTextStyle TcTxStyle;
	@XmlElement(required = true, name = "tcStyle")
	protected CT_TableStyleCellStyle TcStyle;
}

// CT_TableStyle ...
public class CT_TableStyle {
	@XmlAttribute(name = "styleId", required = true)
	protected StringAttr StyleId;
	@XmlAttribute(name = "styleName", required = true)
	protected StringAttr StyleName;
	@XmlElement(required = true, name = "tblBg")
	protected CT_TableBackgroundStyle TblBg;
	@XmlElement(required = true, name = "wholeTbl")
	protected CT_TablePartStyle WholeTbl;
	@XmlElement(required = true, name = "band1H")
	protected CT_TablePartStyle Band1H;
	@XmlElement(required = true, name = "band2H")
	protected CT_TablePartStyle Band2H;
	@XmlElement(required = true, name = "band1V")
	protected CT_TablePartStyle Band1V;
	@XmlElement(required = true, name = "band2V")
	protected CT_TablePartStyle Band2V;
	@XmlElement(required = true, name = "lastCol")
	protected CT_TablePartStyle LastCol;
	@XmlElement(required = true, name = "firstCol")
	protected CT_TablePartStyle FirstCol;
	@XmlElement(required = true, name = "lastRow")
	protected CT_TablePartStyle LastRow;
	@XmlElement(required = true, name = "seCell")
	protected CT_TablePartStyle SeCell;
	@XmlElement(required = true, name = "swCell")
	protected CT_TablePartStyle SwCell;
	@XmlElement(required = true, name = "firstRow")
	protected CT_TablePartStyle FirstRow;
	@XmlElement(required = true, name = "neCell")
	protected CT_TablePartStyle NeCell;
	@XmlElement(required = true, name = "nwCell")
	protected CT_TablePartStyle NwCell;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TableStyleList ...
public class CT_TableStyleList {
	@XmlAttribute(name = "def", required = true)
	protected StringAttr Def;
	@XmlElement(required = true, name = "tblStyle")
	protected List<CT_TableStyle> TblStyle;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "tblStyleLst")
public class TblStyleLst {
	protected CT_TableStyleList TblStyleLst;
}

// CT_TextParagraph ...
public class CT_TextParagraph {
	protected List<EG_TextRun> EG_TextRun;
	@XmlElement(required = true, name = "pPr")
	protected CT_TextParagraphProperties PPr;
	@XmlElement(required = true, name = "endParaRPr")
	protected CT_TextCharacterProperties EndParaRPr;
}

// ST_TextAnchoringType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextAnchoringType")
public class ST_TextAnchoringType {
	protected String ST_TextAnchoringType;
}

// ST_TextVertOverflowType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextVertOverflowType")
public class ST_TextVertOverflowType {
	protected String ST_TextVertOverflowType;
}

// ST_TextHorzOverflowType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextHorzOverflowType")
public class ST_TextHorzOverflowType {
	protected String ST_TextHorzOverflowType;
}

// ST_TextVerticalType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextVerticalType")
public class ST_TextVerticalType {
	protected String ST_TextVerticalType;
}

// ST_TextWrappingType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextWrappingType")
public class ST_TextWrappingType {
	protected String ST_TextWrappingType;
}

// ST_TextColumnCount ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextColumnCount")
public class ST_TextColumnCount {
	protected Integer ST_TextColumnCount;
}

// CT_TextListStyle ...
public class CT_TextListStyle {
	@XmlElement(required = true, name = "defPPr")
	protected CT_TextParagraphProperties DefPPr;
	@XmlElement(required = true, name = "lvl1pPr")
	protected CT_TextParagraphProperties Lvl1pPr;
	@XmlElement(required = true, name = "lvl2pPr")
	protected CT_TextParagraphProperties Lvl2pPr;
	@XmlElement(required = true, name = "lvl3pPr")
	protected CT_TextParagraphProperties Lvl3pPr;
	@XmlElement(required = true, name = "lvl4pPr")
	protected CT_TextParagraphProperties Lvl4pPr;
	@XmlElement(required = true, name = "lvl5pPr")
	protected CT_TextParagraphProperties Lvl5pPr;
	@XmlElement(required = true, name = "lvl6pPr")
	protected CT_TextParagraphProperties Lvl6pPr;
	@XmlElement(required = true, name = "lvl7pPr")
	protected CT_TextParagraphProperties Lvl7pPr;
	@XmlElement(required = true, name = "lvl8pPr")
	protected CT_TextParagraphProperties Lvl8pPr;
	@XmlElement(required = true, name = "lvl9pPr")
	protected CT_TextParagraphProperties Lvl9pPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// ST_TextFontScalePercentOrPercentString ...
public class ST_TextFontScalePercentOrPercentString {
	@XmlElement(required = true)
	protected String ST_Percentage;
}

// CT_TextNormalAutofit ...
public class CT_TextNormalAutofit {
	@XmlAttribute(name = "fontScale")
	protected ST_TextFontScalePercentOrPercentStringAttr FontScale;
	@XmlAttribute(name = "lnSpcReduction")
	protected ST_TextSpacingPercentOrPercentStringAttr LnSpcReduction;
}

// CT_TextShapeAutofit ...
public class CT_TextShapeAutofit {
}

// CT_TextNoAutofit ...
public class CT_TextNoAutofit {
}

// EG_TextAutofit ...
public class EG_TextAutofit {
	@XmlElement(required = true, name = "noAutofit")
	protected CT_TextNoAutofit NoAutofit;
	@XmlElement(required = true, name = "normAutofit")
	protected CT_TextNormalAutofit NormAutofit;
	@XmlElement(required = true, name = "spAutoFit")
	protected CT_TextShapeAutofit SpAutoFit;
}

// CT_TextBodyProperties ...
public class CT_TextBodyProperties {
	@XmlAttribute(name = "rot")
	protected IntegerAttr Rot;
	@XmlAttribute(name = "spcFirstLastPara")
	protected BooleanAttr SpcFirstLastPara;
	@XmlAttribute(name = "vertOverflow")
	protected StringAttr VertOverflow;
	@XmlAttribute(name = "horzOverflow")
	protected StringAttr HorzOverflow;
	@XmlAttribute(name = "vert")
	protected StringAttr Vert;
	@XmlAttribute(name = "wrap")
	protected StringAttr Wrap;
	@XmlAttribute(name = "lIns")
	protected ST_Coordinate32Attr LIns;
	@XmlAttribute(name = "tIns")
	protected ST_Coordinate32Attr TIns;
	@XmlAttribute(name = "rIns")
	protected ST_Coordinate32Attr RIns;
	@XmlAttribute(name = "bIns")
	protected ST_Coordinate32Attr BIns;
	@XmlAttribute(name = "numCol")
	protected IntegerAttr NumCol;
	@XmlAttribute(name = "spcCol")
	protected IntegerAttr SpcCol;
	@XmlAttribute(name = "rtlCol")
	protected BooleanAttr RtlCol;
	@XmlAttribute(name = "fromWordArt")
	protected BooleanAttr FromWordArt;
	@XmlAttribute(name = "anchor")
	protected StringAttr Anchor;
	@XmlAttribute(name = "anchorCtr")
	protected BooleanAttr AnchorCtr;
	@XmlAttribute(name = "forceAA")
	protected BooleanAttr ForceAA;
	@XmlAttribute(name = "upright")
	protected BooleanAttr Upright;
	@XmlAttribute(name = "compatLnSpc")
	protected BooleanAttr CompatLnSpc;
	protected List<EG_TextAutofit> EG_TextAutofit;
	protected List<EG_Text3D> EG_Text3D;
	@XmlElement(required = true, name = "prstTxWarp")
	protected CT_PresetTextShape PrstTxWarp;
	@XmlElement(required = true, name = "scene3d")
	protected CT_Scene3D Scene3d;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TextBody ...
public class CT_TextBody {
	@XmlElement(required = true, name = "bodyPr")
	protected CT_TextBodyProperties BodyPr;
	@XmlElement(required = true, name = "lstStyle")
	protected CT_TextListStyle LstStyle;
	@XmlElement(required = true, name = "p")
	protected List<CT_TextParagraph> P;
}

// ST_TextBulletStartAtNum ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextBulletStartAtNum")
public class ST_TextBulletStartAtNum {
	protected Integer ST_TextBulletStartAtNum;
}

// ST_TextAutonumberScheme ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextAutonumberScheme")
public class ST_TextAutonumberScheme {
	protected String ST_TextAutonumberScheme;
}

// CT_TextBulletColorFollowText ...
public class CT_TextBulletColorFollowText {
}

// EG_TextBulletColor ...
public class EG_TextBulletColor {
	@XmlElement(required = true, name = "buClrTx")
	protected CT_TextBulletColorFollowText BuClrTx;
	@XmlElement(required = true, name = "buClr")
	protected CT_Color BuClr;
}

// ST_TextBulletSize ...
public class ST_TextBulletSize {
	@XmlElement(required = true)
	protected ST_TextBulletSizePercent ST_TextBulletSizePercent;
}

// ST_TextBulletSizePercent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextBulletSizePercent")
public class ST_TextBulletSizePercent {
	protected String ST_TextBulletSizePercent;
}

// CT_TextBulletSizeFollowText ...
public class CT_TextBulletSizeFollowText {
}

// CT_TextBulletSizePercent ...
public class CT_TextBulletSizePercent {
	@XmlAttribute(name = "val", required = true)
	protected StringAttr Val;
}

// CT_TextBulletSizePoint ...
public class CT_TextBulletSizePoint {
	@XmlAttribute(name = "val", required = true)
	protected IntegerAttr Val;
}

// EG_TextBulletSize ...
public class EG_TextBulletSize {
	@XmlElement(required = true, name = "buSzTx")
	protected CT_TextBulletSizeFollowText BuSzTx;
	@XmlElement(required = true, name = "buSzPct")
	protected CT_TextBulletSizePercent BuSzPct;
	@XmlElement(required = true, name = "buSzPts")
	protected CT_TextBulletSizePoint BuSzPts;
}

// CT_TextBulletTypefaceFollowText ...
public class CT_TextBulletTypefaceFollowText {
}

// EG_TextBulletTypeface ...
public class EG_TextBulletTypeface {
	@XmlElement(required = true, name = "buFontTx")
	protected CT_TextBulletTypefaceFollowText BuFontTx;
	@XmlElement(required = true, name = "buFont")
	protected CT_TextFont BuFont;
}

// CT_TextAutonumberBullet ...
public class CT_TextAutonumberBullet {
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlAttribute(name = "startAt")
	protected IntegerAttr StartAt;
}

// CT_TextCharBullet ...
public class CT_TextCharBullet {
	@XmlAttribute(name = "char", required = true)
	protected StringAttr Char;
}

// CT_TextBlipBullet ...
public class CT_TextBlipBullet {
	@XmlElement(required = true, name = "blip")
	protected CT_Blip Blip;
}

// CT_TextNoBullet ...
public class CT_TextNoBullet {
}

// EG_TextBullet ...
public class EG_TextBullet {
	@XmlElement(required = true, name = "buNone")
	protected CT_TextNoBullet BuNone;
	@XmlElement(required = true, name = "buAutoNum")
	protected CT_TextAutonumberBullet BuAutoNum;
	@XmlElement(required = true, name = "buChar")
	protected CT_TextCharBullet BuChar;
	@XmlElement(required = true, name = "buBlip")
	protected CT_TextBlipBullet BuBlip;
}

// ST_TextPoint ...
public class ST_TextPoint {
	@XmlElement(required = true)
	protected ST_TextPointUnqualified ST_TextPointUnqualified;
	@XmlElement(required = true)
	protected String ST_UniversalMeasure;
}

// ST_TextPointUnqualified ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextPointUnqualified")
public class ST_TextPointUnqualified {
	protected Integer ST_TextPointUnqualified;
}

// ST_TextNonNegativePoint ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextNonNegativePoint")
public class ST_TextNonNegativePoint {
	protected Integer ST_TextNonNegativePoint;
}

// ST_TextFontSize ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextFontSize")
public class ST_TextFontSize {
	protected Integer ST_TextFontSize;
}

// ST_TextTypeface ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextTypeface")
public class ST_TextTypeface {
	protected String ST_TextTypeface;
}

// ST_PitchFamily ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_PitchFamily")
public class ST_PitchFamily {
	protected Byte ST_PitchFamily;
}

// CT_TextFont ...
public class CT_TextFont {
	@XmlAttribute(name = "typeface", required = true)
	protected StringAttr Typeface;
	@XmlAttribute(name = "panose")
	protected List<Byte>Attr Panose;
	@XmlAttribute(name = "pitchFamily")
	protected ByteAttr PitchFamily;
	@XmlAttribute(name = "charset")
	protected ByteAttr Charset;
}

// ST_TextUnderlineType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextUnderlineType")
public class ST_TextUnderlineType {
	protected String ST_TextUnderlineType;
}

// CT_TextUnderlineLineFollowText ...
public class CT_TextUnderlineLineFollowText {
}

// CT_TextUnderlineFillFollowText ...
public class CT_TextUnderlineFillFollowText {
}

// CT_TextUnderlineFillGroupWrapper ...
public class CT_TextUnderlineFillGroupWrapper {
	protected List<EG_FillProperties> EG_FillProperties;
}

// EG_TextUnderlineLine ...
public class EG_TextUnderlineLine {
	@XmlElement(required = true, name = "uLnTx")
	protected CT_TextUnderlineLineFollowText ULnTx;
	@XmlElement(required = true, name = "uLn")
	protected CT_LineProperties ULn;
}

// EG_TextUnderlineFill ...
public class EG_TextUnderlineFill {
	@XmlElement(required = true, name = "uFillTx")
	protected CT_TextUnderlineFillFollowText UFillTx;
	@XmlElement(required = true, name = "uFill")
	protected CT_TextUnderlineFillGroupWrapper UFill;
}

// ST_TextStrikeType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextStrikeType")
public class ST_TextStrikeType {
	protected String ST_TextStrikeType;
}

// ST_TextCapsType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextCapsType")
public class ST_TextCapsType {
	protected String ST_TextCapsType;
}

// CT_TextCharacterProperties ...
public class CT_TextCharacterProperties {
	@XmlAttribute(name = "kumimoji")
	protected BooleanAttr Kumimoji;
	@XmlAttribute(name = "lang")
	protected StringAttr Lang;
	@XmlAttribute(name = "altLang")
	protected StringAttr AltLang;
	@XmlAttribute(name = "sz")
	protected IntegerAttr Sz;
	@XmlAttribute(name = "b")
	protected BooleanAttr B;
	@XmlAttribute(name = "i")
	protected BooleanAttr I;
	@XmlAttribute(name = "u")
	protected StringAttr U;
	@XmlAttribute(name = "strike")
	protected StringAttr Strike;
	@XmlAttribute(name = "kern")
	protected IntegerAttr Kern;
	@XmlAttribute(name = "cap")
	protected StringAttr Cap;
	@XmlAttribute(name = "spc")
	protected ST_TextPointAttr Spc;
	@XmlAttribute(name = "normalizeH")
	protected BooleanAttr NormalizeH;
	@XmlAttribute(name = "baseline")
	protected ST_PercentageAttr Baseline;
	@XmlAttribute(name = "noProof")
	protected BooleanAttr NoProof;
	@XmlAttribute(name = "dirty")
	protected BooleanAttr Dirty;
	@XmlAttribute(name = "err")
	protected BooleanAttr Err;
	@XmlAttribute(name = "smtClean")
	protected BooleanAttr SmtClean;
	@XmlAttribute(name = "smtId")
	protected IntegerAttr SmtId;
	@XmlAttribute(name = "bmk")
	protected StringAttr Bmk;
	protected List<EG_FillProperties> EG_FillProperties;
	protected List<EG_EffectProperties> EG_EffectProperties;
	protected List<EG_TextUnderlineLine> EG_TextUnderlineLine;
	protected List<EG_TextUnderlineFill> EG_TextUnderlineFill;
	@XmlElement(required = true, name = "ln")
	protected CT_LineProperties Ln;
	@XmlElement(required = true, name = "highlight")
	protected CT_Color Highlight;
	@XmlElement(required = true, name = "latin")
	protected CT_TextFont Latin;
	@XmlElement(required = true, name = "ea")
	protected CT_TextFont Ea;
	@XmlElement(required = true, name = "cs")
	protected CT_TextFont Cs;
	@XmlElement(required = true, name = "sym")
	protected CT_TextFont Sym;
	@XmlElement(required = true, name = "hlinkClick")
	protected CT_Hyperlink HlinkClick;
	@XmlElement(required = true, name = "hlinkMouseOver")
	protected CT_Hyperlink HlinkMouseOver;
	@XmlElement(required = true, name = "rtl")
	protected CT_Boolean Rtl;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_Boolean ...
public class CT_Boolean {
	@XmlAttribute(name = "val")
	protected ST_OnOffAttr Val;
}

// ST_TextSpacingPoint ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextSpacingPoint")
public class ST_TextSpacingPoint {
	protected Integer ST_TextSpacingPoint;
}

// ST_TextSpacingPercentOrPercentString ...
public class ST_TextSpacingPercentOrPercentString {
	@XmlElement(required = true)
	protected String ST_Percentage;
}

// CT_TextSpacingPercent ...
public class CT_TextSpacingPercent {
	@XmlAttribute(name = "val", required = true)
	protected ST_TextSpacingPercentOrPercentStringAttr Val;
}

// CT_TextSpacingPoint ...
public class CT_TextSpacingPoint {
	@XmlAttribute(name = "val", required = true)
	protected IntegerAttr Val;
}

// ST_TextMargin ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextMargin")
public class ST_TextMargin {
	protected Integer ST_TextMargin;
}

// ST_TextIndent ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextIndent")
public class ST_TextIndent {
	protected Integer ST_TextIndent;
}

// ST_TextTabAlignType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextTabAlignType")
public class ST_TextTabAlignType {
	protected String ST_TextTabAlignType;
}

// CT_TextTabStop ...
public class CT_TextTabStop {
	@XmlAttribute(name = "pos")
	protected ST_Coordinate32Attr Pos;
	@XmlAttribute(name = "algn")
	protected StringAttr Algn;
}

// CT_TextTabStopList ...
public class CT_TextTabStopList {
	@XmlElement(required = true, name = "tab")
	protected List<CT_TextTabStop> Tab;
}

// CT_TextLineBreak ...
public class CT_TextLineBreak {
	@XmlElement(required = true, name = "rPr")
	protected CT_TextCharacterProperties RPr;
}

// CT_TextSpacing ...
public class CT_TextSpacing {
	@XmlElement(required = true, name = "spcPct")
	protected CT_TextSpacingPercent SpcPct;
	@XmlElement(required = true, name = "spcPts")
	protected CT_TextSpacingPoint SpcPts;
}

// ST_TextAlignType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextAlignType")
public class ST_TextAlignType {
	protected String ST_TextAlignType;
}

// ST_TextFontAlignType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextFontAlignType")
public class ST_TextFontAlignType {
	protected String ST_TextFontAlignType;
}

// ST_TextIndentLevelType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ST_TextIndentLevelType")
public class ST_TextIndentLevelType {
	protected Integer ST_TextIndentLevelType;
}

// CT_TextParagraphProperties ...
public class CT_TextParagraphProperties {
	@XmlAttribute(name = "marL")
	protected IntegerAttr MarL;
	@XmlAttribute(name = "marR")
	protected IntegerAttr MarR;
	@XmlAttribute(name = "lvl")
	protected IntegerAttr Lvl;
	@XmlAttribute(name = "indent")
	protected IntegerAttr Indent;
	@XmlAttribute(name = "algn")
	protected StringAttr Algn;
	@XmlAttribute(name = "defTabSz")
	protected ST_Coordinate32Attr DefTabSz;
	@XmlAttribute(name = "rtl")
	protected BooleanAttr Rtl;
	@XmlAttribute(name = "eaLnBrk")
	protected BooleanAttr EaLnBrk;
	@XmlAttribute(name = "fontAlgn")
	protected StringAttr FontAlgn;
	@XmlAttribute(name = "latinLnBrk")
	protected BooleanAttr LatinLnBrk;
	@XmlAttribute(name = "hangingPunct")
	protected BooleanAttr HangingPunct;
	protected List<EG_TextBulletColor> EG_TextBulletColor;
	protected List<EG_TextBulletSize> EG_TextBulletSize;
	protected List<EG_TextBulletTypeface> EG_TextBulletTypeface;
	protected List<EG_TextBullet> EG_TextBullet;
	@XmlElement(required = true, name = "lnSpc")
	protected CT_TextSpacing LnSpc;
	@XmlElement(required = true, name = "spcBef")
	protected CT_TextSpacing SpcBef;
	@XmlElement(required = true, name = "spcAft")
	protected CT_TextSpacing SpcAft;
	@XmlElement(required = true, name = "tabLst")
	protected CT_TextTabStopList TabLst;
	@XmlElement(required = true, name = "defRPr")
	protected CT_TextCharacterProperties DefRPr;
	@XmlElement(required = true, name = "extLst")
	protected CT_OfficeArtExtensionList ExtLst;
}

// CT_TextField ...
public class CT_TextField {
	@XmlAttribute(name = "id", required = true)
	protected StringAttr Id;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlElement(required = true, name = "rPr")
	protected CT_TextCharacterProperties RPr;
	@XmlElement(required = true, name = "pPr")
	protected CT_TextParagraphProperties PPr;
	@XmlElement(required = true, name = "t")
	protected String T;
}

// EG_TextRun ...
public class EG_TextRun {
	@XmlElement(required = true, name = "r")
	protected CT_RegularTextRun R;
	@XmlElement(required = true, name = "br")
	protected CT_TextLineBreak Br;
	@XmlElement(required = true, name = "fld")
	protected CT_TextField Fld;
}

// CT_RegularTextRun ...
public class CT_RegularTextRun {
	@XmlElement(required = true, name = "rPr")
	protected CT_TextCharacterProperties RPr;
	@XmlElement(required = true, name = "t")
	protected String T;
}
