// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "root")
public class Root {
	protected Boolean Root;
}

// CommonAttributes is Attributes common to all elements that function as accessors or
//         represent independent (multi-ref) values.  The href attribute is
//         intended to be used in a manner like CONREF.  That is, the element
//         content should be empty iff the href attribute appears
public class CommonAttributes {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
}

// ArrayCoordinate ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "arrayCoordinate")
public class ArrayCoordinate {
	protected String ArrayCoordinate;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "arrayType")
public class ArrayType {
	protected String ArrayType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "offset")
public class Offset {
	protected String Offset;
}

// ArrayAttributes ...
public class ArrayAttributes {
	@XmlAttribute(name = "tns:arrayType")
	protected StringAttr TnsArrayType;
	@XmlAttribute(name = "tns:offset")
	protected StringAttr TnsOffset;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "position")
public class Position {
	protected String Position;
}

// ArrayMemberAttributes ...
public class ArrayMemberAttributes {
	@XmlAttribute(name = "tns:position")
	protected StringAttr TnsPosition;
}

// Array ...
public class Array {
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "Struct")
public class Struct {
	protected Struct Struct;
}

// Base64 ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "base64")
public class Base64 {
	protected List<Byte> Base64;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "duration")
public class Duration {
	protected String Duration;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "dateTime")
public class DateTime {
	protected Byte DateTime;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "NOTATION")
public class NOTATION {
	protected List<String> NOTATION;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "time")
public class Time {
	protected String Time;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "date")
public class Date {
	protected Byte Date;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "gYearMonth")
public class GYearMonth {
	protected String GYearMonth;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "gYear")
public class GYear {
	protected String GYear;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "gMonthDay")
public class GMonthDay {
	protected String GMonthDay;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "gDay")
public class GDay {
	protected String GDay;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "gMonth")
public class GMonth {
	protected String GMonth;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "boolean")
public class Boolean {
	protected Boolean Boolean;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "base64Binary")
public class Base64Binary {
	protected List<Byte> Base64Binary;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "hexBinary")
public class HexBinary {
	protected List<Byte> HexBinary;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "float")
public class Float {
	protected Float Float;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "double")
public class Double {
	protected Float Double;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "anyURI")
public class AnyURI {
	protected String AnyURI;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "QName")
public class QName {
	protected String QName;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "string")
public class String {
	protected String String;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "normalizedString")
public class NormalizedString {
	protected String NormalizedString;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "token")
public class Token {
	protected String Token;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "language")
public class Language {
	protected String Language;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "Name")
public class Name {
	protected String Name;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "NMTOKEN")
public class NMTOKEN {
	protected String NMTOKEN;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "NCName")
public class NCName {
	protected String NCName;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "NMTOKENS")
public class NMTOKENS {
	protected List<String> NMTOKENS;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ID")
public class ID {
	protected String ID;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "IDREF")
public class IDREF {
	protected String IDREF;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ENTITY")
public class ENTITY {
	protected String ENTITY;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "IDREFS")
public class IDREFS {
	protected List<String> IDREFS;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "ENTITIES")
public class ENTITIES {
	protected List<String> ENTITIES;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "decimal")
public class Decimal {
	protected Float Decimal;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "integer")
public class Integer {
	protected Integer Integer;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "nonPositiveInteger")
public class NonPositiveInteger {
	protected Integer NonPositiveInteger;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "negativeInteger")
public class NegativeInteger {
	protected Integer NegativeInteger;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "long")
public class Long {
	protected Long Long;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "int")
public class Int {
	protected Integer Int;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "short")
public class Short {
	protected Integer Short;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "byte")
public class Byte {
	protected Byte Byte;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "nonNegativeInteger")
public class NonNegativeInteger {
	protected Integer NonNegativeInteger;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "unsignedLong")
public class UnsignedLong {
	protected Long UnsignedLong;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "unsignedInt")
public class UnsignedInt {
	protected Integer UnsignedInt;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "unsignedShort")
public class UnsignedShort {
	protected Short UnsignedShort;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "unsignedByte")
public class UnsignedByte {
	protected Byte UnsignedByte;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "positiveInteger")
public class PositiveInteger {
	protected Integer PositiveInteger;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "anyType")
public class AnyType {
	protected String AnyType;
}
