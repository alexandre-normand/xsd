// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlElement(required = true, name = "assembly")
public class Assembly {
	protected Assembly Assembly;
}

public class Formats {
	@XmlElement(required = true, name = "format")
	protected List<String> Format;
}

public class ModuleSets {
	@XmlElement(required = true, name = "moduleSet")
	protected List<ModuleSet> ModuleSet;
}

public class FileSets {
	@XmlElement(required = true, name = "fileSet")
	protected List<FileSet> FileSet;
}

public class Files {
	@XmlElement(required = true, name = "file")
	protected List<FileItem> File;
}

public class DependencySets {
	@XmlElement(required = true, name = "dependencySet")
	protected List<DependencySet> DependencySet;
}

public class Repositories {
	@XmlElement(required = true, name = "repository")
	protected List<Repository> Repository;
}

public class ComponentDescriptors {
	@XmlElement(required = true, name = "componentDescriptor")
	protected List<String> ComponentDescriptor;
}

public class Assembly {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "formats")
	protected Formats Formats;
	@XmlElement(required = true, name = "includeBaseDirectory")
	protected Boolean IncludeBaseDirectory;
	@XmlElement(required = true, name = "includeSiteDirectory")
	protected Boolean IncludeSiteDirectory;
	@XmlElement(required = true, name = "moduleSets")
	protected ModuleSets ModuleSets;
	@XmlElement(required = true, name = "fileSets")
	protected FileSets FileSets;
	@XmlElement(required = true, name = "files")
	protected Files Files;
	@XmlElement(required = true, name = "dependencySets")
	protected DependencySets DependencySets;
	@XmlElement(required = true, name = "repositories")
	protected Repositories Repositories;
	@XmlElement(required = true, name = "componentDescriptors")
	protected ComponentDescriptors ComponentDescriptors;
}

public class GroupVersionAlignments {
	@XmlElement(required = true, name = "groupVersionAlignment")
	protected List<GroupVersionAlignment> GroupVersionAlignment;
}

public class Includes {
	@XmlElement(required = true, name = "include")
	protected List<String> Include;
}

public class Excludes {
	@XmlElement(required = true, name = "exclude")
	protected List<String> Exclude;
}

public class Repository {
	@XmlElement(required = true, name = "includeMetadata")
	protected Boolean IncludeMetadata;
	@XmlElement(required = true, name = "groupVersionAlignments")
	protected GroupVersionAlignments GroupVersionAlignments;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

public class GroupVersionAlignment {
	@XmlElement(required = true, name = "id")
	protected String Id;
	@XmlElement(required = true, name = "version")
	protected String Version;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
}

public class DependencySet {
	@XmlElement(required = true, name = "outputFileNameMapping")
	protected String OutputFileNameMapping;
	@XmlElement(required = true, name = "unpack")
	protected Boolean Unpack;
	@XmlElement(required = true, name = "scope")
	protected String Scope;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

public class ModuleSet {
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "sources")
	protected ModuleSources Sources;
	@XmlElement(required = true, name = "binaries")
	protected ModuleBinaries Binaries;
}

public class ModuleSources {
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

public class ModuleBinaries {
	@XmlElement(required = true, name = "includeDependencies")
	protected Boolean IncludeDependencies;
	@XmlElement(required = true, name = "unpack")
	protected Boolean Unpack;
	@XmlElement(required = true, name = "outputFileNameMapping")
	protected String OutputFileNameMapping;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}

public class FileItem {
	@XmlElement(required = true, name = "source")
	protected String Source;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "destName")
	protected String DestName;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "lineEnding")
	protected String LineEnding;
	@XmlElement(required = true, name = "filtered")
	protected Boolean Filtered;
}

public class FileSet {
	@XmlElement(required = true, name = "directory")
	protected String Directory;
	@XmlElement(required = true, name = "lineEnding")
	protected String LineEnding;
	@XmlElement(required = true, name = "outputDirectory")
	protected String OutputDirectory;
	@XmlElement(required = true, name = "includes")
	protected Includes Includes;
	@XmlElement(required = true, name = "excludes")
	protected Excludes Excludes;
	@XmlElement(required = true, name = "fileMode")
	protected String FileMode;
	@XmlElement(required = true, name = "directoryMode")
	protected String DirectoryMode;
}
