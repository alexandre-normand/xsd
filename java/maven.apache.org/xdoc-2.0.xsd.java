// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

// ContentType is media type, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ContentType")
public class ContentType {
	protected String ContentType;
}

// ContentTypes is comma-separated list of media types, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ContentTypes")
public class ContentTypes {
	protected String ContentTypes;
}

// Charset is a character encoding, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Charset")
public class Charset {
	protected String Charset;
}

// Charsets is a space separated list of character encodings, as per [RFC2045]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Charsets")
public class Charsets {
	protected String Charsets;
}

// LanguageCode is a language code, as per [RFC3066]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LanguageCode")
public class LanguageCode {
	protected String LanguageCode;
}

// Character is a single character, as per section 2.2 of [XML]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Character")
public class Character {
	protected String Character;
}

// Number is one or more digits
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Number")
public class Number {
	protected Integer Number;
}

// TabindexNumber is tabindex attribute specifies the position of the current element
//       in the tabbing order for the current document. This value must be
//       a number between 0 and 32767. User agents should ignore leading zeros.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "tabindexNumber")
public class TabindexNumber {
	protected Integer TabindexNumber;
}

// LinkTypes is space-separated list of link types
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LinkTypes")
public class LinkTypes {
	protected List<String> LinkTypes;
}

// MediaDesc is single or comma-separated list of media descriptors
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MediaDesc")
public class MediaDesc {
	protected String MediaDesc;
}

// URI is a Uniform Resource Identifier, see [RFC2396]
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "URI")
public class URI {
	protected String URI;
}

// UriList is a space separated list of Uniform Resource Identifiers
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "UriList")
public class UriList {
	protected String UriList;
}

// Datetime is date and time information. ISO date format
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Datetime")
public class Datetime {
	protected Byte Datetime;
}

// Script is script expression
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Script")
public class Script {
	protected String Script;
}

// StyleSheet is style sheet data
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "StyleSheet")
public class StyleSheet {
	protected String StyleSheet;
}

// Text is used for titles etc.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Text")
public class Text {
	protected String Text;
}

// FrameTarget is render in this frame
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "FrameTarget")
public class FrameTarget {
	protected String FrameTarget;
}

// Length is nn for pixels or nn% for percentage length
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Length")
public class Length {
	protected String Length;
}

// MultiLength is pixel, percentage, or relative
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MultiLength")
public class MultiLength {
	protected String MultiLength;
}

// Pixels is integer representing length in pixels
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Pixels")
public class Pixels {
	protected Integer Pixels;
}

// Shape ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Shape")
public class Shape {
	protected String Shape;
}

// Coords is comma separated list of lengths
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Coords")
public class Coords {
	protected String Coords;
}

// ImgAlign is used for object, applet, img, input and iframe
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ImgAlign")
public class ImgAlign {
	protected String ImgAlign;
}

// Color is a color using sRGB: #RRGGBB as Hex values
// 
//       There are also 16 widely known color names with their sRGB values:
// 
//       Black  = #000000    Green  = #008000
//       Silver = #C0C0C0    Lime   = #00FF00
//       Gray   = #808080    Olive  = #808000
//       White  = #FFFFFF    Yellow = #FFFF00
//       Maroon = #800000    Navy   = #000080
//       Red    = #FF0000    Blue   = #0000FF
//       Purple = #800080    Teal   = #008080
//       Fuchsia= #FF00FF    Aqua   = #00FFFF
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Color")
public class Color {
	protected String Color;
}

// Coreattrs is core attributes common to most elements
//       id       document-wide unique id
//       class    space separated list of classes
//       style    associated style info
//       title    advisory title/amplification
public class Coreattrs {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "class")
	protected List<String>Attr Class;
	@XmlAttribute(name = "style")
	protected StringAttr Style;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
}

// I18n is internationalization attributes
//       lang        language code (backwards compatible)
//       xml:lang    language code (as per XML 1.0 spec)
//       dir         direction for weak/neutral text
public class I18n {
	@XmlAttribute(name = "lang")
	protected StringAttr Lang;
	@XmlAttribute(name = "xml:lang")
	protected LangAttr XmlLang;
	@XmlAttribute(name = "dir")
	protected StringAttr Dir;
}

// Events is attributes for common UI events
//       onclick     a pointer button was clicked
//       ondblclick  a pointer button was double clicked
//       onmousedown a pointer button was pressed down
//       onmouseup   a pointer button was released
//       onmousemove a pointer was moved onto the element
//       onmouseout  a pointer was moved away from the element
//       onkeypress  a key was pressed and released
//       onkeydown   a key was pressed down
//       onkeyup     a key was released
public class Events {
	@XmlAttribute(name = "onclick")
	protected StringAttr Onclick;
	@XmlAttribute(name = "ondblclick")
	protected StringAttr Ondblclick;
	@XmlAttribute(name = "onmousedown")
	protected StringAttr Onmousedown;
	@XmlAttribute(name = "onmouseup")
	protected StringAttr Onmouseup;
	@XmlAttribute(name = "onmouseover")
	protected StringAttr Onmouseover;
	@XmlAttribute(name = "onmousemove")
	protected StringAttr Onmousemove;
	@XmlAttribute(name = "onmouseout")
	protected StringAttr Onmouseout;
	@XmlAttribute(name = "onkeypress")
	protected StringAttr Onkeypress;
	@XmlAttribute(name = "onkeydown")
	protected StringAttr Onkeydown;
	@XmlAttribute(name = "onkeyup")
	protected StringAttr Onkeyup;
}

// Focus is attributes for elements that can get the focus
//       accesskey   accessibility key character
//       tabindex    position in tabbing order
//       onfocus     the element got the focus
//       onblur      the element lost the focus
public class Focus {
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
}

// Attrs ...
public class Attrs {
}

// TextAlign is text alignment for p, div, h1-h6. The default is
//       align="left" for ltr headings, "right" for rtl
public class TextAlign {
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

// SpecialExtra ...
public class SpecialExtra {
	@XmlElement(required = true, name = "object")
	protected String Object;
	@XmlElement(required = true, name = "applet")
	protected Applet Applet;
	@XmlElement(required = true, name = "img")
	protected String Img;
	@XmlElement(required = true, name = "map")
	protected Map Map;
	@XmlElement(required = true, name = "iframe")
	protected String Iframe;
	@XmlElement(required = true, name = "source")
	protected Source Source;
	@XmlElement(required = true, name = "macro")
	protected Macro Macro;
}

// SpecialBasic ...
public class SpecialBasic {
	@XmlElement(required = true, name = "br")
	protected String Br;
	@XmlElement(required = true, name = "span")
	protected Span Span;
	@XmlElement(required = true, name = "bdo")
	protected String Bdo;
}

// Special ...
public class Special {
	protected SpecialBasic SpecialBasic;
	protected SpecialExtra SpecialExtra;
}

// FontstyleExtra ...
public class FontstyleExtra {
	@XmlElement(required = true, name = "big")
	protected Big Big;
	@XmlElement(required = true, name = "small")
	protected Small Small;
	@XmlElement(required = true, name = "font")
	protected Font Font;
	@XmlElement(required = true, name = "basefont")
	protected Basefont Basefont;
}

// FontstyleBasic ...
public class FontstyleBasic {
	@XmlElement(required = true, name = "tt")
	protected Tt Tt;
	@XmlElement(required = true, name = "i")
	protected I I;
	@XmlElement(required = true, name = "b")
	protected B B;
	@XmlElement(required = true, name = "u")
	protected U U;
	@XmlElement(required = true, name = "s")
	protected S S;
	@XmlElement(required = true, name = "strike")
	protected Strike Strike;
}

// Fontstyle ...
public class Fontstyle {
	protected FontstyleBasic FontstyleBasic;
	protected FontstyleExtra FontstyleExtra;
}

// PhraseExtra ...
public class PhraseExtra {
	@XmlElement(required = true, name = "sub")
	protected Sub Sub;
	@XmlElement(required = true, name = "sup")
	protected Sup Sup;
}

// PhraseBasic ...
public class PhraseBasic {
	@XmlElement(required = true, name = "em")
	protected Em Em;
	@XmlElement(required = true, name = "strong")
	protected Strong Strong;
	@XmlElement(required = true, name = "dfn")
	protected Dfn Dfn;
	@XmlElement(required = true, name = "code")
	protected Code Code;
	@XmlElement(required = true, name = "q")
	protected Q Q;
	@XmlElement(required = true, name = "samp")
	protected Samp Samp;
	@XmlElement(required = true, name = "kbd")
	protected Kbd Kbd;
	@XmlElement(required = true, name = "var")
	protected Var Var;
	@XmlElement(required = true, name = "cite")
	protected Cite Cite;
	@XmlElement(required = true, name = "abbr")
	protected Abbr Abbr;
	@XmlElement(required = true, name = "acronym")
	protected Acronym Acronym;
}

// Phrase ...
public class Phrase {
	protected PhraseBasic PhraseBasic;
	protected PhraseExtra PhraseExtra;
}

// InlineForms ...
public class InlineForms {
	@XmlElement(required = true, name = "input")
	protected String Input;
	@XmlElement(required = true, name = "select")
	protected String Select;
	@XmlElement(required = true, name = "textarea")
	protected String Textarea;
	@XmlElement(required = true, name = "label")
	protected Label Label;
	@XmlElement(required = true, name = "button")
	protected String Button;
}

// MiscInline ...
public class MiscInline {
	@XmlElement(required = true, name = "ins")
	protected Ins Ins;
	@XmlElement(required = true, name = "del")
	protected Del Del;
	@XmlElement(required = true, name = "script")
	protected String Script;
}

// Misc ...
public class Misc {
	@XmlElement(required = true, name = "noscript")
	protected Noscript Noscript;
	protected MiscInline MiscInline;
}

// Inline ...
public class Inline {
	@XmlElement(required = true, name = "a")
	protected A A;
	protected Special Special;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected InlineForms InlineForms;
}

// Inline is "Inline" covers inline or "text-level" element
public class Inline {
	protected Inline Inline;
	protected MiscInline MiscInline;
}

// Heading ...
public class Heading {
	@XmlElement(required = true, name = "h1")
	protected H1 H1;
	@XmlElement(required = true, name = "h2")
	protected H2 H2;
	@XmlElement(required = true, name = "h3")
	protected H3 H3;
	@XmlElement(required = true, name = "h4")
	protected H4 H4;
	@XmlElement(required = true, name = "h5")
	protected H5 H5;
	@XmlElement(required = true, name = "h6")
	protected H6 H6;
}

// Lists ...
public class Lists {
	@XmlElement(required = true, name = "ul")
	protected String Ul;
	@XmlElement(required = true, name = "ol")
	protected String Ol;
	@XmlElement(required = true, name = "dl")
	protected String Dl;
	@XmlElement(required = true, name = "menu")
	protected String Menu;
	@XmlElement(required = true, name = "dir")
	protected String Dir;
}

// Blocktext ...
public class Blocktext {
	@XmlElement(required = true, name = "pre")
	protected Pre Pre;
	@XmlElement(required = true, name = "hr")
	protected String Hr;
	@XmlElement(required = true, name = "blockquote")
	protected Blockquote Blockquote;
	@XmlElement(required = true, name = "address")
	protected Address Address;
	@XmlElement(required = true, name = "center")
	protected Center Center;
	@XmlElement(required = true, name = "noframes")
	protected Noframes Noframes;
}

// Block ...
public class Block {
	@XmlElement(required = true, name = "p")
	protected P P;
	@XmlElement(required = true, name = "div")
	protected Div Div;
	@XmlElement(required = true, name = "isindex")
	protected Isindex Isindex;
	@XmlElement(required = true, name = "fieldset")
	protected Fieldset Fieldset;
	@XmlElement(required = true, name = "table")
	protected Table Table;
	protected Heading Heading;
	protected Lists Lists;
	protected Blocktext Blocktext;
}

// Flow is "Flow" mixes block and inline and is used for list items etc.
public class Flow {
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

// AContent is a elements use "Inline" excluding a
public class AContent {
	protected Special Special;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected InlineForms InlineForms;
	protected MiscInline MiscInline;
}

// PreContent is pre uses "Inline" excluding img, object, applet, big, small,
//       font, or basefont
public class PreContent {
	protected SpecialBasic SpecialBasic;
	protected FontstyleBasic FontstyleBasic;
	protected PhraseBasic PhraseBasic;
	protected InlineForms InlineForms;
	protected MiscInline MiscInline;
	@XmlElement(required = true, name = "a")
	protected A A;
}

// FormContent is form uses "Flow" excluding form
public class FormContent {
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
}

// ButtonContent is button uses "Flow" but excludes a, form, form controls, iframe
public class ButtonContent {
	protected Heading Heading;
	protected Lists Lists;
	protected Blocktext Blocktext;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected Misc Misc;
	@XmlElement(required = true, name = "p")
	protected P P;
	@XmlElement(required = true, name = "div")
	protected Div Div;
	@XmlElement(required = true, name = "table")
	protected Table Table;
	@XmlElement(required = true, name = "br")
	protected String Br;
	@XmlElement(required = true, name = "span")
	protected Span Span;
	@XmlElement(required = true, name = "bdo")
	protected String Bdo;
	@XmlElement(required = true, name = "object")
	protected String Object;
	@XmlElement(required = true, name = "applet")
	protected Applet Applet;
	@XmlElement(required = true, name = "img")
	protected String Img;
	@XmlElement(required = true, name = "map")
	protected Map Map;
}

// HeadMisc ...
public class HeadMisc {
	@XmlElement(required = true, name = "script")
	protected String Script;
	@XmlElement(required = true, name = "style")
	protected Style Style;
	@XmlElement(required = true, name = "meta")
	protected Meta Meta;
	@XmlElement(required = true, name = "link")
	protected Link Link;
	@XmlElement(required = true, name = "object")
	protected String Object;
	@XmlElement(required = true, name = "isindex")
	protected Isindex Isindex;
}

// Head ...
public class Head {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "profile")
	protected StringAttr Profile;
	protected HeadMisc HeadMisc;
	@XmlElement(required = true, name = "title")
	protected Title Title;
	@XmlElement(required = true, name = "base")
	protected Base Base;
}

// Title ...
public class Title {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
}

// Base ...
public class Base {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

// Meta ...
public class Meta {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "http-equiv")
	protected voidAttr Httpequiv;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "content", required = true)
	protected voidAttr Content;
	@XmlAttribute(name = "scheme")
	protected voidAttr Scheme;
}

// Link ...
public class Link {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "charset")
	protected StringAttr Charset;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "hreflang")
	protected StringAttr Hreflang;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "rel")
	protected List<String>Attr Rel;
	@XmlAttribute(name = "rev")
	protected List<String>Attr Rev;
	@XmlAttribute(name = "media")
	protected StringAttr Media;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

// Style ...
public class Style {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlAttribute(name = "media")
	protected StringAttr Media;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

// Script ...
public class Script {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "charset")
	protected StringAttr Charset;
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlAttribute(name = "language")
	protected voidAttr Language;
	@XmlAttribute(name = "src")
	protected StringAttr Src;
	@XmlAttribute(name = "defer")
	protected voidAttr Defer;
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

// Noscript ...
public class Noscript {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Iframe ...
public class Iframe {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "longdesc")
	protected StringAttr Longdesc;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "src")
	protected StringAttr Src;
	@XmlAttribute(name = "frameborder")
	protected voidAttr Frameborder;
	@XmlAttribute(name = "marginwidth")
	protected IntegerAttr Marginwidth;
	@XmlAttribute(name = "marginheight")
	protected IntegerAttr Marginheight;
	@XmlAttribute(name = "scrolling")
	protected voidAttr Scrolling;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
}

// Noframes ...
public class Noframes {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Div ...
public class Div {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// P ...
public class P {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H1 ...
public class H1 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H2 ...
public class H2 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H3 ...
public class H3 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H4 ...
public class H4 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H5 ...
public class H5 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// H6 ...
public class H6 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

// ULStyle is Unordered list bullet styles
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ULStyle")
public class ULStyle {
	protected String ULStyle;
}

// Ul ...
public class Ul {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "ul")
	protected String Ul;
}

// OLStyle is Ordered list numbering style
// 
//       1   arabic numbers      1, 2, 3, ...
//       a   lower alpha         a, b, c, ...
//       A   upper alpha         A, B, C, ...
//       i   lower roman         i, ii, iii, ...
//       I   upper roman         I, II, III, ...
// 
//       The style is applied to the sequence number which by default
//       is reset to 1 for the first list item in an ordered list.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "OLStyle")
public class OLStyle {
	protected String OLStyle;
}

// Ol ...
public class Ol {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlAttribute(name = "start")
	protected IntegerAttr Start;
	@XmlElement(required = true, name = "ol")
	protected String Ol;
}

// Menu ...
public class Menu {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "menu")
	protected String Menu;
}

// Dir ...
public class Dir {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "dir")
	protected String Dir;
}

// LIStyle is LIStyle is constrained to: "(ULStyle|OLStyle)"
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LIStyle")
public class LIStyle {
	protected String LIStyle;
}

// Li ...
public class Li {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "value")
	protected IntegerAttr Value;
}

// Dl ...
public class Dl {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "dt")
	protected Dt Dt;
	@XmlElement(required = true, name = "dl")
	protected String Dl;
}

// Dt ...
public class Dt {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Dd ...
public class Dd {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Address ...
public class Address {
	@XmlElement(required = true)
	protected Attrs Attrs;
	protected Inline Inline;
	protected MiscInline MiscInline;
	@XmlElement(required = true, name = "p")
	protected P P;
}

// Hr ...
public class Hr {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "align")
	protected voidAttr Align;
	@XmlAttribute(name = "noshade")
	protected voidAttr Noshade;
	@XmlAttribute(name = "size")
	protected IntegerAttr Size;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
}

// Pre ...
public class Pre {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "width")
	protected IntegerAttr Width;
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

// Blockquote ...
public class Blockquote {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
}

// Center ...
public class Center {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Ins ...
public class Ins {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
	@XmlAttribute(name = "datetime")
	protected ByteAttr Datetime;
}

// Del ...
public class Del {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
	@XmlAttribute(name = "datetime")
	protected ByteAttr Datetime;
}

// A ...
public class A {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "charset")
	protected StringAttr Charset;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "hreflang")
	protected StringAttr Hreflang;
	@XmlAttribute(name = "rel")
	protected List<String>Attr Rel;
	@XmlAttribute(name = "rev")
	protected List<String>Attr Rev;
	@XmlAttribute(name = "shape")
	protected StringAttr Shape;
	@XmlAttribute(name = "coords")
	protected StringAttr Coords;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

// Span ...
public class Span {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Bdo ...
public class Bdo {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected Events Events;
	@XmlAttribute(name = "lang")
	protected StringAttr Lang;
	@XmlAttribute(name = "xml:lang")
	protected LangAttr XmlLang;
	@XmlAttribute(name = "dir", required = true)
	protected voidAttr Dir;
}

// Br ...
public class Br {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "clear")
	protected voidAttr Clear;
}

// Em ...
public class Em {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Strong ...
public class Strong {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Dfn ...
public class Dfn {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Code ...
public class Code {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Samp ...
public class Samp {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Kbd ...
public class Kbd {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Var ...
public class Var {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Cite ...
public class Cite {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Abbr ...
public class Abbr {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Acronym ...
public class Acronym {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Q ...
public class Q {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
}

// Sub ...
public class Sub {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Sup ...
public class Sup {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Tt ...
public class Tt {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// I ...
public class I {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// B ...
public class B {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Big ...
public class Big {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Small ...
public class Small {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// U ...
public class U {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// S ...
public class S {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Strike ...
public class Strike {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

// Basefont ...
public class Basefont {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "size", required = true)
	protected voidAttr Size;
	@XmlAttribute(name = "color")
	protected StringAttr Color;
	@XmlAttribute(name = "face")
	protected voidAttr Face;
}

// Font ...
public class Font {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "size")
	protected voidAttr Size;
	@XmlAttribute(name = "color")
	protected StringAttr Color;
	@XmlAttribute(name = "face")
	protected voidAttr Face;
}

// Object ...
public class Object {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "declare")
	protected voidAttr Declare;
	@XmlAttribute(name = "classid")
	protected StringAttr Classid;
	@XmlAttribute(name = "codebase")
	protected StringAttr Codebase;
	@XmlAttribute(name = "data")
	protected StringAttr Data;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "codetype")
	protected StringAttr Codetype;
	@XmlAttribute(name = "archive")
	protected StringAttr Archive;
	@XmlAttribute(name = "standby")
	protected StringAttr Standby;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "usemap")
	protected StringAttr Usemap;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "border")
	protected IntegerAttr Border;
	@XmlAttribute(name = "hspace")
	protected IntegerAttr Hspace;
	@XmlAttribute(name = "vspace")
	protected IntegerAttr Vspace;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "param")
	protected String Param;
	@XmlElement(required = true, name = "object")
	protected String Object;
}

// Param ...
public class Param {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "name", required = true)
	protected voidAttr Name;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
	@XmlAttribute(name = "valuetype")
	protected voidAttr Valuetype;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
}

// Applet ...
public class Applet {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "codebase")
	protected StringAttr Codebase;
	@XmlAttribute(name = "archive")
	protected voidAttr Archive;
	@XmlAttribute(name = "code")
	protected voidAttr Code;
	@XmlAttribute(name = "object")
	protected voidAttr Object;
	@XmlAttribute(name = "alt")
	protected StringAttr Alt;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "width", required = true)
	protected StringAttr Width;
	@XmlAttribute(name = "height", required = true)
	protected StringAttr Height;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "hspace")
	protected IntegerAttr Hspace;
	@XmlAttribute(name = "vspace")
	protected IntegerAttr Vspace;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "param")
	protected String Param;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

// Img ...
public class Img {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "src", required = true)
	protected StringAttr Src;
	@XmlAttribute(name = "alt", required = true)
	protected StringAttr Alt;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "longdesc")
	protected StringAttr Longdesc;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "usemap")
	protected StringAttr Usemap;
	@XmlAttribute(name = "ismap")
	protected voidAttr Ismap;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "border")
	protected StringAttr Border;
	@XmlAttribute(name = "hspace")
	protected IntegerAttr Hspace;
	@XmlAttribute(name = "vspace")
	protected IntegerAttr Vspace;
}

// Map ...
public class Map {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlElement(required = true)
	protected Events Events;
	@XmlAttribute(name = "id", required = true)
	protected StringAttr Id;
	@XmlAttribute(name = "class")
	protected voidAttr Class;
	@XmlAttribute(name = "style")
	protected StringAttr Style;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	protected Block Block;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
	@XmlElement(required = true, name = "area")
	protected List<String> Area;
}

// Area ...
public class Area {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "shape")
	protected StringAttr Shape;
	@XmlAttribute(name = "coords")
	protected StringAttr Coords;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "nohref")
	protected voidAttr Nohref;
	@XmlAttribute(name = "alt", required = true)
	protected StringAttr Alt;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

// Form ...
public class Form {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "action", required = true)
	protected StringAttr Action;
	@XmlAttribute(name = "method")
	protected voidAttr Method;
	@XmlAttribute(name = "enctype")
	protected StringAttr Enctype;
	@XmlAttribute(name = "onsubmit")
	protected StringAttr Onsubmit;
	@XmlAttribute(name = "onreset")
	protected StringAttr Onreset;
	@XmlAttribute(name = "accept")
	protected StringAttr Accept;
	@XmlAttribute(name = "accept-charset")
	protected StringAttr Acceptcharset;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

// Label ...
public class Label {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "for")
	protected StringAttr For;
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
}

// InputType ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "InputType")
public class InputType {
	protected String InputType;
}

// Input ...
public class Input {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
	@XmlAttribute(name = "checked")
	protected voidAttr Checked;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "readonly")
	protected voidAttr Readonly;
	@XmlAttribute(name = "size")
	protected voidAttr Size;
	@XmlAttribute(name = "maxlength")
	protected IntegerAttr Maxlength;
	@XmlAttribute(name = "src")
	protected StringAttr Src;
	@XmlAttribute(name = "alt")
	protected voidAttr Alt;
	@XmlAttribute(name = "usemap")
	protected StringAttr Usemap;
	@XmlAttribute(name = "onselect")
	protected StringAttr Onselect;
	@XmlAttribute(name = "onchange")
	protected StringAttr Onchange;
	@XmlAttribute(name = "accept")
	protected StringAttr Accept;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

// Select ...
public class Select {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "size")
	protected IntegerAttr Size;
	@XmlAttribute(name = "multiple")
	protected voidAttr Multiple;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
	@XmlAttribute(name = "onchange")
	protected StringAttr Onchange;
	@XmlElement(required = true, name = "optgroup")
	protected String Optgroup;
	@XmlElement(required = true, name = "select")
	protected String Select;
}

// Optgroup ...
public class Optgroup {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "label", required = true)
	protected StringAttr Label;
	@XmlElement(required = true, name = "optgroup")
	protected String Optgroup;
}

// Option ...
public class Option {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "selected")
	protected voidAttr Selected;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "label")
	protected StringAttr Label;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
}

// Textarea ...
public class Textarea {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "rows", required = true)
	protected IntegerAttr Rows;
	@XmlAttribute(name = "cols", required = true)
	protected IntegerAttr Cols;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "readonly")
	protected voidAttr Readonly;
	@XmlAttribute(name = "onselect")
	protected StringAttr Onselect;
	@XmlAttribute(name = "onchange")
	protected StringAttr Onchange;
}

// Fieldset ...
public class Fieldset {
	@XmlElement(required = true)
	protected Attrs Attrs;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "legend")
	protected Legend Legend;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

// LAlign ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LAlign")
public class LAlign {
	protected String LAlign;
}

// Legend ...
public class Legend {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

// Button ...
public class Button {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
	@XmlAttribute(name = "type")
	protected voidAttr Type;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
}

// Isindex ...
public class Isindex {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "prompt")
	protected StringAttr Prompt;
}

// TFrame is The border attribute sets the thickness of the frame around the
//       table. The default units are screen pixels.
// 
//       The frame attribute specifies which parts of the frame around
//       the table should be rendered. The values are not the same as
//       CALS to avoid a name clash with the valign attribute.
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TFrame")
public class TFrame {
	protected String TFrame;
}

// TRules is The rules attribute defines which rules to draw between cells:
// 
//       If rules is absent then assume:
//           "none" if border is absent or border="0" otherwise "all"
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TRules")
public class TRules {
	protected String TRules;
}

// TAlign is horizontal placement of table relative to document
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TAlign")
public class TAlign {
	protected String TAlign;
}

// Cellhalign is horizontal alignment attributes for cell contents
// 
//       char        alignment char, e.g. char=':'
//       charoff     offset for alignment char
public class Cellhalign {
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "char")
	protected StringAttr Char;
	@XmlAttribute(name = "charoff")
	protected StringAttr Charoff;
}

// Cellvalign is vertical alignment attributes for cell contents
public class Cellvalign {
	@XmlAttribute(name = "valign")
	protected StringAttr Valign;
}

// Table ...
public class Table {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "summary")
	protected StringAttr Summary;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "border")
	protected IntegerAttr Border;
	@XmlAttribute(name = "frame")
	protected StringAttr Frame;
	@XmlAttribute(name = "rules")
	protected StringAttr Rules;
	@XmlAttribute(name = "cellspacing")
	protected StringAttr Cellspacing;
	@XmlAttribute(name = "cellpadding")
	protected StringAttr Cellpadding;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlElement(required = true, name = "caption")
	protected Caption Caption;
	@XmlElement(required = true, name = "col")
	protected List<Col> Col;
	@XmlElement(required = true, name = "colgroup")
	protected List<Colgroup> Colgroup;
	@XmlElement(required = true, name = "thead")
	protected Thead Thead;
	@XmlElement(required = true, name = "tfoot")
	protected Tfoot Tfoot;
	@XmlElement(required = true, name = "tbody")
	protected List<Tbody> Tbody;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// CAlign ...
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "CAlign")
public class CAlign {
	protected String CAlign;
}

// Caption ...
public class Caption {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

// Thead ...
public class Thead {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// Tfoot ...
public class Tfoot {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// Tbody ...
public class Tbody {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

// Colgroup ...
public class Colgroup {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "span")
	protected IntegerAttr Span;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlElement(required = true, name = "col")
	protected List<Col> Col;
}

// Col ...
public class Col {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "span")
	protected IntegerAttr Span;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
}

// Tr ...
public class Tr {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlElement(required = true, name = "th")
	protected String Th;
	@XmlElement(required = true, name = "td")
	protected String Td;
}

// Scope is Scope is simpler than headers attribute for common tables
@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Scope")
public class Scope {
	protected String Scope;
}

// Th ...
public class Th {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "abbr")
	protected StringAttr Abbr;
	@XmlAttribute(name = "axis")
	protected voidAttr Axis;
	@XmlAttribute(name = "headers")
	protected List<String>Attr Headers;
	@XmlAttribute(name = "scope")
	protected StringAttr Scope;
	@XmlAttribute(name = "rowspan")
	protected IntegerAttr Rowspan;
	@XmlAttribute(name = "colspan")
	protected IntegerAttr Colspan;
	@XmlAttribute(name = "nowrap")
	protected voidAttr Nowrap;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
}

// Td ...
public class Td {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "abbr")
	protected StringAttr Abbr;
	@XmlAttribute(name = "axis")
	protected voidAttr Axis;
	@XmlAttribute(name = "headers")
	protected List<String>Attr Headers;
	@XmlAttribute(name = "scope")
	protected StringAttr Scope;
	@XmlAttribute(name = "rowspan")
	protected IntegerAttr Rowspan;
	@XmlAttribute(name = "colspan")
	protected IntegerAttr Colspan;
	@XmlAttribute(name = "nowrap")
	protected voidAttr Nowrap;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
}

// Document ...
public class Document {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlElement(required = true, name = "properties")
	protected List<Properties> Properties;
	@XmlElement(required = true, name = "head")
	protected List<Head> Head;
	@XmlElement(required = true, name = "body")
	protected List<Body> Body;
}

// Properties ...
public class Properties {
	@XmlElement(required = true, name = "title")
	protected List<Title> Title;
	@XmlElement(required = true, name = "author")
	protected List<Author> Author;
	@XmlElement(required = true, name = "date")
	protected List<Byte> Date;
}

// Author ...
public class Author {
	@XmlAttribute(name = "email")
	protected StringAttr Email;
}

// Date ...
public class Date {
}

// Body ...
public class Body {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true, name = "section")
	protected List<Section> Section;
}

// Section ...
public class Section {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
	@XmlElement(required = true, name = "subsection")
	protected Subsection Subsection;
}

// Subsection ...
public class Subsection {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

// Source ...
public class Source {
}

// Macro ...
public class Macro {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlElement(required = true, name = "param")
	protected String Param;
}
