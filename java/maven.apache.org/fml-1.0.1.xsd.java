// Code generated by xgen. DO NOT EDIT.

package schema;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ContentType")
public class ContentType {
	protected String ContentType;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ContentTypes")
public class ContentTypes {
	protected String ContentTypes;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Charset")
public class Charset {
	protected String Charset;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Charsets")
public class Charsets {
	protected String Charsets;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LanguageCode")
public class LanguageCode {
	protected String LanguageCode;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Character")
public class Character {
	protected String Character;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Number")
public class Number {
	protected Integer Number;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "tabindexNumber")
public class TabindexNumber {
	protected Integer TabindexNumber;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LinkTypes")
public class LinkTypes {
	protected List<String> LinkTypes;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MediaDesc")
public class MediaDesc {
	protected String MediaDesc;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "URI")
public class URI {
	protected String URI;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "UriList")
public class UriList {
	protected String UriList;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Datetime")
public class Datetime {
	protected Byte Datetime;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Script")
public class Script {
	protected String Script;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "StyleSheet")
public class StyleSheet {
	protected String StyleSheet;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Text")
public class Text {
	protected String Text;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "FrameTarget")
public class FrameTarget {
	protected String FrameTarget;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Length")
public class Length {
	protected String Length;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "MultiLength")
public class MultiLength {
	protected String MultiLength;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Pixels")
public class Pixels {
	protected Integer Pixels;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Shape")
public class Shape {
	protected String Shape;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Coords")
public class Coords {
	protected String Coords;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ImgAlign")
public class ImgAlign {
	protected String ImgAlign;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Color")
public class Color {
	protected String Color;
}

public class Coreattrs {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "class")
	protected List<String>Attr Class;
	@XmlAttribute(name = "style")
	protected StringAttr Style;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
}

public class I18n {
	@XmlAttribute(name = "lang")
	protected StringAttr Lang;
	@XmlAttribute(name = "xml:lang")
	protected LangAttr XmlLang;
	@XmlAttribute(name = "dir")
	protected StringAttr Dir;
}

public class Events {
	@XmlAttribute(name = "onclick")
	protected StringAttr Onclick;
	@XmlAttribute(name = "ondblclick")
	protected StringAttr Ondblclick;
	@XmlAttribute(name = "onmousedown")
	protected StringAttr Onmousedown;
	@XmlAttribute(name = "onmouseup")
	protected StringAttr Onmouseup;
	@XmlAttribute(name = "onmouseover")
	protected StringAttr Onmouseover;
	@XmlAttribute(name = "onmousemove")
	protected StringAttr Onmousemove;
	@XmlAttribute(name = "onmouseout")
	protected StringAttr Onmouseout;
	@XmlAttribute(name = "onkeypress")
	protected StringAttr Onkeypress;
	@XmlAttribute(name = "onkeydown")
	protected StringAttr Onkeydown;
	@XmlAttribute(name = "onkeyup")
	protected StringAttr Onkeyup;
}

public class Focus {
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
}

public class Attrs {
}

public class TextAlign {
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

public class SpecialExtra {
	@XmlElement(required = true, name = "object")
	protected String Object;
	@XmlElement(required = true, name = "applet")
	protected Applet Applet;
	@XmlElement(required = true, name = "img")
	protected String Img;
	@XmlElement(required = true, name = "map")
	protected Map Map;
	@XmlElement(required = true, name = "iframe")
	protected String Iframe;
	@XmlElement(required = true, name = "source")
	protected Source Source;
	@XmlElement(required = true, name = "macro")
	protected Macro Macro;
}

public class SpecialBasic {
	@XmlElement(required = true, name = "br")
	protected String Br;
	@XmlElement(required = true, name = "span")
	protected Span Span;
	@XmlElement(required = true, name = "bdo")
	protected String Bdo;
}

public class Special {
	protected SpecialBasic SpecialBasic;
	protected SpecialExtra SpecialExtra;
}

public class FontstyleExtra {
	@XmlElement(required = true, name = "big")
	protected Big Big;
	@XmlElement(required = true, name = "small")
	protected Small Small;
	@XmlElement(required = true, name = "font")
	protected Font Font;
	@XmlElement(required = true, name = "basefont")
	protected Basefont Basefont;
}

public class FontstyleBasic {
	@XmlElement(required = true, name = "tt")
	protected Tt Tt;
	@XmlElement(required = true, name = "i")
	protected I I;
	@XmlElement(required = true, name = "b")
	protected B B;
	@XmlElement(required = true, name = "u")
	protected U U;
	@XmlElement(required = true, name = "s")
	protected S S;
	@XmlElement(required = true, name = "strike")
	protected Strike Strike;
}

public class Fontstyle {
	protected FontstyleBasic FontstyleBasic;
	protected FontstyleExtra FontstyleExtra;
}

public class PhraseExtra {
	@XmlElement(required = true, name = "sub")
	protected Sub Sub;
	@XmlElement(required = true, name = "sup")
	protected Sup Sup;
}

public class PhraseBasic {
	@XmlElement(required = true, name = "em")
	protected Em Em;
	@XmlElement(required = true, name = "strong")
	protected Strong Strong;
	@XmlElement(required = true, name = "dfn")
	protected Dfn Dfn;
	@XmlElement(required = true, name = "code")
	protected Code Code;
	@XmlElement(required = true, name = "q")
	protected Q Q;
	@XmlElement(required = true, name = "samp")
	protected Samp Samp;
	@XmlElement(required = true, name = "kbd")
	protected Kbd Kbd;
	@XmlElement(required = true, name = "var")
	protected Var Var;
	@XmlElement(required = true, name = "cite")
	protected Cite Cite;
	@XmlElement(required = true, name = "abbr")
	protected Abbr Abbr;
	@XmlElement(required = true, name = "acronym")
	protected Acronym Acronym;
}

public class Phrase {
	protected PhraseBasic PhraseBasic;
	protected PhraseExtra PhraseExtra;
}

public class InlineForms {
	@XmlElement(required = true, name = "input")
	protected String Input;
	@XmlElement(required = true, name = "select")
	protected String Select;
	@XmlElement(required = true, name = "textarea")
	protected String Textarea;
	@XmlElement(required = true, name = "label")
	protected Label Label;
	@XmlElement(required = true, name = "button")
	protected String Button;
}

public class MiscInline {
	@XmlElement(required = true, name = "ins")
	protected Ins Ins;
	@XmlElement(required = true, name = "del")
	protected Del Del;
	@XmlElement(required = true, name = "script")
	protected String Script;
}

public class Misc {
	@XmlElement(required = true, name = "noscript")
	protected Noscript Noscript;
	protected MiscInline MiscInline;
}

public class Inline {
	@XmlElement(required = true, name = "a")
	protected A A;
	protected Special Special;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected InlineForms InlineForms;
}

public class Inline {
	protected Inline Inline;
	protected MiscInline MiscInline;
}

public class Heading {
	@XmlElement(required = true, name = "h1")
	protected H1 H1;
	@XmlElement(required = true, name = "h2")
	protected H2 H2;
	@XmlElement(required = true, name = "h3")
	protected H3 H3;
	@XmlElement(required = true, name = "h4")
	protected H4 H4;
	@XmlElement(required = true, name = "h5")
	protected H5 H5;
	@XmlElement(required = true, name = "h6")
	protected H6 H6;
}

public class Lists {
	@XmlElement(required = true, name = "ul")
	protected String Ul;
	@XmlElement(required = true, name = "ol")
	protected String Ol;
	@XmlElement(required = true, name = "dl")
	protected String Dl;
	@XmlElement(required = true, name = "menu")
	protected String Menu;
	@XmlElement(required = true, name = "dir")
	protected String Dir;
}

public class Blocktext {
	@XmlElement(required = true, name = "pre")
	protected Pre Pre;
	@XmlElement(required = true, name = "hr")
	protected String Hr;
	@XmlElement(required = true, name = "blockquote")
	protected Blockquote Blockquote;
	@XmlElement(required = true, name = "address")
	protected Address Address;
	@XmlElement(required = true, name = "center")
	protected Center Center;
	@XmlElement(required = true, name = "noframes")
	protected Noframes Noframes;
}

public class Block {
	@XmlElement(required = true, name = "p")
	protected P P;
	@XmlElement(required = true, name = "div")
	protected Div Div;
	@XmlElement(required = true, name = "isindex")
	protected Isindex Isindex;
	@XmlElement(required = true, name = "fieldset")
	protected Fieldset Fieldset;
	@XmlElement(required = true, name = "table")
	protected Table Table;
	protected Heading Heading;
	protected Lists Lists;
	protected Blocktext Blocktext;
}

public class Flow {
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

public class AContent {
	protected Special Special;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected InlineForms InlineForms;
	protected MiscInline MiscInline;
}

public class PreContent {
	protected SpecialBasic SpecialBasic;
	protected FontstyleBasic FontstyleBasic;
	protected PhraseBasic PhraseBasic;
	protected InlineForms InlineForms;
	protected MiscInline MiscInline;
	@XmlElement(required = true, name = "a")
	protected A A;
}

public class FormContent {
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
}

public class ButtonContent {
	protected Heading Heading;
	protected Lists Lists;
	protected Blocktext Blocktext;
	protected Fontstyle Fontstyle;
	protected Phrase Phrase;
	protected Misc Misc;
	@XmlElement(required = true, name = "p")
	protected P P;
	@XmlElement(required = true, name = "div")
	protected Div Div;
	@XmlElement(required = true, name = "table")
	protected Table Table;
	@XmlElement(required = true, name = "br")
	protected String Br;
	@XmlElement(required = true, name = "span")
	protected Span Span;
	@XmlElement(required = true, name = "bdo")
	protected String Bdo;
	@XmlElement(required = true, name = "object")
	protected String Object;
	@XmlElement(required = true, name = "applet")
	protected Applet Applet;
	@XmlElement(required = true, name = "img")
	protected String Img;
	@XmlElement(required = true, name = "map")
	protected Map Map;
}

public class HeadMisc {
	@XmlElement(required = true, name = "script")
	protected String Script;
	@XmlElement(required = true, name = "style")
	protected Style Style;
	@XmlElement(required = true, name = "meta")
	protected Meta Meta;
	@XmlElement(required = true, name = "link")
	protected Link Link;
	@XmlElement(required = true, name = "object")
	protected String Object;
	@XmlElement(required = true, name = "isindex")
	protected Isindex Isindex;
}

public class Head {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "profile")
	protected StringAttr Profile;
	protected HeadMisc HeadMisc;
	@XmlElement(required = true, name = "title")
	protected Title Title;
	@XmlElement(required = true, name = "base")
	protected Base Base;
}

public class Title {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
}

public class Base {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

public class Meta {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "http-equiv")
	protected voidAttr Httpequiv;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "content", required = true)
	protected voidAttr Content;
	@XmlAttribute(name = "scheme")
	protected voidAttr Scheme;
}

public class Link {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "charset")
	protected StringAttr Charset;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "hreflang")
	protected StringAttr Hreflang;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "rel")
	protected List<String>Attr Rel;
	@XmlAttribute(name = "rev")
	protected List<String>Attr Rev;
	@XmlAttribute(name = "media")
	protected StringAttr Media;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

public class Style {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlAttribute(name = "media")
	protected StringAttr Media;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

public class Script {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "charset")
	protected StringAttr Charset;
	@XmlAttribute(name = "type", required = true)
	protected StringAttr Type;
	@XmlAttribute(name = "language")
	protected voidAttr Language;
	@XmlAttribute(name = "src")
	protected StringAttr Src;
	@XmlAttribute(name = "defer")
	protected voidAttr Defer;
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

public class Noscript {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Iframe {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "longdesc")
	protected StringAttr Longdesc;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "src")
	protected StringAttr Src;
	@XmlAttribute(name = "frameborder")
	protected voidAttr Frameborder;
	@XmlAttribute(name = "marginwidth")
	protected IntegerAttr Marginwidth;
	@XmlAttribute(name = "marginheight")
	protected IntegerAttr Marginheight;
	@XmlAttribute(name = "scrolling")
	protected voidAttr Scrolling;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
}

public class Noframes {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Div {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class P {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class H1 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class H2 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class H3 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class H4 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class H5 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

public class H6 {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected TextAlign TextAlign;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "ULStyle")
public class ULStyle {
	protected String ULStyle;
}

public class Ul {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "ul")
	protected String Ul;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "OLStyle")
public class OLStyle {
	protected String OLStyle;
}

public class Ol {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlAttribute(name = "start")
	protected IntegerAttr Start;
	@XmlElement(required = true, name = "ol")
	protected String Ol;
}

public class Menu {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "menu")
	protected String Menu;
}

public class Dir {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "dir")
	protected String Dir;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LIStyle")
public class LIStyle {
	protected String LIStyle;
}

public class Li {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "value")
	protected IntegerAttr Value;
}

public class Dl {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "compact")
	protected voidAttr Compact;
	@XmlElement(required = true, name = "dt")
	protected Dt Dt;
	@XmlElement(required = true, name = "dl")
	protected String Dl;
}

public class Dt {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Dd {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Address {
	@XmlElement(required = true)
	protected Attrs Attrs;
	protected Inline Inline;
	protected MiscInline MiscInline;
	@XmlElement(required = true, name = "p")
	protected P P;
}

public class Hr {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "align")
	protected voidAttr Align;
	@XmlAttribute(name = "noshade")
	protected voidAttr Noshade;
	@XmlAttribute(name = "size")
	protected IntegerAttr Size;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
}

public class Pre {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "width")
	protected IntegerAttr Width;
	@XmlAttribute(name = "xml:space")
	protected SpaceAttr XmlSpace;
}

public class Blockquote {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
}

public class Center {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Ins {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
	@XmlAttribute(name = "datetime")
	protected ByteAttr Datetime;
}

public class Del {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
	@XmlAttribute(name = "datetime")
	protected ByteAttr Datetime;
}

public class A {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "charset")
	protected StringAttr Charset;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "hreflang")
	protected StringAttr Hreflang;
	@XmlAttribute(name = "rel")
	protected List<String>Attr Rel;
	@XmlAttribute(name = "rev")
	protected List<String>Attr Rev;
	@XmlAttribute(name = "shape")
	protected StringAttr Shape;
	@XmlAttribute(name = "coords")
	protected StringAttr Coords;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

public class Span {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Bdo {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected Events Events;
	@XmlAttribute(name = "lang")
	protected StringAttr Lang;
	@XmlAttribute(name = "xml:lang")
	protected LangAttr XmlLang;
	@XmlAttribute(name = "dir", required = true)
	protected voidAttr Dir;
}

public class Br {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "clear")
	protected voidAttr Clear;
}

public class Em {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Strong {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Dfn {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Code {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Samp {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Kbd {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Var {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Cite {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Abbr {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Acronym {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Q {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "cite")
	protected StringAttr Cite;
}

public class Sub {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Sup {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Tt {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class I {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class B {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Big {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Small {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class U {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class S {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Strike {
	@XmlElement(required = true)
	protected Attrs Attrs;
}

public class Basefont {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "size", required = true)
	protected voidAttr Size;
	@XmlAttribute(name = "color")
	protected StringAttr Color;
	@XmlAttribute(name = "face")
	protected voidAttr Face;
}

public class Font {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "size")
	protected voidAttr Size;
	@XmlAttribute(name = "color")
	protected StringAttr Color;
	@XmlAttribute(name = "face")
	protected voidAttr Face;
}

public class Object {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "declare")
	protected voidAttr Declare;
	@XmlAttribute(name = "classid")
	protected StringAttr Classid;
	@XmlAttribute(name = "codebase")
	protected StringAttr Codebase;
	@XmlAttribute(name = "data")
	protected StringAttr Data;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "codetype")
	protected StringAttr Codetype;
	@XmlAttribute(name = "archive")
	protected StringAttr Archive;
	@XmlAttribute(name = "standby")
	protected StringAttr Standby;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "usemap")
	protected StringAttr Usemap;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "border")
	protected IntegerAttr Border;
	@XmlAttribute(name = "hspace")
	protected IntegerAttr Hspace;
	@XmlAttribute(name = "vspace")
	protected IntegerAttr Vspace;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "param")
	protected String Param;
	@XmlElement(required = true, name = "object")
	protected String Object;
}

public class Param {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "name", required = true)
	protected voidAttr Name;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
	@XmlAttribute(name = "valuetype")
	protected voidAttr Valuetype;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
}

public class Applet {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlAttribute(name = "codebase")
	protected StringAttr Codebase;
	@XmlAttribute(name = "archive")
	protected voidAttr Archive;
	@XmlAttribute(name = "code")
	protected voidAttr Code;
	@XmlAttribute(name = "object")
	protected voidAttr Object;
	@XmlAttribute(name = "alt")
	protected StringAttr Alt;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "width", required = true)
	protected StringAttr Width;
	@XmlAttribute(name = "height", required = true)
	protected StringAttr Height;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "hspace")
	protected IntegerAttr Hspace;
	@XmlAttribute(name = "vspace")
	protected IntegerAttr Vspace;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "param")
	protected String Param;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

public class Img {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "src", required = true)
	protected StringAttr Src;
	@XmlAttribute(name = "alt", required = true)
	protected StringAttr Alt;
	@XmlAttribute(name = "name")
	protected StringAttr Name;
	@XmlAttribute(name = "longdesc")
	protected StringAttr Longdesc;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "usemap")
	protected StringAttr Usemap;
	@XmlAttribute(name = "ismap")
	protected voidAttr Ismap;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "border")
	protected StringAttr Border;
	@XmlAttribute(name = "hspace")
	protected IntegerAttr Hspace;
	@XmlAttribute(name = "vspace")
	protected IntegerAttr Vspace;
}

public class Map {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlElement(required = true)
	protected Events Events;
	@XmlAttribute(name = "id", required = true)
	protected StringAttr Id;
	@XmlAttribute(name = "class")
	protected voidAttr Class;
	@XmlAttribute(name = "style")
	protected StringAttr Style;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	protected Block Block;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
	@XmlElement(required = true, name = "area")
	protected List<String> Area;
}

public class Area {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "shape")
	protected StringAttr Shape;
	@XmlAttribute(name = "coords")
	protected StringAttr Coords;
	@XmlAttribute(name = "href")
	protected StringAttr Href;
	@XmlAttribute(name = "nohref")
	protected voidAttr Nohref;
	@XmlAttribute(name = "alt", required = true)
	protected StringAttr Alt;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

public class Form {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "action", required = true)
	protected StringAttr Action;
	@XmlAttribute(name = "method")
	protected voidAttr Method;
	@XmlAttribute(name = "enctype")
	protected StringAttr Enctype;
	@XmlAttribute(name = "onsubmit")
	protected StringAttr Onsubmit;
	@XmlAttribute(name = "onreset")
	protected StringAttr Onreset;
	@XmlAttribute(name = "accept")
	protected StringAttr Accept;
	@XmlAttribute(name = "accept-charset")
	protected StringAttr Acceptcharset;
	@XmlAttribute(name = "target")
	protected StringAttr Target;
}

public class Label {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "for")
	protected StringAttr For;
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "InputType")
public class InputType {
	protected String InputType;
}

public class Input {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "type")
	protected StringAttr Type;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
	@XmlAttribute(name = "checked")
	protected voidAttr Checked;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "readonly")
	protected voidAttr Readonly;
	@XmlAttribute(name = "size")
	protected voidAttr Size;
	@XmlAttribute(name = "maxlength")
	protected IntegerAttr Maxlength;
	@XmlAttribute(name = "src")
	protected StringAttr Src;
	@XmlAttribute(name = "alt")
	protected voidAttr Alt;
	@XmlAttribute(name = "usemap")
	protected StringAttr Usemap;
	@XmlAttribute(name = "onselect")
	protected StringAttr Onselect;
	@XmlAttribute(name = "onchange")
	protected StringAttr Onchange;
	@XmlAttribute(name = "accept")
	protected StringAttr Accept;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

public class Select {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "size")
	protected IntegerAttr Size;
	@XmlAttribute(name = "multiple")
	protected voidAttr Multiple;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "tabindex")
	protected IntegerAttr Tabindex;
	@XmlAttribute(name = "onfocus")
	protected StringAttr Onfocus;
	@XmlAttribute(name = "onblur")
	protected StringAttr Onblur;
	@XmlAttribute(name = "onchange")
	protected StringAttr Onchange;
	@XmlElement(required = true, name = "optgroup")
	protected String Optgroup;
	@XmlElement(required = true, name = "select")
	protected String Select;
}

public class Optgroup {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "label", required = true)
	protected StringAttr Label;
	@XmlElement(required = true, name = "optgroup")
	protected String Optgroup;
}

public class Option {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "selected")
	protected voidAttr Selected;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "label")
	protected StringAttr Label;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
}

public class Textarea {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "rows", required = true)
	protected IntegerAttr Rows;
	@XmlAttribute(name = "cols", required = true)
	protected IntegerAttr Cols;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
	@XmlAttribute(name = "readonly")
	protected voidAttr Readonly;
	@XmlAttribute(name = "onselect")
	protected StringAttr Onselect;
	@XmlAttribute(name = "onchange")
	protected StringAttr Onchange;
}

public class Fieldset {
	@XmlElement(required = true)
	protected Attrs Attrs;
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "legend")
	protected Legend Legend;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "LAlign")
public class LAlign {
	protected String LAlign;
}

public class Legend {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "accesskey")
	protected StringAttr Accesskey;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

public class Button {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Focus Focus;
	@XmlAttribute(name = "name")
	protected voidAttr Name;
	@XmlAttribute(name = "value")
	protected voidAttr Value;
	@XmlAttribute(name = "type")
	protected voidAttr Type;
	@XmlAttribute(name = "disabled")
	protected voidAttr Disabled;
}

public class Isindex {
	@XmlElement(required = true)
	protected Coreattrs Coreattrs;
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "prompt")
	protected StringAttr Prompt;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TFrame")
public class TFrame {
	protected String TFrame;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TRules")
public class TRules {
	protected String TRules;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "TAlign")
public class TAlign {
	protected String TAlign;
}

public class Cellhalign {
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "char")
	protected StringAttr Char;
	@XmlAttribute(name = "charoff")
	protected StringAttr Charoff;
}

public class Cellvalign {
	@XmlAttribute(name = "valign")
	protected StringAttr Valign;
}

public class Table {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "summary")
	protected StringAttr Summary;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "border")
	protected IntegerAttr Border;
	@XmlAttribute(name = "frame")
	protected StringAttr Frame;
	@XmlAttribute(name = "rules")
	protected StringAttr Rules;
	@XmlAttribute(name = "cellspacing")
	protected StringAttr Cellspacing;
	@XmlAttribute(name = "cellpadding")
	protected StringAttr Cellpadding;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlElement(required = true, name = "caption")
	protected Caption Caption;
	@XmlElement(required = true, name = "col")
	protected List<Col> Col;
	@XmlElement(required = true, name = "colgroup")
	protected List<Colgroup> Colgroup;
	@XmlElement(required = true, name = "thead")
	protected Thead Thead;
	@XmlElement(required = true, name = "tfoot")
	protected Tfoot Tfoot;
	@XmlElement(required = true, name = "tbody")
	protected List<Tbody> Tbody;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "CAlign")
public class CAlign {
	protected String CAlign;
}

public class Caption {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlAttribute(name = "align")
	protected StringAttr Align;
}

public class Thead {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

public class Tfoot {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

public class Tbody {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlElement(required = true, name = "tr")
	protected List<Tr> Tr;
}

public class Colgroup {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "span")
	protected IntegerAttr Span;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlElement(required = true, name = "col")
	protected List<Col> Col;
}

public class Col {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "span")
	protected IntegerAttr Span;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
}

public class Tr {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlElement(required = true, name = "th")
	protected String Th;
	@XmlElement(required = true, name = "td")
	protected String Td;
}

@XmlAccessorType(XmlAccessType.FIELD)
@XmlAttribute(required = true, name = "Scope")
public class Scope {
	protected String Scope;
}

public class Th {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "abbr")
	protected StringAttr Abbr;
	@XmlAttribute(name = "axis")
	protected voidAttr Axis;
	@XmlAttribute(name = "headers")
	protected List<String>Attr Headers;
	@XmlAttribute(name = "scope")
	protected StringAttr Scope;
	@XmlAttribute(name = "rowspan")
	protected IntegerAttr Rowspan;
	@XmlAttribute(name = "colspan")
	protected IntegerAttr Colspan;
	@XmlAttribute(name = "nowrap")
	protected voidAttr Nowrap;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
}

public class Td {
	@XmlElement(required = true)
	protected Attrs Attrs;
	@XmlElement(required = true)
	protected Cellhalign Cellhalign;
	@XmlElement(required = true)
	protected Cellvalign Cellvalign;
	@XmlAttribute(name = "abbr")
	protected StringAttr Abbr;
	@XmlAttribute(name = "axis")
	protected voidAttr Axis;
	@XmlAttribute(name = "headers")
	protected List<String>Attr Headers;
	@XmlAttribute(name = "scope")
	protected StringAttr Scope;
	@XmlAttribute(name = "rowspan")
	protected IntegerAttr Rowspan;
	@XmlAttribute(name = "colspan")
	protected IntegerAttr Colspan;
	@XmlAttribute(name = "nowrap")
	protected voidAttr Nowrap;
	@XmlAttribute(name = "bgcolor")
	protected StringAttr Bgcolor;
	@XmlAttribute(name = "width")
	protected StringAttr Width;
	@XmlAttribute(name = "height")
	protected StringAttr Height;
}

public class Faqs {
	@XmlElement(required = true)
	protected I18n I18n;
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlAttribute(name = "title")
	protected StringAttr Title;
	@XmlAttribute(name = "toplink")
	protected BooleanAttr Toplink;
	@XmlElement(required = true, name = "part")
	protected List<Part> Part;
}

public class Part {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlElement(required = true, name = "title")
	protected List<Title> Title;
	@XmlElement(required = true, name = "faq")
	protected List<Faq> Faq;
}

public class Faq {
	@XmlAttribute(name = "id")
	protected StringAttr Id;
	@XmlElement(required = true, name = "question")
	protected List<Question> Question;
	@XmlElement(required = true, name = "answer")
	protected List<Answer> Answer;
}

public class Question {
	protected List<Fontstyle> Fontstyle;
	protected List<Phrase> Phrase;
}

public class Answer {
	protected Block Block;
	protected Inline Inline;
	protected Misc Misc;
	@XmlElement(required = true, name = "form")
	protected String Form;
}

public class Source {
}

public class Macro {
	@XmlAttribute(name = "name", required = true)
	protected StringAttr Name;
	@XmlElement(required = true, name = "param")
	protected String Param;
}
