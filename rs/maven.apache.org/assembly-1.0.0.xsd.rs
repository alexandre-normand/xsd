// Code generated by xgen. DO NOT EDIT.

#[macro_use]
extern crate serde_derive;
extern crate serde;
extern crate serde_xml_rs;

use serde_xml_rs::from_reader;


// assembly is Describes the assembly layout and packaging.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct assembly {
	#[serde(rename = "assembly")]
	pub assembly: Assembly,
}


// Formats ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Formats {
	#[serde(rename = "format")]
	pub format: Vec<String>,
}


// ModuleSets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModuleSets {
	#[serde(rename = "moduleSet")]
	pub module_set: Vec<ModuleSet>,
}


// FileSets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSets {
	#[serde(rename = "fileSet")]
	pub file_set: Vec<FileSet>,
}


// Files ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Files {
	#[serde(rename = "file")]
	pub file: Vec<FileItem>,
}


// DependencySets ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencySets {
	#[serde(rename = "dependencySet")]
	pub dependency_set: Vec<DependencySet>,
}


// Repositories ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repositories {
	#[serde(rename = "repository")]
	pub repository: Vec<Repository>,
}


// ComponentDescriptors ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ComponentDescriptors {
	#[serde(rename = "componentDescriptor")]
	pub component_descriptor: Vec<String>,
}


// Assembly is The id of this assembly. This is a symbolic name for a
//             particular assembly of files from this project.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Assembly {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "formats")]
	pub formats: Formats,
	#[serde(rename = "includeBaseDirectory")]
	pub include_base_directory: bool,
	#[serde(rename = "includeSiteDirectory")]
	pub include_site_directory: bool,
	#[serde(rename = "moduleSets")]
	pub module_sets: ModuleSets,
	#[serde(rename = "fileSets")]
	pub file_sets: FileSets,
	#[serde(rename = "files")]
	pub files: Files,
	#[serde(rename = "dependencySets")]
	pub dependency_sets: DependencySets,
	#[serde(rename = "repositories")]
	pub repositories: Repositories,
	#[serde(rename = "componentDescriptors")]
	pub component_descriptors: ComponentDescriptors,
}


// GroupVersionAlignments ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GroupVersionAlignments {
	#[serde(rename = "groupVersionAlignment")]
	pub group_version_alignment: Vec<GroupVersionAlignment>,
}


// Includes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Includes {
	#[serde(rename = "include")]
	pub include: Vec<String>,
}


// Excludes ...
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Excludes {
	#[serde(rename = "exclude")]
	pub exclude: Vec<String>,
}


// Repository is If set to true, this property will trigger the creation of repository
//             metadata which will allow the repository to be used as a functional remote
//             repository.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct Repository {
	#[serde(rename = "includeMetadata")]
	pub include_metadata: bool,
	#[serde(rename = "groupVersionAlignments")]
	pub group_version_alignments: GroupVersionAlignments,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
	#[serde(rename = "fileMode")]
	pub file_mode: String,
	#[serde(rename = "directoryMode")]
	pub directory_mode: String,
}


// GroupVersionAlignment is The version you want to align this group to.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct GroupVersionAlignment {
	#[serde(rename = "id")]
	pub id: String,
	#[serde(rename = "version")]
	pub version: String,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
}


// DependencySet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct DependencySet {
	#[serde(rename = "outputFileNameMapping")]
	pub output_file_name_mapping: String,
	#[serde(rename = "unpack")]
	pub unpack: bool,
	#[serde(rename = "scope")]
	pub scope: String,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
	#[serde(rename = "fileMode")]
	pub file_mode: String,
	#[serde(rename = "directoryMode")]
	pub directory_mode: String,
}


// ModuleSet is 1.0.0
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModuleSet {
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
	#[serde(rename = "sources")]
	pub sources: ModuleSources,
	#[serde(rename = "binaries")]
	pub binaries: ModuleBinaries,
}


// ModuleSources is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModuleSources {
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
	#[serde(rename = "fileMode")]
	pub file_mode: String,
	#[serde(rename = "directoryMode")]
	pub directory_mode: String,
}


// ModuleBinaries is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct ModuleBinaries {
	#[serde(rename = "includeDependencies")]
	pub include_dependencies: bool,
	#[serde(rename = "unpack")]
	pub unpack: bool,
	#[serde(rename = "outputFileNameMapping")]
	pub output_file_name_mapping: String,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
	#[serde(rename = "fileMode")]
	pub file_mode: String,
	#[serde(rename = "directoryMode")]
	pub directory_mode: String,
}


// FileItem is Flag used to determine if the file is filtered.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileItem {
	#[serde(rename = "source")]
	pub source: String,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "destName")]
	pub dest_name: String,
	#[serde(rename = "fileMode")]
	pub file_mode: String,
	#[serde(rename = "lineEnding")]
	pub line_ending: String,
	#[serde(rename = "filtered")]
	pub filtered: bool,
}


// FileSet is Specifies the output directory relative to the root
//             of the root directory of the assembly. For example,
//             "log" will put the specified files in the log directory.
#[derive(Debug, Deserialize, Serialize, PartialEq)]
pub struct FileSet {
	#[serde(rename = "directory")]
	pub directory: String,
	#[serde(rename = "lineEnding")]
	pub line_ending: String,
	#[serde(rename = "outputDirectory")]
	pub output_directory: String,
	#[serde(rename = "includes")]
	pub includes: Includes,
	#[serde(rename = "excludes")]
	pub excludes: Excludes,
	#[serde(rename = "fileMode")]
	pub file_mode: String,
	#[serde(rename = "directoryMode")]
	pub directory_mode: String,
}
