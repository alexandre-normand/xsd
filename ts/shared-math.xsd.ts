// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

export type ST_Integer255 = number;

export class CT_Integer255 {
	ValAttr: number;
}

export type ST_Integer2 = number;

export class CT_Integer2 {
	ValAttr: number;
}

export type ST_SpacingRule = number;

export class CT_SpacingRule {
	ValAttr: number;
}

export type ST_UnSignedInteger = number;

export class CT_UnSignedInteger {
	ValAttr: number;
}

export type ST_Char = string;

export class CT_Char {
	ValAttr: string;
}

export class CT_OnOff {
	ValAttr: ST_OnOff | null;
}

export class CT_String {
	ValAttr: string | null;
}

export class CT_XAlign {
	ValAttr: string;
}

export class CT_YAlign {
	ValAttr: string;
}

export type ST_Shp = string;

export class CT_Shp {
	ValAttr: string;
}

export type ST_FType = string;

export class CT_FType {
	ValAttr: string;
}

export type ST_LimLoc = string;

export class CT_LimLoc {
	ValAttr: string;
}

export type ST_TopBot = string;

export class CT_TopBot {
	ValAttr: string;
}

export type ST_Script = string;

export class CT_Script {
	ValAttr: string | null;
}

export type ST_Style = string;

export class CT_Style {
	ValAttr: string | null;
}

export class CT_ManualBreak {
	AlnAtAttr: number | null;
}

export class EG_ScriptStyle {
	Scr: CT_Script;
	Sty: CT_Style;
}

export class CT_RPR {
	EG_ScriptStyle: EG_ScriptStyle;
	Lit: Array<CT_OnOff>;
	Nor: Array<CT_OnOff>;
	Brk: Array<CT_ManualBreak>;
	Aln: Array<CT_OnOff>;
}

export class CT_Text {
	XmlSpaceAttr: Space | null;
}

export class CT_R {
	WEG_RPr: EG_RPr;
	WEG_RunInnerContent: EG_RunInnerContent;
	RPr: Array<CT_RPR>;
	T: Array<CT_Text>;
}

export class CT_CtrlPr {
	WEG_RPrMath: EG_RPrMath;
}

export class CT_AccPr {
	Chr: Array<CT_Char>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Acc {
	AccPr: Array<CT_AccPr>;
	E: Array<CT_OMathArg>;
}

export class CT_BarPr {
	Pos: Array<CT_TopBot>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Bar {
	BarPr: Array<CT_BarPr>;
	E: Array<CT_OMathArg>;
}

export class CT_BoxPr {
	OpEmu: Array<CT_OnOff>;
	NoBreak: Array<CT_OnOff>;
	Diff: Array<CT_OnOff>;
	Brk: Array<CT_ManualBreak>;
	Aln: Array<CT_OnOff>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Box {
	BoxPr: Array<CT_BoxPr>;
	E: Array<CT_OMathArg>;
}

export class CT_BorderBoxPr {
	HideTop: Array<CT_OnOff>;
	HideBot: Array<CT_OnOff>;
	HideLeft: Array<CT_OnOff>;
	HideRight: Array<CT_OnOff>;
	StrikeH: Array<CT_OnOff>;
	StrikeV: Array<CT_OnOff>;
	StrikeBLTR: Array<CT_OnOff>;
	StrikeTLBR: Array<CT_OnOff>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_BorderBox {
	BorderBoxPr: Array<CT_BorderBoxPr>;
	E: Array<CT_OMathArg>;
}

export class CT_DPr {
	BegChr: Array<CT_Char>;
	SepChr: Array<CT_Char>;
	EndChr: Array<CT_Char>;
	Grow: Array<CT_OnOff>;
	Shp: Array<CT_Shp>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_D {
	DPr: Array<CT_DPr>;
	E: Array<CT_OMathArg>;
}

export class CT_EqArrPr {
	BaseJc: Array<CT_YAlign>;
	MaxDist: Array<CT_OnOff>;
	ObjDist: Array<CT_OnOff>;
	RSpRule: Array<CT_SpacingRule>;
	RSp: Array<CT_UnSignedInteger>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_EqArr {
	EqArrPr: Array<CT_EqArrPr>;
	E: Array<CT_OMathArg>;
}

export class CT_FPr {
	Type: Array<CT_FType>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_F {
	FPr: Array<CT_FPr>;
	Num: Array<CT_OMathArg>;
	Den: Array<CT_OMathArg>;
}

export class CT_FuncPr {
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Func {
	FuncPr: Array<CT_FuncPr>;
	FName: Array<CT_OMathArg>;
	E: Array<CT_OMathArg>;
}

export class CT_GroupChrPr {
	Chr: Array<CT_Char>;
	Pos: Array<CT_TopBot>;
	VertJc: Array<CT_TopBot>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_GroupChr {
	GroupChrPr: Array<CT_GroupChrPr>;
	E: Array<CT_OMathArg>;
}

export class CT_LimLowPr {
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_LimLow {
	LimLowPr: Array<CT_LimLowPr>;
	E: Array<CT_OMathArg>;
	Lim: Array<CT_OMathArg>;
}

export class CT_LimUppPr {
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_LimUpp {
	LimUppPr: Array<CT_LimUppPr>;
	E: Array<CT_OMathArg>;
	Lim: Array<CT_OMathArg>;
}

export class CT_MCPr {
	Count: Array<CT_Integer255>;
	McJc: Array<CT_XAlign>;
}

export class CT_MC {
	McPr: Array<CT_MCPr>;
}

export class CT_MCS {
	Mc: Array<CT_MC>;
}

export class CT_MPr {
	BaseJc: Array<CT_YAlign>;
	PlcHide: Array<CT_OnOff>;
	RSpRule: Array<CT_SpacingRule>;
	CGpRule: Array<CT_SpacingRule>;
	RSp: Array<CT_UnSignedInteger>;
	CSp: Array<CT_UnSignedInteger>;
	CGp: Array<CT_UnSignedInteger>;
	Mcs: Array<CT_MCS>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_MR {
	E: Array<CT_OMathArg>;
}

export class CT_M {
	MPr: Array<CT_MPr>;
	Mr: Array<CT_MR>;
}

export class CT_NaryPr {
	Chr: Array<CT_Char>;
	LimLoc: Array<CT_LimLoc>;
	Grow: Array<CT_OnOff>;
	SubHide: Array<CT_OnOff>;
	SupHide: Array<CT_OnOff>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Nary {
	NaryPr: Array<CT_NaryPr>;
	Sub: Array<CT_OMathArg>;
	Sup: Array<CT_OMathArg>;
	E: Array<CT_OMathArg>;
}

export class CT_PhantPr {
	Show: Array<CT_OnOff>;
	ZeroWid: Array<CT_OnOff>;
	ZeroAsc: Array<CT_OnOff>;
	ZeroDesc: Array<CT_OnOff>;
	Transp: Array<CT_OnOff>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Phant {
	PhantPr: Array<CT_PhantPr>;
	E: Array<CT_OMathArg>;
}

export class CT_RadPr {
	DegHide: Array<CT_OnOff>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_Rad {
	RadPr: Array<CT_RadPr>;
	Deg: Array<CT_OMathArg>;
	E: Array<CT_OMathArg>;
}

export class CT_SPrePr {
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_SPre {
	SPrePr: Array<CT_SPrePr>;
	Sub: Array<CT_OMathArg>;
	Sup: Array<CT_OMathArg>;
	E: Array<CT_OMathArg>;
}

export class CT_SSubPr {
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_SSub {
	SSubPr: Array<CT_SSubPr>;
	E: Array<CT_OMathArg>;
	Sub: Array<CT_OMathArg>;
}

export class CT_SSubSupPr {
	AlnScr: Array<CT_OnOff>;
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_SSubSup {
	SSubSupPr: Array<CT_SSubSupPr>;
	E: Array<CT_OMathArg>;
	Sub: Array<CT_OMathArg>;
	Sup: Array<CT_OMathArg>;
}

export class CT_SSupPr {
	CtrlPr: Array<CT_CtrlPr>;
}

export class CT_SSup {
	SSupPr: Array<CT_SSupPr>;
	E: Array<CT_OMathArg>;
	Sup: Array<CT_OMathArg>;
}

export class EG_OMathMathElements {
	Acc: CT_Acc;
	Bar: CT_Bar;
	Box: CT_Box;
	BorderBox: CT_BorderBox;
	D: CT_D;
	EqArr: CT_EqArr;
	F: CT_F;
	Func: CT_Func;
	GroupChr: CT_GroupChr;
	LimLow: CT_LimLow;
	LimUpp: CT_LimUpp;
	M: CT_M;
	Nary: CT_Nary;
	Phant: CT_Phant;
	Rad: CT_Rad;
	SPre: CT_SPre;
	SSub: CT_SSub;
	SSubSup: CT_SSubSup;
	SSup: CT_SSup;
	R: CT_R;
}

export class EG_OMathElements {
	EG_OMathMathElements: EG_OMathMathElements;
	WEG_PContentMath: EG_PContentMath;
}

export class CT_OMathArgPr {
	ArgSz: Array<CT_Integer2>;
}

export class CT_OMathArg {
	EG_OMathElements: Array<EG_OMathElements>;
	ArgPr: Array<CT_OMathArgPr>;
	CtrlPr: Array<CT_CtrlPr>;
}

export type ST_Jc = string;

export class CT_OMathJc {
	ValAttr: string | null;
}

export class CT_OMathParaPr {
	Jc: Array<CT_OMathJc>;
}

export class CT_TwipsMeasure {
	ValAttr: ST_TwipsMeasure;
}

export type ST_BreakBin = string;

export class CT_BreakBin {
	ValAttr: string | null;
}

export type ST_BreakBinSub = string;

export class CT_BreakBinSub {
	ValAttr: string | null;
}

export class CT_MathPr {
	MathFont: Array<CT_String>;
	BrkBin: Array<CT_BreakBin>;
	BrkBinSub: Array<CT_BreakBinSub>;
	SmallFrac: Array<CT_OnOff>;
	DispDef: Array<CT_OnOff>;
	LMargin: Array<CT_TwipsMeasure>;
	RMargin: Array<CT_TwipsMeasure>;
	DefJc: Array<CT_OMathJc>;
	PreSp: Array<CT_TwipsMeasure>;
	PostSp: Array<CT_TwipsMeasure>;
	InterSp: Array<CT_TwipsMeasure>;
	IntraSp: Array<CT_TwipsMeasure>;
	WrapIndent: Array<CT_TwipsMeasure>;
	WrapRight: Array<CT_OnOff>;
	IntLim: Array<CT_LimLoc>;
	NaryLim: Array<CT_LimLoc>;
}

export type MathPr = CT_MathPr;

export class CT_OMathPara {
	OMathParaPr: Array<CT_OMathParaPr>;
	OMath: Array<CT_OMath>;
}

export class CT_OMath {
	EG_OMathElements: Array<EG_OMathElements>;
}

export type OMathPara = CT_OMathPara;

export type OMath = CT_OMath;
