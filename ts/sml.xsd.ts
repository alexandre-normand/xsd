// Code generated by xgen. DO NOT EDIT.

export class CT_AutoFilter {
	RefAttr: string | null;
	FilterColumn: Array<CT_FilterColumn>;
	SortState: Array<CT_SortState>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_FilterColumn {
	ColIdAttr: number;
	HiddenButtonAttr: boolean | null;
	ShowButtonAttr: boolean | null;
	Filters: Array<CT_Filters>;
	Top10: Array<CT_Top10>;
	CustomFilters: Array<CT_CustomFilters>;
	DynamicFilter: Array<CT_DynamicFilter>;
	ColorFilter: Array<CT_ColorFilter>;
	IconFilter: Array<CT_IconFilter>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Filters {
	BlankAttr: boolean | null;
	CalendarTypeAttr: string | null;
	Filter: Array<CT_Filter>;
	DateGroupItem: Array<CT_DateGroupItem>;
}

export class CT_Filter {
	ValAttr: string | null;
}

export class CT_CustomFilters {
	AndAttr: boolean | null;
	CustomFilter: Array<CT_CustomFilter>;
}

export class CT_CustomFilter {
	OperatorAttr: string | null;
	ValAttr: string | null;
}

export class CT_Top10 {
	TopAttr: boolean | null;
	PercentAttr: boolean | null;
	ValAttr: number;
	FilterValAttr: number | null;
}

export class CT_ColorFilter {
	DxfIdAttr: number | null;
	CellColorAttr: boolean | null;
}

export class CT_IconFilter {
	IconSetAttr: string;
	IconIdAttr: number | null;
}

export enum ST_FilterOperator {
	equal = 'equal',
	lessThan = 'lessThan',
	lessThanOrEqual = 'lessThanOrEqual',
	notEqual = 'notEqual',
	greaterThanOrEqual = 'greaterThanOrEqual',
	greaterThan = 'greaterThan',
}

export class CT_DynamicFilter {
	TypeAttr: string;
	ValAttr: number | null;
	ValIsoAttr: string | null;
	MaxValIsoAttr: string | null;
}

export enum ST_DynamicFilterType {
	null = 'null',
	aboveAverage = 'aboveAverage',
	belowAverage = 'belowAverage',
	tomorrow = 'tomorrow',
	today = 'today',
	yesterday = 'yesterday',
	nextWeek = 'nextWeek',
	thisWeek = 'thisWeek',
	lastWeek = 'lastWeek',
	nextMonth = 'nextMonth',
	thisMonth = 'thisMonth',
	lastMonth = 'lastMonth',
	nextQuarter = 'nextQuarter',
	thisQuarter = 'thisQuarter',
	lastQuarter = 'lastQuarter',
	nextYear = 'nextYear',
	thisYear = 'thisYear',
	lastYear = 'lastYear',
	yearToDate = 'yearToDate',
	Q1 = 'Q1',
	Q2 = 'Q2',
	Q3 = 'Q3',
	Q4 = 'Q4',
	M1 = 'M1',
	M2 = 'M2',
	M3 = 'M3',
	M4 = 'M4',
	M5 = 'M5',
	M6 = 'M6',
	M7 = 'M7',
	M8 = 'M8',
	M9 = 'M9',
	M10 = 'M10',
	M11 = 'M11',
	M12 = 'M12',
}

export enum ST_IconSetType {
	3Arrows = '3Arrows',
	3ArrowsGray = '3ArrowsGray',
	3Flags = '3Flags',
	3TrafficLights1 = '3TrafficLights1',
	3TrafficLights2 = '3TrafficLights2',
	3Signs = '3Signs',
	3Symbols = '3Symbols',
	3Symbols2 = '3Symbols2',
	4Arrows = '4Arrows',
	4ArrowsGray = '4ArrowsGray',
	4RedToBlack = '4RedToBlack',
	4Rating = '4Rating',
	4TrafficLights = '4TrafficLights',
	5Arrows = '5Arrows',
	5ArrowsGray = '5ArrowsGray',
	5Rating = '5Rating',
	5Quarters = '5Quarters',
}

export class CT_SortState {
	ColumnSortAttr: boolean | null;
	CaseSensitiveAttr: boolean | null;
	SortMethodAttr: string | null;
	RefAttr: string;
	SortCondition: Array<CT_SortCondition>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SortCondition {
	DescendingAttr: boolean | null;
	SortByAttr: string | null;
	RefAttr: string;
	CustomListAttr: string | null;
	DxfIdAttr: number | null;
	IconSetAttr: string | null;
	IconIdAttr: number | null;
}

export enum ST_SortBy {
	value = 'value',
	cellColor = 'cellColor',
	fontColor = 'fontColor',
	icon = 'icon',
}

export enum ST_SortMethod {
	stroke = 'stroke',
	pinYin = 'pinYin',
	none = 'none',
}

export class CT_DateGroupItem {
	YearAttr: number;
	MonthAttr: number | null;
	DayAttr: number | null;
	HourAttr: number | null;
	MinuteAttr: number | null;
	SecondAttr: number | null;
	DateTimeGroupingAttr: string;
}

export enum ST_DateTimeGrouping {
	year = 'year',
	month = 'month',
	day = 'day',
	hour = 'hour',
	minute = 'minute',
	second = 'second',
}

export type ST_CellRef = string;

export type ST_Ref = string;

export type ST_RefA = string;

export type ST_Sqref = Array<string>;

export type ST_Formula = string;

export type ST_UnsignedIntHex = Array<any>;

export class CT_XStringElement {
	VAttr: string;
}

export class CT_Extension {
	UriAttr: string | null;
}

export class CT_ObjectAnchor {
	MoveWithCellsAttr: boolean | null;
	SizeWithCellsAttr: boolean | null;
	XdrFrom: Array<CT_Marker>;
	XdrTo: Array<CT_Marker>;
}

export class EG_ExtensionList {
	Ext: Array<CT_Extension>;
}

export class CT_ExtensionList {
	EG_ExtensionList: EG_ExtensionList;
}

export type CalcChain = CT_CalcChain;

export class CT_CalcChain {
	C: Array<CT_CalcCell>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CalcCell {
	RAttr: string;
	IAttr: number | null;
	SAttr: boolean | null;
	LAttr: boolean | null;
	TAttr: boolean | null;
	AAttr: boolean | null;
}

export type Comments = CT_Comments;

export class CT_Comments {
	Authors: Array<CT_Authors>;
	CommentList: Array<CT_CommentList>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Authors {
	Author: Array<string>;
}

export class CT_CommentList {
	Comment: Array<CT_Comment>;
}

export class CT_Comment {
	RefAttr: string;
	AuthorIdAttr: number;
	GuidAttr: string | null;
	ShapeIdAttr: number | null;
	Text: Array<CT_Rst>;
	CommentPr: Array<CT_CommentPr>;
}

export class CT_CommentPr {
	LockedAttr: boolean | null;
	DefaultSizeAttr: boolean | null;
	PrintAttr: boolean | null;
	DisabledAttr: boolean | null;
	AutoFillAttr: boolean | null;
	AutoLineAttr: boolean | null;
	AltTextAttr: string | null;
	TextHAlignAttr: string | null;
	TextVAlignAttr: string | null;
	LockTextAttr: boolean | null;
	JustLastXAttr: boolean | null;
	AutoScaleAttr: boolean | null;
	Anchor: Array<CT_ObjectAnchor>;
}

export enum ST_TextHAlign {
	left = 'left',
	center = 'center',
	right = 'right',
	justify = 'justify',
	distributed = 'distributed',
}

export enum ST_TextVAlign {
	top = 'top',
	center = 'center',
	bottom = 'bottom',
	justify = 'justify',
	distributed = 'distributed',
}

export type MapInfo = CT_MapInfo;

export class CT_MapInfo {
	SelectionNamespacesAttr: string;
	Schema: Array<CT_Schema>;
	Map: Array<CT_Map>;
}

export class CT_Schema {
	IDAttr: string;
	SchemaRefAttr: string | null;
	NamespaceAttr: string | null;
	SchemaLanguageAttr: string | null;
}

export class CT_Map {
	IDAttr: number;
	NameAttr: string;
	RootElementAttr: string;
	SchemaIDAttr: string;
	ShowImportExportValidationErrorsAttr: boolean;
	AutoFitAttr: boolean;
	AppendAttr: boolean;
	PreserveSortAFLayoutAttr: boolean;
	PreserveFormatAttr: boolean;
	DataBinding: Array<CT_DataBinding>;
}

export class CT_DataBinding {
	DataBindingNameAttr: string | null;
	FileBindingAttr: boolean | null;
	ConnectionIDAttr: number | null;
	FileBindingNameAttr: string | null;
	DataBindingLoadModeAttr: number;
}

export type Connections = CT_Connections;

export class CT_Connections {
	Connection: Array<CT_Connection>;
}

export class CT_Connection {
	IdAttr: number;
	SourceFileAttr: string | null;
	OdcFileAttr: string | null;
	KeepAliveAttr: boolean | null;
	IntervalAttr: number | null;
	NameAttr: string | null;
	DescriptionAttr: string | null;
	TypeAttr: number | null;
	ReconnectionMethodAttr: number | null;
	RefreshedVersionAttr: any;
	MinRefreshableVersionAttr: any | null;
	SavePasswordAttr: boolean | null;
	NewAttr: boolean | null;
	DeletedAttr: boolean | null;
	OnlyUseConnectionFileAttr: boolean | null;
	BackgroundAttr: boolean | null;
	RefreshOnLoadAttr: boolean | null;
	SaveDataAttr: boolean | null;
	CredentialsAttr: string | null;
	SingleSignOnIdAttr: string | null;
	DbPr: Array<CT_DbPr>;
	OlapPr: Array<CT_OlapPr>;
	WebPr: Array<CT_WebPr>;
	TextPr: Array<CT_TextPr>;
	Parameters: Array<CT_Parameters>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_CredMethod {
	integrated = 'integrated',
	none = 'none',
	stored = 'stored',
	prompt = 'prompt',
}

export class CT_DbPr {
	ConnectionAttr: string;
	CommandAttr: string | null;
	ServerCommandAttr: string | null;
	CommandTypeAttr: number | null;
}

export class CT_OlapPr {
	LocalAttr: boolean | null;
	LocalConnectionAttr: string | null;
	LocalRefreshAttr: boolean | null;
	SendLocaleAttr: boolean | null;
	RowDrillCountAttr: number | null;
	ServerFillAttr: boolean | null;
	ServerNumberFormatAttr: boolean | null;
	ServerFontAttr: boolean | null;
	ServerFontColorAttr: boolean | null;
}

export class CT_WebPr {
	XmlAttr: boolean | null;
	SourceDataAttr: boolean | null;
	ParsePreAttr: boolean | null;
	ConsecutiveAttr: boolean | null;
	FirstRowAttr: boolean | null;
	Xl97Attr: boolean | null;
	TextDatesAttr: boolean | null;
	Xl2000Attr: boolean | null;
	UrlAttr: string | null;
	PostAttr: string | null;
	HtmlTablesAttr: boolean | null;
	HtmlFormatAttr: string | null;
	EditPageAttr: string | null;
	Tables: Array<CT_Tables>;
}

export enum ST_HtmlFmt {
	none = 'none',
	rtf = 'rtf',
	all = 'all',
}

export class CT_Parameters {
	CountAttr: number | null;
	Parameter: Array<CT_Parameter>;
}

export class CT_Parameter {
	NameAttr: string | null;
	SqlTypeAttr: number | null;
	ParameterTypeAttr: string | null;
	RefreshOnChangeAttr: boolean | null;
	PromptAttr: string | null;
	BooleanAttr: boolean | null;
	DoubleAttr: number | null;
	IntegerAttr: number | null;
	StringAttr: string | null;
	CellAttr: string | null;
}

export enum ST_ParameterType {
	prompt = 'prompt',
	value = 'value',
	cell = 'cell',
}

export class CT_Tables {
	CountAttr: number | null;
	M: Array<CT_TableMissing>;
	S: Array<CT_XStringElement>;
	X: Array<CT_Index>;
}

export class CT_TableMissing {
}

export class CT_TextPr {
	PromptAttr: boolean | null;
	FileTypeAttr: string | null;
	CharacterSetAttr: string | null;
	FirstRowAttr: number | null;
	SourceFileAttr: string | null;
	DelimitedAttr: boolean | null;
	DecimalAttr: string | null;
	ThousandsAttr: string | null;
	TabAttr: boolean | null;
	SpaceAttr: boolean | null;
	CommaAttr: boolean | null;
	SemicolonAttr: boolean | null;
	ConsecutiveAttr: boolean | null;
	QualifierAttr: string | null;
	DelimiterAttr: string | null;
	TextFields: Array<CT_TextFields>;
}

export enum ST_FileType {
	mac = 'mac',
	win = 'win',
	dos = 'dos',
	lin = 'lin',
	other = 'other',
}

export enum ST_Qualifier {
	doubleQuote = 'doubleQuote',
	singleQuote = 'singleQuote',
	none = 'none',
}

export class CT_TextFields {
	CountAttr: number | null;
	TextField: Array<CT_TextField>;
}

export class CT_TextField {
	TypeAttr: string | null;
	PositionAttr: number | null;
}

export enum ST_ExternalConnectionType {
	general = 'general',
	text = 'text',
	MDY = 'MDY',
	DMY = 'DMY',
	YMD = 'YMD',
	MYD = 'MYD',
	DYM = 'DYM',
	YDM = 'YDM',
	skip = 'skip',
	EMD = 'EMD',
}

export type PivotCacheDefinition = CT_PivotCacheDefinition;

export type PivotCacheRecords = CT_PivotCacheRecords;

export type PivotTableDefinition = CT_pivotTableDefinition;

export class CT_PivotCacheDefinition {
	RIdAttr: string | null;
	InvalidAttr: boolean | null;
	SaveDataAttr: boolean | null;
	RefreshOnLoadAttr: boolean | null;
	OptimizeMemoryAttr: boolean | null;
	EnableRefreshAttr: boolean | null;
	RefreshedByAttr: string | null;
	RefreshedDateIsoAttr: string | null;
	BackgroundQueryAttr: boolean | null;
	MissingItemsLimitAttr: number | null;
	CreatedVersionAttr: any | null;
	RefreshedVersionAttr: any | null;
	MinRefreshableVersionAttr: any | null;
	RecordCountAttr: number | null;
	UpgradeOnRefreshAttr: boolean | null;
	TupleCacheAttr: boolean | null;
	SupportSubqueryAttr: boolean | null;
	SupportAdvancedDrillAttr: boolean | null;
	CacheSource: Array<CT_CacheSource>;
	CacheFields: Array<CT_CacheFields>;
	CacheHierarchies: Array<CT_CacheHierarchies>;
	Kpis: Array<CT_PCDKPIs>;
	TupleCache: Array<CT_TupleCache>;
	CalculatedItems: Array<CT_CalculatedItems>;
	CalculatedMembers: Array<CT_CalculatedMembers>;
	Dimensions: Array<CT_Dimensions>;
	MeasureGroups: Array<CT_MeasureGroups>;
	Maps: Array<CT_MeasureDimensionMaps>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CacheFields {
	CountAttr: number | null;
	CacheField: Array<CT_CacheField>;
}

export class CT_CacheField {
	NameAttr: string;
	CaptionAttr: string | null;
	PropertyNameAttr: string | null;
	ServerFieldAttr: boolean | null;
	UniqueListAttr: boolean | null;
	NumFmtIdAttr: number | null;
	FormulaAttr: string | null;
	SqlTypeAttr: number | null;
	HierarchyAttr: number | null;
	LevelAttr: number | null;
	DatabaseFieldAttr: boolean | null;
	MappingCountAttr: number | null;
	MemberPropertyFieldAttr: boolean | null;
	SharedItems: Array<CT_SharedItems>;
	FieldGroup: Array<CT_FieldGroup>;
	MpMap: Array<CT_X>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CacheSource {
	TypeAttr: string;
	ConnectionIdAttr: number | null;
	WorksheetSource: Array<CT_WorksheetSource>;
	Consolidation: Array<CT_Consolidation>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_SourceType {
	worksheet = 'worksheet',
	external = 'external',
	consolidation = 'consolidation',
	scenario = 'scenario',
}

export class CT_WorksheetSource {
	RefAttr: string | null;
	NameAttr: string | null;
	SheetAttr: string | null;
	RIdAttr: string | null;
}

export class CT_Consolidation {
	AutoPageAttr: boolean | null;
	Pages: Array<CT_Pages>;
	RangeSets: Array<CT_RangeSets>;
}

export class CT_Pages {
	CountAttr: number | null;
	Page: Array<CT_PCDSCPage>;
}

export class CT_PCDSCPage {
	CountAttr: number | null;
	PageItem: Array<CT_PageItem>;
}

export class CT_PageItem {
	NameAttr: string;
}

export class CT_RangeSets {
	CountAttr: number | null;
	RangeSet: Array<CT_RangeSet>;
}

export class CT_RangeSet {
	I1Attr: number | null;
	I2Attr: number | null;
	I3Attr: number | null;
	I4Attr: number | null;
	RefAttr: string | null;
	NameAttr: string | null;
	SheetAttr: string | null;
	RIdAttr: string | null;
}

export class CT_SharedItems {
	ContainsSemiMixedTypesAttr: boolean | null;
	ContainsNonDateAttr: boolean | null;
	ContainsDateAttr: boolean | null;
	ContainsStringAttr: boolean | null;
	ContainsBlankAttr: boolean | null;
	ContainsMixedTypesAttr: boolean | null;
	ContainsNumberAttr: boolean | null;
	ContainsIntegerAttr: boolean | null;
	MinValueAttr: number | null;
	MaxValueAttr: number | null;
	MinDateAttr: string | null;
	MaxDateAttr: string | null;
	CountAttr: number | null;
	LongTextAttr: boolean | null;
	M: Array<CT_Missing>;
	N: Array<CT_Number>;
	B: Array<CT_Boolean>;
	E: Array<CT_Error>;
	S: Array<CT_String>;
	D: Array<CT_DateTime>;
}

export class CT_Missing {
	UAttr: boolean | null;
	FAttr: boolean | null;
	CAttr: string | null;
	CpAttr: number | null;
	InAttr: number | null;
	BcAttr: Array<any> | null;
	FcAttr: Array<any> | null;
	IAttr: boolean | null;
	UnAttr: boolean | null;
	StAttr: boolean | null;
	BAttr: boolean | null;
	Tpls: Array<CT_Tuples>;
	X: Array<CT_X>;
}

export class CT_Number {
	VAttr: number;
	UAttr: boolean | null;
	FAttr: boolean | null;
	CAttr: string | null;
	CpAttr: number | null;
	InAttr: number | null;
	BcAttr: Array<any> | null;
	FcAttr: Array<any> | null;
	IAttr: boolean | null;
	UnAttr: boolean | null;
	StAttr: boolean | null;
	BAttr: boolean | null;
	Tpls: Array<CT_Tuples>;
	X: Array<CT_X>;
}

export class CT_Boolean {
	VAttr: boolean;
	UAttr: boolean | null;
	FAttr: boolean | null;
	CAttr: string | null;
	CpAttr: number | null;
	X: Array<CT_X>;
}

export class CT_Error {
	VAttr: string;
	UAttr: boolean | null;
	FAttr: boolean | null;
	CAttr: string | null;
	CpAttr: number | null;
	InAttr: number | null;
	BcAttr: Array<any> | null;
	FcAttr: Array<any> | null;
	IAttr: boolean | null;
	UnAttr: boolean | null;
	StAttr: boolean | null;
	BAttr: boolean | null;
	Tpls: Array<CT_Tuples>;
	X: Array<CT_X>;
}

export class CT_String {
	VAttr: string;
	UAttr: boolean | null;
	FAttr: boolean | null;
	CAttr: string | null;
	CpAttr: number | null;
	InAttr: number | null;
	BcAttr: Array<any> | null;
	FcAttr: Array<any> | null;
	IAttr: boolean | null;
	UnAttr: boolean | null;
	StAttr: boolean | null;
	BAttr: boolean | null;
	Tpls: Array<CT_Tuples>;
	X: Array<CT_X>;
}

export class CT_DateTime {
	VAttr: string;
	UAttr: boolean | null;
	FAttr: boolean | null;
	CAttr: string | null;
	CpAttr: number | null;
	X: Array<CT_X>;
}

export class CT_FieldGroup {
	ParAttr: number | null;
	BaseAttr: number | null;
	RangePr: Array<CT_RangePr>;
	DiscretePr: Array<CT_DiscretePr>;
	GroupItems: Array<CT_GroupItems>;
}

export class CT_RangePr {
	AutoStartAttr: boolean | null;
	AutoEndAttr: boolean | null;
	GroupByAttr: string | null;
	StartNumAttr: number | null;
	EndNumAttr: number | null;
	StartDateAttr: string | null;
	EndDateAttr: string | null;
	GroupIntervalAttr: number | null;
}

export enum ST_GroupBy {
	range = 'range',
	seconds = 'seconds',
	minutes = 'minutes',
	hours = 'hours',
	days = 'days',
	months = 'months',
	quarters = 'quarters',
	years = 'years',
}

export class CT_DiscretePr {
	CountAttr: number | null;
	X: Array<CT_Index>;
}

export class CT_GroupItems {
	CountAttr: number | null;
	M: Array<CT_Missing>;
	N: Array<CT_Number>;
	B: Array<CT_Boolean>;
	E: Array<CT_Error>;
	S: Array<CT_String>;
	D: Array<CT_DateTime>;
}

export class CT_PivotCacheRecords {
	CountAttr: number | null;
	R: Array<CT_Record>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Record {
	M: Array<CT_Missing>;
	N: Array<CT_Number>;
	B: Array<CT_Boolean>;
	E: Array<CT_Error>;
	S: Array<CT_String>;
	D: Array<CT_DateTime>;
	X: Array<CT_Index>;
}

export class CT_PCDKPIs {
	CountAttr: number | null;
	Kpi: Array<CT_PCDKPI>;
}

export class CT_PCDKPI {
	UniqueNameAttr: string;
	CaptionAttr: string | null;
	DisplayFolderAttr: string | null;
	MeasureGroupAttr: string | null;
	ParentAttr: string | null;
	ValueAttr: string;
	GoalAttr: string | null;
	StatusAttr: string | null;
	TrendAttr: string | null;
	WeightAttr: string | null;
	TimeAttr: string | null;
}

export class CT_CacheHierarchies {
	CountAttr: number | null;
	CacheHierarchy: Array<CT_CacheHierarchy>;
}

export class CT_CacheHierarchy {
	UniqueNameAttr: string;
	CaptionAttr: string | null;
	MeasureAttr: boolean | null;
	SetAttr: boolean | null;
	ParentSetAttr: number | null;
	IconSetAttr: number | null;
	AttributeAttr: boolean | null;
	TimeAttr: boolean | null;
	KeyAttributeAttr: boolean | null;
	DefaultMemberUniqueNameAttr: string | null;
	AllUniqueNameAttr: string | null;
	AllCaptionAttr: string | null;
	DimensionUniqueNameAttr: string | null;
	DisplayFolderAttr: string | null;
	MeasureGroupAttr: string | null;
	MeasuresAttr: boolean | null;
	CountAttr: number;
	OneFieldAttr: boolean | null;
	MemberValueDatatypeAttr: number | null;
	UnbalancedAttr: boolean | null;
	UnbalancedGroupAttr: boolean | null;
	HiddenAttr: boolean | null;
	FieldsUsage: Array<CT_FieldsUsage>;
	GroupLevels: Array<CT_GroupLevels>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_FieldsUsage {
	CountAttr: number | null;
	FieldUsage: Array<CT_FieldUsage>;
}

export class CT_FieldUsage {
	XAttr: number;
}

export class CT_GroupLevels {
	CountAttr: number | null;
	GroupLevel: Array<CT_GroupLevel>;
}

export class CT_GroupLevel {
	UniqueNameAttr: string;
	CaptionAttr: string;
	UserAttr: boolean | null;
	CustomRollUpAttr: boolean | null;
	Groups: Array<CT_Groups>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Groups {
	CountAttr: number | null;
	Group: Array<CT_LevelGroup>;
}

export class CT_LevelGroup {
	NameAttr: string;
	UniqueNameAttr: string;
	CaptionAttr: string;
	UniqueParentAttr: string | null;
	IdAttr: number | null;
	GroupMembers: Array<CT_GroupMembers>;
}

export class CT_GroupMembers {
	CountAttr: number | null;
	GroupMember: Array<CT_GroupMember>;
}

export class CT_GroupMember {
	UniqueNameAttr: string;
	GroupAttr: boolean | null;
}

export class CT_TupleCache {
	Entries: Array<CT_PCDSDTCEntries>;
	Sets: Array<CT_Sets>;
	QueryCache: Array<CT_QueryCache>;
	ServerFormats: Array<CT_ServerFormats>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ServerFormat {
	CultureAttr: string | null;
	FormatAttr: string | null;
}

export class CT_ServerFormats {
	CountAttr: number | null;
	ServerFormat: Array<CT_ServerFormat>;
}

export class CT_PCDSDTCEntries {
	CountAttr: number | null;
	M: Array<CT_Missing>;
	N: Array<CT_Number>;
	E: Array<CT_Error>;
	S: Array<CT_String>;
}

export class CT_Tuples {
	CAttr: number | null;
	Tpl: Array<CT_Tuple>;
}

export class CT_Tuple {
	FldAttr: number | null;
	HierAttr: number | null;
	ItemAttr: number;
}

export class CT_Sets {
	CountAttr: number | null;
	Set: Array<CT_Set>;
}

export class CT_Set {
	CountAttr: number | null;
	MaxRankAttr: number;
	SetDefinitionAttr: string;
	SortTypeAttr: string | null;
	QueryFailedAttr: boolean | null;
	Tpls: Array<CT_Tuples>;
	SortByTuple: Array<CT_Tuples>;
}

export enum ST_SortType {
	none = 'none',
	ascending = 'ascending',
	descending = 'descending',
	ascendingAlpha = 'ascendingAlpha',
	descendingAlpha = 'descendingAlpha',
	ascendingNatural = 'ascendingNatural',
	descendingNatural = 'descendingNatural',
}

export class CT_QueryCache {
	CountAttr: number | null;
	Query: Array<CT_Query>;
}

export class CT_Query {
	MdxAttr: string;
	Tpls: Array<CT_Tuples>;
}

export class CT_CalculatedItems {
	CountAttr: number | null;
	CalculatedItem: Array<CT_CalculatedItem>;
}

export class CT_CalculatedItem {
	FieldAttr: number | null;
	FormulaAttr: string | null;
	PivotArea: Array<CT_PivotArea>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CalculatedMembers {
	CountAttr: number | null;
	CalculatedMember: Array<CT_CalculatedMember>;
}

export class CT_CalculatedMember {
	NameAttr: string;
	MdxAttr: string;
	MemberNameAttr: string | null;
	HierarchyAttr: string | null;
	ParentAttr: string | null;
	SolveOrderAttr: number | null;
	SetAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_pivotTableDefinition {
	AG_AutoFormat: AG_AutoFormat;
	NameAttr: string;
	CacheIdAttr: number;
	DataOnRowsAttr: boolean | null;
	DataPositionAttr: number | null;
	DataCaptionAttr: string;
	GrandTotalCaptionAttr: string | null;
	ErrorCaptionAttr: string | null;
	ShowErrorAttr: boolean | null;
	MissingCaptionAttr: string | null;
	ShowMissingAttr: boolean | null;
	PageStyleAttr: string | null;
	PivotTableStyleAttr: string | null;
	VacatedStyleAttr: string | null;
	TagAttr: string | null;
	UpdatedVersionAttr: any | null;
	MinRefreshableVersionAttr: any | null;
	AsteriskTotalsAttr: boolean | null;
	ShowItemsAttr: boolean | null;
	EditDataAttr: boolean | null;
	DisableFieldListAttr: boolean | null;
	ShowCalcMbrsAttr: boolean | null;
	VisualTotalsAttr: boolean | null;
	ShowMultipleLabelAttr: boolean | null;
	ShowDataDropDownAttr: boolean | null;
	ShowDrillAttr: boolean | null;
	PrintDrillAttr: boolean | null;
	ShowMemberPropertyTipsAttr: boolean | null;
	ShowDataTipsAttr: boolean | null;
	EnableWizardAttr: boolean | null;
	EnableDrillAttr: boolean | null;
	EnableFieldPropertiesAttr: boolean | null;
	PreserveFormattingAttr: boolean | null;
	UseAutoFormattingAttr: boolean | null;
	PageWrapAttr: number | null;
	PageOverThenDownAttr: boolean | null;
	SubtotalHiddenItemsAttr: boolean | null;
	RowGrandTotalsAttr: boolean | null;
	ColGrandTotalsAttr: boolean | null;
	FieldPrintTitlesAttr: boolean | null;
	ItemPrintTitlesAttr: boolean | null;
	MergeItemAttr: boolean | null;
	ShowDropZonesAttr: boolean | null;
	CreatedVersionAttr: any | null;
	IndentAttr: number | null;
	ShowEmptyRowAttr: boolean | null;
	ShowEmptyColAttr: boolean | null;
	ShowHeadersAttr: boolean | null;
	CompactAttr: boolean | null;
	OutlineAttr: boolean | null;
	OutlineDataAttr: boolean | null;
	CompactDataAttr: boolean | null;
	PublishedAttr: boolean | null;
	GridDropZonesAttr: boolean | null;
	ImmersiveAttr: boolean | null;
	MultipleFieldFiltersAttr: boolean | null;
	ChartFormatAttr: number | null;
	RowHeaderCaptionAttr: string | null;
	ColHeaderCaptionAttr: string | null;
	FieldListSortAscendingAttr: boolean | null;
	MdxSubqueriesAttr: boolean | null;
	CustomListSortAttr: boolean | null;
	Location: Array<CT_Location>;
	PivotFields: Array<CT_PivotFields>;
	RowFields: Array<CT_RowFields>;
	RowItems: Array<CT_rowItems>;
	ColFields: Array<CT_ColFields>;
	ColItems: Array<CT_colItems>;
	PageFields: Array<CT_PageFields>;
	DataFields: Array<CT_DataFields>;
	Formats: Array<CT_Formats>;
	ConditionalFormats: Array<CT_ConditionalFormats>;
	ChartFormats: Array<CT_ChartFormats>;
	PivotHierarchies: Array<CT_PivotHierarchies>;
	PivotTableStyleInfo: Array<CT_PivotTableStyle>;
	Filters: Array<CT_PivotFilters>;
	RowHierarchiesUsage: Array<CT_RowHierarchiesUsage>;
	ColHierarchiesUsage: Array<CT_ColHierarchiesUsage>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Location {
	RefAttr: string;
	FirstHeaderRowAttr: number;
	FirstDataRowAttr: number;
	FirstDataColAttr: number;
	RowPageCountAttr: number | null;
	ColPageCountAttr: number | null;
}

export class CT_PivotFields {
	CountAttr: number | null;
	PivotField: Array<CT_PivotField>;
}

export class CT_PivotField {
	NameAttr: string | null;
	AxisAttr: string | null;
	DataFieldAttr: boolean | null;
	SubtotalCaptionAttr: string | null;
	ShowDropDownsAttr: boolean | null;
	HiddenLevelAttr: boolean | null;
	UniqueMemberPropertyAttr: string | null;
	CompactAttr: boolean | null;
	AllDrilledAttr: boolean | null;
	NumFmtIdAttr: number | null;
	OutlineAttr: boolean | null;
	SubtotalTopAttr: boolean | null;
	DragToRowAttr: boolean | null;
	DragToColAttr: boolean | null;
	MultipleItemSelectionAllowedAttr: boolean | null;
	DragToPageAttr: boolean | null;
	DragToDataAttr: boolean | null;
	DragOffAttr: boolean | null;
	ShowAllAttr: boolean | null;
	InsertBlankRowAttr: boolean | null;
	ServerFieldAttr: boolean | null;
	InsertPageBreakAttr: boolean | null;
	AutoShowAttr: boolean | null;
	TopAutoShowAttr: boolean | null;
	HideNewItemsAttr: boolean | null;
	MeasureFilterAttr: boolean | null;
	IncludeNewItemsInFilterAttr: boolean | null;
	ItemPageCountAttr: number | null;
	SortTypeAttr: string | null;
	DataSourceSortAttr: boolean | null;
	NonAutoSortDefaultAttr: boolean | null;
	RankByAttr: number | null;
	DefaultSubtotalAttr: boolean | null;
	SumSubtotalAttr: boolean | null;
	CountASubtotalAttr: boolean | null;
	AvgSubtotalAttr: boolean | null;
	MaxSubtotalAttr: boolean | null;
	MinSubtotalAttr: boolean | null;
	ProductSubtotalAttr: boolean | null;
	CountSubtotalAttr: boolean | null;
	StdDevSubtotalAttr: boolean | null;
	StdDevPSubtotalAttr: boolean | null;
	VarSubtotalAttr: boolean | null;
	VarPSubtotalAttr: boolean | null;
	ShowPropCellAttr: boolean | null;
	ShowPropTipAttr: boolean | null;
	ShowPropAsCaptionAttr: boolean | null;
	DefaultAttributeDrillStateAttr: boolean | null;
	Items: Array<CT_Items>;
	AutoSortScope: Array<CT_AutoSortScope>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_AutoSortScope {
	PivotArea: Array<CT_PivotArea>;
}

export class CT_Items {
	CountAttr: number | null;
	Item: Array<CT_Item>;
}

export class CT_Item {
	NAttr: string | null;
	TAttr: string | null;
	HAttr: boolean | null;
	SAttr: boolean | null;
	SdAttr: boolean | null;
	FAttr: boolean | null;
	MAttr: boolean | null;
	CAttr: boolean | null;
	XAttr: number | null;
	DAttr: boolean | null;
	EAttr: boolean | null;
}

export class CT_PageFields {
	CountAttr: number | null;
	PageField: Array<CT_PageField>;
}

export class CT_PageField {
	FldAttr: number;
	ItemAttr: number | null;
	HierAttr: number | null;
	NameAttr: string | null;
	CapAttr: string | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_DataFields {
	CountAttr: number | null;
	DataField: Array<CT_DataField>;
}

export class CT_DataField {
	NameAttr: string | null;
	FldAttr: number;
	SubtotalAttr: string | null;
	ShowDataAsAttr: string | null;
	BaseFieldAttr: number | null;
	BaseItemAttr: number | null;
	NumFmtIdAttr: number | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_rowItems {
	CountAttr: number | null;
	I: Array<CT_I>;
}

export class CT_colItems {
	CountAttr: number | null;
	I: Array<CT_I>;
}

export class CT_I {
	TAttr: string | null;
	RAttr: number | null;
	IAttr: number | null;
	X: Array<CT_X>;
}

export class CT_X {
	VAttr: number | null;
}

export class CT_RowFields {
	CountAttr: number | null;
	Field: Array<CT_Field>;
}

export class CT_ColFields {
	CountAttr: number | null;
	Field: Array<CT_Field>;
}

export class CT_Field {
	XAttr: number;
}

export class CT_Formats {
	CountAttr: number | null;
	Format: Array<CT_Format>;
}

export class CT_Format {
	ActionAttr: string | null;
	DxfIdAttr: number | null;
	PivotArea: Array<CT_PivotArea>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ConditionalFormats {
	CountAttr: number | null;
	ConditionalFormat: Array<CT_ConditionalFormat>;
}

export class CT_ConditionalFormat {
	ScopeAttr: string | null;
	TypeAttr: string | null;
	PriorityAttr: number;
	PivotAreas: Array<CT_PivotAreas>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PivotAreas {
	CountAttr: number | null;
	PivotArea: Array<CT_PivotArea>;
}

export enum ST_Scope {
	selection = 'selection',
	data = 'data',
	field = 'field',
}

export enum ST_Type {
	none = 'none',
	all = 'all',
	row = 'row',
	column = 'column',
}

export class CT_ChartFormats {
	CountAttr: number | null;
	ChartFormat: Array<CT_ChartFormat>;
}

export class CT_ChartFormat {
	ChartAttr: number;
	FormatAttr: number;
	SeriesAttr: boolean | null;
	PivotArea: Array<CT_PivotArea>;
}

export class CT_PivotHierarchies {
	CountAttr: number | null;
	PivotHierarchy: Array<CT_PivotHierarchy>;
}

export class CT_PivotHierarchy {
	OutlineAttr: boolean | null;
	MultipleItemSelectionAllowedAttr: boolean | null;
	SubtotalTopAttr: boolean | null;
	ShowInFieldListAttr: boolean | null;
	DragToRowAttr: boolean | null;
	DragToColAttr: boolean | null;
	DragToPageAttr: boolean | null;
	DragToDataAttr: boolean | null;
	DragOffAttr: boolean | null;
	IncludeNewItemsInFilterAttr: boolean | null;
	CaptionAttr: string | null;
	Mps: Array<CT_MemberProperties>;
	Members: Array<CT_Members>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_RowHierarchiesUsage {
	CountAttr: number | null;
	RowHierarchyUsage: Array<CT_HierarchyUsage>;
}

export class CT_ColHierarchiesUsage {
	CountAttr: number | null;
	ColHierarchyUsage: Array<CT_HierarchyUsage>;
}

export class CT_HierarchyUsage {
	HierarchyUsageAttr: number;
}

export class CT_MemberProperties {
	CountAttr: number | null;
	Mp: Array<CT_MemberProperty>;
}

export class CT_MemberProperty {
	NameAttr: string | null;
	ShowCellAttr: boolean | null;
	ShowTipAttr: boolean | null;
	ShowAsCaptionAttr: boolean | null;
	NameLenAttr: number | null;
	PPosAttr: number | null;
	PLenAttr: number | null;
	LevelAttr: number | null;
	FieldAttr: number;
}

export class CT_Members {
	CountAttr: number | null;
	LevelAttr: number | null;
	Member: Array<CT_Member>;
}

export class CT_Member {
	NameAttr: string;
}

export class CT_Dimensions {
	CountAttr: number | null;
	Dimension: Array<CT_PivotDimension>;
}

export class CT_PivotDimension {
	MeasureAttr: boolean | null;
	NameAttr: string;
	UniqueNameAttr: string;
	CaptionAttr: string;
}

export class CT_MeasureGroups {
	CountAttr: number | null;
	MeasureGroup: Array<CT_MeasureGroup>;
}

export class CT_MeasureDimensionMaps {
	CountAttr: number | null;
	Map: Array<CT_MeasureDimensionMap>;
}

export class CT_MeasureGroup {
	NameAttr: string;
	CaptionAttr: string;
}

export class CT_MeasureDimensionMap {
	MeasureGroupAttr: number | null;
	DimensionAttr: number | null;
}

export class CT_PivotTableStyle {
	NameAttr: string | null;
	ShowRowHeadersAttr: boolean | null;
	ShowColHeadersAttr: boolean | null;
	ShowRowStripesAttr: boolean | null;
	ShowColStripesAttr: boolean | null;
	ShowLastColumnAttr: boolean | null;
}

export class CT_PivotFilters {
	CountAttr: number | null;
	Filter: Array<CT_PivotFilter>;
}

export class CT_PivotFilter {
	FldAttr: number;
	MpFldAttr: number | null;
	TypeAttr: string;
	EvalOrderAttr: number | null;
	IdAttr: number;
	IMeasureHierAttr: number | null;
	IMeasureFldAttr: number | null;
	NameAttr: string | null;
	DescriptionAttr: string | null;
	StringValue1Attr: string | null;
	StringValue2Attr: string | null;
	AutoFilter: Array<CT_AutoFilter>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_ShowDataAs {
	normal = 'normal',
	difference = 'difference',
	percent = 'percent',
	percentDiff = 'percentDiff',
	runTotal = 'runTotal',
	percentOfRow = 'percentOfRow',
	percentOfCol = 'percentOfCol',
	percentOfTotal = 'percentOfTotal',
	index = 'index',
}

export enum ST_ItemType {
	data = 'data',
	default = 'default',
	sum = 'sum',
	countA = 'countA',
	avg = 'avg',
	max = 'max',
	min = 'min',
	product = 'product',
	count = 'count',
	stdDev = 'stdDev',
	stdDevP = 'stdDevP',
	var = 'var',
	varP = 'varP',
	grand = 'grand',
	blank = 'blank',
}

export enum ST_FormatAction {
	blank = 'blank',
	formatting = 'formatting',
	drill = 'drill',
	formula = 'formula',
}

export enum ST_FieldSortType {
	manual = 'manual',
	ascending = 'ascending',
	descending = 'descending',
}

export enum ST_PivotFilterType {
	unknown = 'unknown',
	count = 'count',
	percent = 'percent',
	sum = 'sum',
	captionEqual = 'captionEqual',
	captionNotEqual = 'captionNotEqual',
	captionBeginsWith = 'captionBeginsWith',
	captionNotBeginsWith = 'captionNotBeginsWith',
	captionEndsWith = 'captionEndsWith',
	captionNotEndsWith = 'captionNotEndsWith',
	captionContains = 'captionContains',
	captionNotContains = 'captionNotContains',
	captionGreaterThan = 'captionGreaterThan',
	captionGreaterThanOrEqual = 'captionGreaterThanOrEqual',
	captionLessThan = 'captionLessThan',
	captionLessThanOrEqual = 'captionLessThanOrEqual',
	captionBetween = 'captionBetween',
	captionNotBetween = 'captionNotBetween',
	valueEqual = 'valueEqual',
	valueNotEqual = 'valueNotEqual',
	valueGreaterThan = 'valueGreaterThan',
	valueGreaterThanOrEqual = 'valueGreaterThanOrEqual',
	valueLessThan = 'valueLessThan',
	valueLessThanOrEqual = 'valueLessThanOrEqual',
	valueBetween = 'valueBetween',
	valueNotBetween = 'valueNotBetween',
	dateEqual = 'dateEqual',
	dateNotEqual = 'dateNotEqual',
	dateOlderThan = 'dateOlderThan',
	dateOlderThanOrEqual = 'dateOlderThanOrEqual',
	dateNewerThan = 'dateNewerThan',
	dateNewerThanOrEqual = 'dateNewerThanOrEqual',
	dateBetween = 'dateBetween',
	dateNotBetween = 'dateNotBetween',
	tomorrow = 'tomorrow',
	today = 'today',
	yesterday = 'yesterday',
	nextWeek = 'nextWeek',
	thisWeek = 'thisWeek',
	lastWeek = 'lastWeek',
	nextMonth = 'nextMonth',
	thisMonth = 'thisMonth',
	lastMonth = 'lastMonth',
	nextQuarter = 'nextQuarter',
	thisQuarter = 'thisQuarter',
	lastQuarter = 'lastQuarter',
	nextYear = 'nextYear',
	thisYear = 'thisYear',
	lastYear = 'lastYear',
	yearToDate = 'yearToDate',
	Q1 = 'Q1',
	Q2 = 'Q2',
	Q3 = 'Q3',
	Q4 = 'Q4',
	M1 = 'M1',
	M2 = 'M2',
	M3 = 'M3',
	M4 = 'M4',
	M5 = 'M5',
	M6 = 'M6',
	M7 = 'M7',
	M8 = 'M8',
	M9 = 'M9',
	M10 = 'M10',
	M11 = 'M11',
	M12 = 'M12',
}

export class CT_PivotArea {
	FieldAttr: number | null;
	TypeAttr: string | null;
	DataOnlyAttr: boolean | null;
	LabelOnlyAttr: boolean | null;
	GrandRowAttr: boolean | null;
	GrandColAttr: boolean | null;
	CacheIndexAttr: boolean | null;
	OutlineAttr: boolean | null;
	OffsetAttr: string | null;
	CollapsedLevelsAreSubtotalsAttr: boolean | null;
	AxisAttr: string | null;
	FieldPositionAttr: number | null;
	References: Array<CT_PivotAreaReferences>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_PivotAreaType {
	none = 'none',
	normal = 'normal',
	data = 'data',
	all = 'all',
	origin = 'origin',
	button = 'button',
	topEnd = 'topEnd',
}

export class CT_PivotAreaReferences {
	CountAttr: number | null;
	Reference: Array<CT_PivotAreaReference>;
}

export class CT_PivotAreaReference {
	FieldAttr: number | null;
	CountAttr: number | null;
	SelectedAttr: boolean | null;
	ByPositionAttr: boolean | null;
	RelativeAttr: boolean | null;
	DefaultSubtotalAttr: boolean | null;
	SumSubtotalAttr: boolean | null;
	CountASubtotalAttr: boolean | null;
	AvgSubtotalAttr: boolean | null;
	MaxSubtotalAttr: boolean | null;
	MinSubtotalAttr: boolean | null;
	ProductSubtotalAttr: boolean | null;
	CountSubtotalAttr: boolean | null;
	StdDevSubtotalAttr: boolean | null;
	StdDevPSubtotalAttr: boolean | null;
	VarSubtotalAttr: boolean | null;
	VarPSubtotalAttr: boolean | null;
	X: Array<CT_Index>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Index {
	VAttr: number;
}

export enum ST_Axis {
	axisRow = 'axisRow',
	axisCol = 'axisCol',
	axisPage = 'axisPage',
	axisValues = 'axisValues',
}

export type QueryTable = CT_QueryTable;

export class CT_QueryTable {
	AG_AutoFormat: AG_AutoFormat;
	NameAttr: string;
	HeadersAttr: boolean | null;
	RowNumbersAttr: boolean | null;
	DisableRefreshAttr: boolean | null;
	BackgroundRefreshAttr: boolean | null;
	FirstBackgroundRefreshAttr: boolean | null;
	RefreshOnLoadAttr: boolean | null;
	GrowShrinkTypeAttr: string | null;
	FillFormulasAttr: boolean | null;
	RemoveDataOnSaveAttr: boolean | null;
	DisableEditAttr: boolean | null;
	PreserveFormattingAttr: boolean | null;
	AdjustColumnWidthAttr: boolean | null;
	IntermediateAttr: boolean | null;
	ConnectionIdAttr: number;
	QueryTableRefresh: Array<CT_QueryTableRefresh>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_QueryTableRefresh {
	PreserveSortFilterLayoutAttr: boolean | null;
	FieldIdWrappedAttr: boolean | null;
	HeadersInLastRefreshAttr: boolean | null;
	MinimumVersionAttr: any | null;
	NextIdAttr: number | null;
	UnboundColumnsLeftAttr: number | null;
	UnboundColumnsRightAttr: number | null;
	QueryTableFields: Array<CT_QueryTableFields>;
	QueryTableDeletedFields: Array<CT_QueryTableDeletedFields>;
	SortState: Array<CT_SortState>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_QueryTableDeletedFields {
	CountAttr: number | null;
	DeletedField: Array<CT_DeletedField>;
}

export class CT_DeletedField {
	NameAttr: string;
}

export class CT_QueryTableFields {
	CountAttr: number | null;
	QueryTableField: Array<CT_QueryTableField>;
}

export class CT_QueryTableField {
	IdAttr: number;
	NameAttr: string | null;
	DataBoundAttr: boolean | null;
	RowNumbersAttr: boolean | null;
	FillFormulasAttr: boolean | null;
	ClippedAttr: boolean | null;
	TableColumnIdAttr: number | null;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_GrowShrinkType {
	insertDelete = 'insertDelete',
	insertClear = 'insertClear',
	overwriteClear = 'overwriteClear',
}

export type Sst = CT_Sst;

export class CT_Sst {
	CountAttr: number | null;
	UniqueCountAttr: number | null;
	Si: Array<CT_Rst>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_PhoneticType {
	halfwidthKatakana = 'halfwidthKatakana',
	fullwidthKatakana = 'fullwidthKatakana',
	Hiragana = 'Hiragana',
	noConversion = 'noConversion',
}

export enum ST_PhoneticAlignment {
	noControl = 'noControl',
	left = 'left',
	center = 'center',
	distributed = 'distributed',
}

export class CT_PhoneticRun {
	SbAttr: number;
	EbAttr: number;
	T: Array<string>;
}

export class CT_RElt {
	RPr: Array<CT_RPrElt>;
	T: Array<string>;
}

export class CT_RPrElt {
	RFont: Array<CT_FontName>;
	Charset: Array<CT_IntProperty>;
	Family: Array<CT_IntProperty>;
	B: Array<CT_BooleanProperty>;
	I: Array<CT_BooleanProperty>;
	Strike: Array<CT_BooleanProperty>;
	Outline: Array<CT_BooleanProperty>;
	Shadow: Array<CT_BooleanProperty>;
	Condense: Array<CT_BooleanProperty>;
	Extend: Array<CT_BooleanProperty>;
	Color: Array<CT_Color>;
	Sz: Array<CT_FontSize>;
	U: Array<CT_UnderlineProperty>;
	VertAlign: Array<CT_VerticalAlignFontProperty>;
	Scheme: Array<CT_FontScheme>;
}

export class CT_Rst {
	T: Array<string>;
	R: Array<CT_RElt>;
	RPh: Array<CT_PhoneticRun>;
	PhoneticPr: Array<CT_PhoneticPr>;
}

export class CT_PhoneticPr {
	FontIdAttr: number;
	TypeAttr: string | null;
	AlignmentAttr: string | null;
}

export type Headers = CT_RevisionHeaders;

export type Revisions = CT_Revisions;

export class CT_RevisionHeaders {
	GuidAttr: string;
	LastGuidAttr: string | null;
	SharedAttr: boolean | null;
	DiskRevisionsAttr: boolean | null;
	HistoryAttr: boolean | null;
	TrackRevisionsAttr: boolean | null;
	ExclusiveAttr: boolean | null;
	RevisionIdAttr: number | null;
	VersionAttr: number | null;
	KeepChangeHistoryAttr: boolean | null;
	ProtectedAttr: boolean | null;
	PreserveHistoryAttr: number | null;
	Header: Array<CT_RevisionHeader>;
}

export class CT_Revisions {
	Rrc: Array<CT_RevisionRowColumn>;
	Rm: Array<CT_RevisionMove>;
	Rcv: Array<CT_RevisionCustomView>;
	Rsnm: Array<CT_RevisionSheetRename>;
	Ris: Array<CT_RevisionInsertSheet>;
	Rcc: Array<CT_RevisionCellChange>;
	Rfmt: Array<CT_RevisionFormatting>;
	Raf: Array<CT_RevisionAutoFormatting>;
	Rdn: Array<CT_RevisionDefinedName>;
	Rcmt: Array<CT_RevisionComment>;
	Rqt: Array<CT_RevisionQueryTableField>;
	Rcft: Array<CT_RevisionConflict>;
}

export class AG_RevData {
	RIdAttr: number;
	UaAttr: boolean | null;
	RaAttr: boolean | null;
}

export class CT_RevisionHeader {
	GuidAttr: string;
	DateTimeAttr: string;
	MaxSheetIdAttr: number;
	UserNameAttr: string;
	RIdAttr: string;
	MinRIdAttr: number | null;
	MaxRIdAttr: number | null;
	SheetIdMap: Array<CT_SheetIdMap>;
	ReviewedList: Array<CT_ReviewedRevisions>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SheetIdMap {
	CountAttr: number | null;
	SheetId: Array<CT_SheetId>;
}

export class CT_SheetId {
	ValAttr: number;
}

export class CT_ReviewedRevisions {
	CountAttr: number | null;
	Reviewed: Array<CT_Reviewed>;
}

export class CT_Reviewed {
	RIdAttr: number;
}

export class CT_UndoInfo {
	IndexAttr: number;
	ExpAttr: string;
	Ref3DAttr: boolean | null;
	ArrayAttr: boolean | null;
	VAttr: boolean | null;
	NfAttr: boolean | null;
	CsAttr: boolean | null;
	DrAttr: string;
	DnAttr: string | null;
	RAttr: string | null;
	SIdAttr: number | null;
}

export class CT_RevisionRowColumn {
	AG_RevData: AG_RevData;
	SIdAttr: number;
	EolAttr: boolean | null;
	RefAttr: string;
	ActionAttr: string;
	EdgeAttr: boolean | null;
	Undo: Array<CT_UndoInfo>;
	Rcc: Array<CT_RevisionCellChange>;
	Rfmt: Array<CT_RevisionFormatting>;
}

export class CT_RevisionMove {
	AG_RevData: AG_RevData;
	SheetIdAttr: number;
	SourceAttr: string;
	DestinationAttr: string;
	SourceSheetIdAttr: number | null;
	Undo: Array<CT_UndoInfo>;
	Rcc: Array<CT_RevisionCellChange>;
	Rfmt: Array<CT_RevisionFormatting>;
}

export class CT_RevisionCustomView {
	GuidAttr: string;
	ActionAttr: string;
}

export class CT_RevisionSheetRename {
	AG_RevData: AG_RevData;
	SheetIdAttr: number;
	OldNameAttr: string;
	NewNameAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_RevisionInsertSheet {
	AG_RevData: AG_RevData;
	SheetIdAttr: number;
	NameAttr: string;
	SheetPositionAttr: number;
}

export class CT_RevisionCellChange {
	AG_RevData: AG_RevData;
	SIdAttr: number;
	OdxfAttr: boolean | null;
	XfDxfAttr: boolean | null;
	SAttr: boolean | null;
	DxfAttr: boolean | null;
	NumFmtIdAttr: number | null;
	QuotePrefixAttr: boolean | null;
	OldQuotePrefixAttr: boolean | null;
	PhAttr: boolean | null;
	OldPhAttr: boolean | null;
	EndOfListFormulaUpdateAttr: boolean | null;
	Oc: Array<CT_Cell>;
	Nc: Array<CT_Cell>;
	Odxf: Array<CT_Dxf>;
	Ndxf: Array<CT_Dxf>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_RevisionFormatting {
	SheetIdAttr: number;
	XfDxfAttr: boolean | null;
	SAttr: boolean | null;
	SqrefAttr: ST_Sqref;
	StartAttr: number | null;
	LengthAttr: number | null;
	Dxf: Array<CT_Dxf>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_RevisionAutoFormatting {
	AG_AutoFormat: AG_AutoFormat;
	SheetIdAttr: number;
	RefAttr: string;
}

export class CT_RevisionComment {
	SheetIdAttr: number;
	CellAttr: string;
	GuidAttr: string;
	ActionAttr: string | null;
	AlwaysShowAttr: boolean | null;
	OldAttr: boolean | null;
	HiddenRowAttr: boolean | null;
	HiddenColumnAttr: boolean | null;
	AuthorAttr: string;
	OldLengthAttr: number | null;
	NewLengthAttr: number | null;
}

export class CT_RevisionDefinedName {
	AG_RevData: AG_RevData;
	LocalSheetIdAttr: number | null;
	CustomViewAttr: boolean | null;
	NameAttr: string;
	FunctionAttr: boolean | null;
	OldFunctionAttr: boolean | null;
	FunctionGroupIdAttr: any | null;
	OldFunctionGroupIdAttr: any | null;
	ShortcutKeyAttr: any | null;
	OldShortcutKeyAttr: any | null;
	HiddenAttr: boolean | null;
	OldHiddenAttr: boolean | null;
	CustomMenuAttr: string | null;
	OldCustomMenuAttr: string | null;
	DescriptionAttr: string | null;
	OldDescriptionAttr: string | null;
	HelpAttr: string | null;
	OldHelpAttr: string | null;
	StatusBarAttr: string | null;
	OldStatusBarAttr: string | null;
	CommentAttr: string | null;
	OldCommentAttr: string | null;
	Formula: Array<string>;
	OldFormula: Array<string>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_RevisionConflict {
	AG_RevData: AG_RevData;
	SheetIdAttr: number | null;
}

export class CT_RevisionQueryTableField {
	SheetIdAttr: number;
	RefAttr: string;
	FieldIdAttr: number;
}

export enum ST_rwColActionType {
	insertRow = 'insertRow',
	deleteRow = 'deleteRow',
	insertCol = 'insertCol',
	deleteCol = 'deleteCol',
}

export enum ST_RevisionAction {
	add = 'add',
	delete = 'delete',
}

export enum ST_FormulaExpression {
	ref = 'ref',
	refError = 'refError',
	area = 'area',
	areaError = 'areaError',
	computedArea = 'computedArea',
}

export type Users = CT_Users;

export class CT_Users {
	CountAttr: number | null;
	UserInfo: Array<CT_SharedUser>;
}

export class CT_SharedUser {
	GuidAttr: string;
	NameAttr: string;
	IdAttr: number;
	DateTimeAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export type Worksheet = CT_Worksheet;

export type Chartsheet = CT_Chartsheet;

export type Dialogsheet = CT_Dialogsheet;

export class CT_Macrosheet {
	SheetPr: Array<CT_SheetPr>;
	Dimension: Array<CT_SheetDimension>;
	SheetViews: Array<CT_SheetViews>;
	SheetFormatPr: Array<CT_SheetFormatPr>;
	Cols: Array<CT_Cols>;
	SheetData: Array<CT_SheetData>;
	SheetProtection: Array<CT_SheetProtection>;
	AutoFilter: Array<CT_AutoFilter>;
	SortState: Array<CT_SortState>;
	DataConsolidate: Array<CT_DataConsolidate>;
	CustomSheetViews: Array<CT_CustomSheetViews>;
	PhoneticPr: Array<CT_PhoneticPr>;
	ConditionalFormatting: Array<CT_ConditionalFormatting>;
	PrintOptions: Array<CT_PrintOptions>;
	PageMargins: Array<CT_PageMargins>;
	PageSetup: Array<CT_PageSetup>;
	HeaderFooter: Array<CT_HeaderFooter>;
	RowBreaks: Array<CT_PageBreak>;
	ColBreaks: Array<CT_PageBreak>;
	CustomProperties: Array<CT_CustomProperties>;
	Drawing: Array<CT_Drawing>;
	DrawingHF: Array<CT_DrawingHF>;
	Picture: Array<CT_SheetBackgroundPicture>;
	OleObjects: Array<CT_OleObjects>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Dialogsheet {
	SheetPr: Array<CT_SheetPr>;
	SheetViews: Array<CT_SheetViews>;
	SheetFormatPr: Array<CT_SheetFormatPr>;
	SheetProtection: Array<CT_SheetProtection>;
	CustomSheetViews: Array<CT_CustomSheetViews>;
	PrintOptions: Array<CT_PrintOptions>;
	PageMargins: Array<CT_PageMargins>;
	PageSetup: Array<CT_PageSetup>;
	HeaderFooter: Array<CT_HeaderFooter>;
	Drawing: Array<CT_Drawing>;
	DrawingHF: Array<CT_DrawingHF>;
	OleObjects: Array<CT_OleObjects>;
	Controls: Array<CT_Controls>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Worksheet {
	SheetPr: Array<CT_SheetPr>;
	Dimension: Array<CT_SheetDimension>;
	SheetViews: Array<CT_SheetViews>;
	SheetFormatPr: Array<CT_SheetFormatPr>;
	Cols: Array<CT_Cols>;
	SheetData: Array<CT_SheetData>;
	SheetCalcPr: Array<CT_SheetCalcPr>;
	SheetProtection: Array<CT_SheetProtection>;
	ProtectedRanges: Array<CT_ProtectedRanges>;
	Scenarios: Array<CT_Scenarios>;
	AutoFilter: Array<CT_AutoFilter>;
	SortState: Array<CT_SortState>;
	DataConsolidate: Array<CT_DataConsolidate>;
	CustomSheetViews: Array<CT_CustomSheetViews>;
	MergeCells: Array<CT_MergeCells>;
	PhoneticPr: Array<CT_PhoneticPr>;
	ConditionalFormatting: Array<CT_ConditionalFormatting>;
	DataValidations: Array<CT_DataValidations>;
	Hyperlinks: Array<CT_Hyperlinks>;
	PrintOptions: Array<CT_PrintOptions>;
	PageMargins: Array<CT_PageMargins>;
	PageSetup: Array<CT_PageSetup>;
	HeaderFooter: Array<CT_HeaderFooter>;
	RowBreaks: Array<CT_PageBreak>;
	ColBreaks: Array<CT_PageBreak>;
	CustomProperties: Array<CT_CustomProperties>;
	CellWatches: Array<CT_CellWatches>;
	IgnoredErrors: Array<CT_IgnoredErrors>;
	SmartTags: Array<CT_SmartTags>;
	Drawing: Array<CT_Drawing>;
	DrawingHF: Array<CT_DrawingHF>;
	Picture: Array<CT_SheetBackgroundPicture>;
	OleObjects: Array<CT_OleObjects>;
	Controls: Array<CT_Controls>;
	WebPublishItems: Array<CT_WebPublishItems>;
	TableParts: Array<CT_TableParts>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SheetData {
	Row: Array<CT_Row>;
}

export class CT_SheetCalcPr {
	FullCalcOnLoadAttr: boolean | null;
}

export class CT_SheetFormatPr {
	BaseColWidthAttr: number | null;
	DefaultColWidthAttr: number | null;
	DefaultRowHeightAttr: number;
	CustomHeightAttr: boolean | null;
	ZeroHeightAttr: boolean | null;
	ThickTopAttr: boolean | null;
	ThickBottomAttr: boolean | null;
	OutlineLevelRowAttr: any | null;
	OutlineLevelColAttr: any | null;
}

export class CT_Cols {
	Col: Array<CT_Col>;
}

export class CT_Col {
	MinAttr: number;
	MaxAttr: number;
	WidthAttr: number | null;
	StyleAttr: number | null;
	HiddenAttr: boolean | null;
	BestFitAttr: boolean | null;
	CustomWidthAttr: boolean | null;
	PhoneticAttr: boolean | null;
	OutlineLevelAttr: any | null;
	CollapsedAttr: boolean | null;
}

export type ST_CellSpan = string;

export type ST_CellSpans = Array<string>;

export class CT_Row {
	RAttr: number | null;
	SpansAttr: ST_CellSpans | null;
	SAttr: number | null;
	CustomFormatAttr: boolean | null;
	HtAttr: number | null;
	HiddenAttr: boolean | null;
	CustomHeightAttr: boolean | null;
	OutlineLevelAttr: any | null;
	CollapsedAttr: boolean | null;
	ThickTopAttr: boolean | null;
	ThickBotAttr: boolean | null;
	PhAttr: boolean | null;
	C: Array<CT_Cell>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Cell {
	RAttr: string | null;
	SAttr: number | null;
	TAttr: string | null;
	CmAttr: number | null;
	VmAttr: number | null;
	PhAttr: boolean | null;
	F: Array<CT_CellFormula>;
	V: Array<string>;
	Is: Array<CT_Rst>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_CellType {
	b = 'b',
	d = 'd',
	n = 'n',
	e = 'e',
	s = 's',
	str = 'str',
	inlineStr = 'inlineStr',
}

export enum ST_CellFormulaType {
	normal = 'normal',
	array = 'array',
	dataTable = 'dataTable',
	shared = 'shared',
}

export class CT_SheetPr {
	SyncHorizontalAttr: boolean | null;
	SyncVerticalAttr: boolean | null;
	SyncRefAttr: string | null;
	TransitionEvaluationAttr: boolean | null;
	TransitionEntryAttr: boolean | null;
	PublishedAttr: boolean | null;
	CodeNameAttr: string | null;
	FilterModeAttr: boolean | null;
	EnableFormatConditionsCalculationAttr: boolean | null;
	TabColor: Array<CT_Color>;
	OutlinePr: Array<CT_OutlinePr>;
	PageSetUpPr: Array<CT_PageSetUpPr>;
}

export class CT_SheetDimension {
	RefAttr: string;
}

export class CT_SheetViews {
	SheetView: Array<CT_SheetView>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SheetView {
	WindowProtectionAttr: boolean | null;
	ShowFormulasAttr: boolean | null;
	ShowGridLinesAttr: boolean | null;
	ShowRowColHeadersAttr: boolean | null;
	ShowZerosAttr: boolean | null;
	RightToLeftAttr: boolean | null;
	TabSelectedAttr: boolean | null;
	ShowRulerAttr: boolean | null;
	ShowOutlineSymbolsAttr: boolean | null;
	DefaultGridColorAttr: boolean | null;
	ShowWhiteSpaceAttr: boolean | null;
	ViewAttr: string | null;
	TopLeftCellAttr: string | null;
	ColorIdAttr: number | null;
	ZoomScaleAttr: number | null;
	ZoomScaleNormalAttr: number | null;
	ZoomScaleSheetLayoutViewAttr: number | null;
	ZoomScalePageLayoutViewAttr: number | null;
	WorkbookViewIdAttr: number;
	Pane: Array<CT_Pane>;
	Selection: Array<CT_Selection>;
	PivotSelection: Array<CT_PivotSelection>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Pane {
	XSplitAttr: number | null;
	YSplitAttr: number | null;
	TopLeftCellAttr: string | null;
	ActivePaneAttr: string | null;
	StateAttr: string | null;
}

export class CT_PivotSelection {
	PaneAttr: string | null;
	ShowHeaderAttr: boolean | null;
	LabelAttr: boolean | null;
	DataAttr: boolean | null;
	ExtendableAttr: boolean | null;
	CountAttr: number | null;
	AxisAttr: string | null;
	DimensionAttr: number | null;
	StartAttr: number | null;
	MinAttr: number | null;
	MaxAttr: number | null;
	ActiveRowAttr: number | null;
	ActiveColAttr: number | null;
	PreviousRowAttr: number | null;
	PreviousColAttr: number | null;
	ClickAttr: number | null;
	RIdAttr: string | null;
	PivotArea: Array<CT_PivotArea>;
}

export class CT_Selection {
	PaneAttr: string | null;
	ActiveCellAttr: string | null;
	ActiveCellIdAttr: number | null;
	SqrefAttr: ST_Sqref | null;
}

export enum ST_Pane {
	bottomRight = 'bottomRight',
	topRight = 'topRight',
	bottomLeft = 'bottomLeft',
	topLeft = 'topLeft',
}

export class CT_PageBreak {
	CountAttr: number | null;
	ManualBreakCountAttr: number | null;
	Brk: Array<CT_Break>;
}

export class CT_Break {
	IdAttr: number | null;
	MinAttr: number | null;
	MaxAttr: number | null;
	ManAttr: boolean | null;
	PtAttr: boolean | null;
}

export enum ST_SheetViewType {
	normal = 'normal',
	pageBreakPreview = 'pageBreakPreview',
	pageLayout = 'pageLayout',
}

export class CT_OutlinePr {
	ApplyStylesAttr: boolean | null;
	SummaryBelowAttr: boolean | null;
	SummaryRightAttr: boolean | null;
	ShowOutlineSymbolsAttr: boolean | null;
}

export class CT_PageSetUpPr {
	AutoPageBreaksAttr: boolean | null;
	FitToPageAttr: boolean | null;
}

export class CT_DataConsolidate {
	FunctionAttr: string | null;
	StartLabelsAttr: boolean | null;
	TopLabelsAttr: boolean | null;
	LinkAttr: boolean | null;
	DataRefs: Array<CT_DataRefs>;
}

export enum ST_DataConsolidateFunction {
	average = 'average',
	count = 'count',
	countNums = 'countNums',
	max = 'max',
	min = 'min',
	product = 'product',
	stdDev = 'stdDev',
	stdDevp = 'stdDevp',
	sum = 'sum',
	var = 'var',
	varp = 'varp',
}

export class CT_DataRefs {
	CountAttr: number | null;
	DataRef: Array<CT_DataRef>;
}

export class CT_DataRef {
	RefAttr: string | null;
	NameAttr: string | null;
	SheetAttr: string | null;
	RIdAttr: string | null;
}

export class CT_MergeCells {
	CountAttr: number | null;
	MergeCell: Array<CT_MergeCell>;
}

export class CT_MergeCell {
	RefAttr: string;
}

export class CT_SmartTags {
	CellSmartTags: Array<CT_CellSmartTags>;
}

export class CT_CellSmartTags {
	RAttr: string;
	CellSmartTag: Array<CT_CellSmartTag>;
}

export class CT_CellSmartTag {
	TypeAttr: number;
	DeletedAttr: boolean | null;
	XmlBasedAttr: boolean | null;
	CellSmartTagPr: Array<CT_CellSmartTagPr>;
}

export class CT_CellSmartTagPr {
	KeyAttr: string;
	ValAttr: string;
}

export class CT_Drawing {
	RIdAttr: string;
}

export class CT_DrawingHF {
	RIdAttr: string;
	LhoAttr: number | null;
	LheAttr: number | null;
	LhfAttr: number | null;
	ChoAttr: number | null;
	CheAttr: number | null;
	ChfAttr: number | null;
	RhoAttr: number | null;
	RheAttr: number | null;
	RhfAttr: number | null;
	LfoAttr: number | null;
	LfeAttr: number | null;
	LffAttr: number | null;
	CfoAttr: number | null;
	CfeAttr: number | null;
	CffAttr: number | null;
	RfoAttr: number | null;
	RfeAttr: number | null;
	RffAttr: number | null;
}

export class CT_CustomSheetViews {
	CustomSheetView: Array<CT_CustomSheetView>;
}

export class CT_CustomSheetView {
	GuidAttr: string;
	ScaleAttr: number | null;
	ColorIdAttr: number | null;
	ShowPageBreaksAttr: boolean | null;
	ShowFormulasAttr: boolean | null;
	ShowGridLinesAttr: boolean | null;
	ShowRowColAttr: boolean | null;
	OutlineSymbolsAttr: boolean | null;
	ZeroValuesAttr: boolean | null;
	FitToPageAttr: boolean | null;
	PrintAreaAttr: boolean | null;
	FilterAttr: boolean | null;
	ShowAutoFilterAttr: boolean | null;
	HiddenRowsAttr: boolean | null;
	HiddenColumnsAttr: boolean | null;
	StateAttr: string | null;
	FilterUniqueAttr: boolean | null;
	ViewAttr: string | null;
	ShowRulerAttr: boolean | null;
	TopLeftCellAttr: string | null;
	Pane: Array<CT_Pane>;
	Selection: Array<CT_Selection>;
	RowBreaks: Array<CT_PageBreak>;
	ColBreaks: Array<CT_PageBreak>;
	PageMargins: Array<CT_PageMargins>;
	PrintOptions: Array<CT_PrintOptions>;
	PageSetup: Array<CT_PageSetup>;
	HeaderFooter: Array<CT_HeaderFooter>;
	AutoFilter: Array<CT_AutoFilter>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_DataValidations {
	DisablePromptsAttr: boolean | null;
	XWindowAttr: number | null;
	YWindowAttr: number | null;
	CountAttr: number | null;
	DataValidation: Array<CT_DataValidation>;
}

export class CT_DataValidation {
	TypeAttr: string | null;
	ErrorStyleAttr: string | null;
	ImeModeAttr: string | null;
	OperatorAttr: string | null;
	AllowBlankAttr: boolean | null;
	ShowDropDownAttr: boolean | null;
	ShowInputMessageAttr: boolean | null;
	ShowErrorMessageAttr: boolean | null;
	ErrorTitleAttr: string | null;
	ErrorAttr: string | null;
	PromptTitleAttr: string | null;
	PromptAttr: string | null;
	SqrefAttr: ST_Sqref;
	Formula1: Array<string>;
	Formula2: Array<string>;
}

export enum ST_DataValidationType {
	none = 'none',
	whole = 'whole',
	decimal = 'decimal',
	list = 'list',
	date = 'date',
	time = 'time',
	textLength = 'textLength',
	custom = 'custom',
}

export enum ST_DataValidationOperator {
	between = 'between',
	notBetween = 'notBetween',
	equal = 'equal',
	notEqual = 'notEqual',
	lessThan = 'lessThan',
	lessThanOrEqual = 'lessThanOrEqual',
	greaterThan = 'greaterThan',
	greaterThanOrEqual = 'greaterThanOrEqual',
}

export enum ST_DataValidationErrorStyle {
	stop = 'stop',
	warning = 'warning',
	information = 'information',
}

export enum ST_DataValidationImeMode {
	noControl = 'noControl',
	off = 'off',
	on = 'on',
	disabled = 'disabled',
	hiragana = 'hiragana',
	fullKatakana = 'fullKatakana',
	halfKatakana = 'halfKatakana',
	fullAlpha = 'fullAlpha',
	halfAlpha = 'halfAlpha',
	fullHangul = 'fullHangul',
	halfHangul = 'halfHangul',
}

export enum ST_CfType {
	expression = 'expression',
	cellIs = 'cellIs',
	colorScale = 'colorScale',
	dataBar = 'dataBar',
	iconSet = 'iconSet',
	top10 = 'top10',
	uniqueValues = 'uniqueValues',
	duplicateValues = 'duplicateValues',
	containsText = 'containsText',
	notContainsText = 'notContainsText',
	beginsWith = 'beginsWith',
	endsWith = 'endsWith',
	containsBlanks = 'containsBlanks',
	notContainsBlanks = 'notContainsBlanks',
	containsErrors = 'containsErrors',
	notContainsErrors = 'notContainsErrors',
	timePeriod = 'timePeriod',
	aboveAverage = 'aboveAverage',
}

export enum ST_TimePeriod {
	today = 'today',
	yesterday = 'yesterday',
	tomorrow = 'tomorrow',
	last7Days = 'last7Days',
	thisMonth = 'thisMonth',
	lastMonth = 'lastMonth',
	nextMonth = 'nextMonth',
	thisWeek = 'thisWeek',
	lastWeek = 'lastWeek',
	nextWeek = 'nextWeek',
}

export enum ST_ConditionalFormattingOperator {
	lessThan = 'lessThan',
	lessThanOrEqual = 'lessThanOrEqual',
	equal = 'equal',
	notEqual = 'notEqual',
	greaterThanOrEqual = 'greaterThanOrEqual',
	greaterThan = 'greaterThan',
	between = 'between',
	notBetween = 'notBetween',
	containsText = 'containsText',
	notContains = 'notContains',
	beginsWith = 'beginsWith',
	endsWith = 'endsWith',
}

export enum ST_CfvoType {
	num = 'num',
	percent = 'percent',
	max = 'max',
	min = 'min',
	formula = 'formula',
	percentile = 'percentile',
}

export class CT_ConditionalFormatting {
	PivotAttr: boolean | null;
	SqrefAttr: ST_Sqref | null;
	CfRule: Array<CT_CfRule>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CfRule {
	TypeAttr: string | null;
	DxfIdAttr: number | null;
	PriorityAttr: number;
	StopIfTrueAttr: boolean | null;
	AboveAverageAttr: boolean | null;
	PercentAttr: boolean | null;
	BottomAttr: boolean | null;
	OperatorAttr: string | null;
	TextAttr: string | null;
	TimePeriodAttr: string | null;
	RankAttr: number | null;
	StdDevAttr: number | null;
	EqualAverageAttr: boolean | null;
	Formula: Array<string>;
	ColorScale: Array<CT_ColorScale>;
	DataBar: Array<CT_DataBar>;
	IconSet: Array<CT_IconSet>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Hyperlinks {
	Hyperlink: Array<CT_Hyperlink>;
}

export class CT_Hyperlink {
	RefAttr: string;
	RIdAttr: string | null;
	LocationAttr: string | null;
	TooltipAttr: string | null;
	DisplayAttr: string | null;
}

export class CT_CellFormula {
	TAttr: string | null;
	AcaAttr: boolean | null;
	RefAttr: string | null;
	Dt2DAttr: boolean | null;
	DtrAttr: boolean | null;
	Del1Attr: boolean | null;
	Del2Attr: boolean | null;
	R1Attr: string | null;
	R2Attr: string | null;
	CaAttr: boolean | null;
	SiAttr: number | null;
	BxAttr: boolean | null;
}

export class CT_ColorScale {
	Cfvo: Array<CT_Cfvo>;
	Color: Array<CT_Color>;
}

export class CT_DataBar {
	MinLengthAttr: number | null;
	MaxLengthAttr: number | null;
	ShowValueAttr: boolean | null;
	Cfvo: Array<CT_Cfvo>;
	Color: Array<CT_Color>;
}

export class CT_IconSet {
	IconSetAttr: string | null;
	ShowValueAttr: boolean | null;
	PercentAttr: boolean | null;
	ReverseAttr: boolean | null;
	Cfvo: Array<CT_Cfvo>;
}

export class CT_Cfvo {
	TypeAttr: string;
	ValAttr: string | null;
	GteAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PageMargins {
	LeftAttr: number;
	RightAttr: number;
	TopAttr: number;
	BottomAttr: number;
	HeaderAttr: number;
	FooterAttr: number;
}

export class CT_PrintOptions {
	HorizontalCenteredAttr: boolean | null;
	VerticalCenteredAttr: boolean | null;
	HeadingsAttr: boolean | null;
	GridLinesAttr: boolean | null;
	GridLinesSetAttr: boolean | null;
}

export class CT_PageSetup {
	PaperSizeAttr: number | null;
	PaperHeightAttr: string | null;
	PaperWidthAttr: string | null;
	ScaleAttr: number | null;
	FirstPageNumberAttr: number | null;
	FitToWidthAttr: number | null;
	FitToHeightAttr: number | null;
	PageOrderAttr: string | null;
	OrientationAttr: string | null;
	UsePrinterDefaultsAttr: boolean | null;
	BlackAndWhiteAttr: boolean | null;
	DraftAttr: boolean | null;
	CellCommentsAttr: string | null;
	UseFirstPageNumberAttr: boolean | null;
	ErrorsAttr: string | null;
	HorizontalDpiAttr: number | null;
	VerticalDpiAttr: number | null;
	CopiesAttr: number | null;
	RIdAttr: string | null;
}

export enum ST_PageOrder {
	downThenOver = 'downThenOver',
	overThenDown = 'overThenDown',
}

export enum ST_Orientation {
	default = 'default',
	portrait = 'portrait',
	landscape = 'landscape',
}

export enum ST_CellComments {
	none = 'none',
	asDisplayed = 'asDisplayed',
	atEnd = 'atEnd',
}

export class CT_HeaderFooter {
	DifferentOddEvenAttr: boolean | null;
	DifferentFirstAttr: boolean | null;
	ScaleWithDocAttr: boolean | null;
	AlignWithMarginsAttr: boolean | null;
	OddHeader: Array<string>;
	OddFooter: Array<string>;
	EvenHeader: Array<string>;
	EvenFooter: Array<string>;
	FirstHeader: Array<string>;
	FirstFooter: Array<string>;
}

export enum ST_PrintError {
	displayed = 'displayed',
	blank = 'blank',
	dash = 'dash',
	NA = 'NA',
}

export class CT_Scenarios {
	CurrentAttr: number | null;
	ShowAttr: number | null;
	SqrefAttr: ST_Sqref | null;
	Scenario: Array<CT_Scenario>;
}

export class CT_SheetProtection {
	AlgorithmNameAttr: string | null;
	HashValueAttr: Array<any> | null;
	SaltValueAttr: Array<any> | null;
	SpinCountAttr: number | null;
	SheetAttr: boolean | null;
	ObjectsAttr: boolean | null;
	ScenariosAttr: boolean | null;
	FormatCellsAttr: boolean | null;
	FormatColumnsAttr: boolean | null;
	FormatRowsAttr: boolean | null;
	InsertColumnsAttr: boolean | null;
	InsertRowsAttr: boolean | null;
	InsertHyperlinksAttr: boolean | null;
	DeleteColumnsAttr: boolean | null;
	DeleteRowsAttr: boolean | null;
	SelectLockedCellsAttr: boolean | null;
	SortAttr: boolean | null;
	AutoFilterAttr: boolean | null;
	PivotTablesAttr: boolean | null;
	SelectUnlockedCellsAttr: boolean | null;
}

export class CT_ProtectedRanges {
	ProtectedRange: Array<CT_ProtectedRange>;
}

export class CT_ProtectedRange {
	SqrefAttr: ST_Sqref;
	NameAttr: string;
	AlgorithmNameAttr: string | null;
	HashValueAttr: Array<any> | null;
	SaltValueAttr: Array<any> | null;
	SpinCountAttr: number | null;
	SecurityDescriptor: Array<string>;
}

export class CT_Scenario {
	NameAttr: string;
	LockedAttr: boolean | null;
	HiddenAttr: boolean | null;
	CountAttr: number | null;
	UserAttr: string | null;
	CommentAttr: string | null;
	InputCells: Array<CT_InputCells>;
}

export class CT_InputCells {
	RAttr: string;
	DeletedAttr: boolean | null;
	UndoneAttr: boolean | null;
	ValAttr: string;
	NumFmtIdAttr: number | null;
}

export class CT_CellWatches {
	CellWatch: Array<CT_CellWatch>;
}

export class CT_CellWatch {
	RAttr: string;
}

export class CT_Chartsheet {
	SheetPr: Array<CT_ChartsheetPr>;
	SheetViews: Array<CT_ChartsheetViews>;
	SheetProtection: Array<CT_ChartsheetProtection>;
	CustomSheetViews: Array<CT_CustomChartsheetViews>;
	PageMargins: Array<CT_PageMargins>;
	PageSetup: Array<CT_CsPageSetup>;
	HeaderFooter: Array<CT_HeaderFooter>;
	Drawing: Array<CT_Drawing>;
	DrawingHF: Array<CT_DrawingHF>;
	Picture: Array<CT_SheetBackgroundPicture>;
	WebPublishItems: Array<CT_WebPublishItems>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ChartsheetPr {
	PublishedAttr: boolean | null;
	CodeNameAttr: string | null;
	TabColor: Array<CT_Color>;
}

export class CT_ChartsheetViews {
	SheetView: Array<CT_ChartsheetView>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ChartsheetView {
	TabSelectedAttr: boolean | null;
	ZoomScaleAttr: number | null;
	WorkbookViewIdAttr: number;
	ZoomToFitAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ChartsheetProtection {
	AlgorithmNameAttr: string | null;
	HashValueAttr: Array<any> | null;
	SaltValueAttr: Array<any> | null;
	SpinCountAttr: number | null;
	ContentAttr: boolean | null;
	ObjectsAttr: boolean | null;
}

export class CT_CsPageSetup {
	PaperSizeAttr: number | null;
	PaperHeightAttr: string | null;
	PaperWidthAttr: string | null;
	FirstPageNumberAttr: number | null;
	OrientationAttr: string | null;
	UsePrinterDefaultsAttr: boolean | null;
	BlackAndWhiteAttr: boolean | null;
	DraftAttr: boolean | null;
	UseFirstPageNumberAttr: boolean | null;
	HorizontalDpiAttr: number | null;
	VerticalDpiAttr: number | null;
	CopiesAttr: number | null;
	RIdAttr: string | null;
}

export class CT_CustomChartsheetViews {
	CustomSheetView: Array<CT_CustomChartsheetView>;
}

export class CT_CustomChartsheetView {
	GuidAttr: string;
	ScaleAttr: number | null;
	StateAttr: string | null;
	ZoomToFitAttr: boolean | null;
	PageMargins: Array<CT_PageMargins>;
	PageSetup: Array<CT_CsPageSetup>;
	HeaderFooter: Array<CT_HeaderFooter>;
}

export class CT_CustomProperties {
	CustomPr: Array<CT_CustomProperty>;
}

export class CT_CustomProperty {
	NameAttr: string;
	RIdAttr: string;
}

export class CT_OleObjects {
	OleObject: Array<CT_OleObject>;
}

export class CT_OleObject {
	ProgIdAttr: string | null;
	DvAspectAttr: string | null;
	LinkAttr: string | null;
	OleUpdateAttr: string | null;
	AutoLoadAttr: boolean | null;
	ShapeIdAttr: number;
	RIdAttr: string | null;
	ObjectPr: Array<CT_ObjectPr>;
}

export class CT_ObjectPr {
	LockedAttr: boolean | null;
	DefaultSizeAttr: boolean | null;
	PrintAttr: boolean | null;
	DisabledAttr: boolean | null;
	UiObjectAttr: boolean | null;
	AutoFillAttr: boolean | null;
	AutoLineAttr: boolean | null;
	AutoPictAttr: boolean | null;
	MacroAttr: string | null;
	AltTextAttr: string | null;
	DdeAttr: boolean | null;
	RIdAttr: string | null;
	Anchor: Array<CT_ObjectAnchor>;
}

export enum ST_DvAspect {
	DVASPECT_CONTENT = 'DVASPECT_CONTENT',
	DVASPECT_ICON = 'DVASPECT_ICON',
}

export enum ST_OleUpdate {
	OLEUPDATE_ALWAYS = 'OLEUPDATE_ALWAYS',
	OLEUPDATE_ONCALL = 'OLEUPDATE_ONCALL',
}

export class CT_WebPublishItems {
	CountAttr: number | null;
	WebPublishItem: Array<CT_WebPublishItem>;
}

export class CT_WebPublishItem {
	IdAttr: number;
	DivIdAttr: string;
	SourceTypeAttr: string;
	SourceRefAttr: string | null;
	SourceObjectAttr: string | null;
	DestinationFileAttr: string;
	TitleAttr: string | null;
	AutoRepublishAttr: boolean | null;
}

export class CT_Controls {
	Control: Array<CT_Control>;
}

export class CT_Control {
	ShapeIdAttr: number;
	RIdAttr: string;
	NameAttr: string | null;
	ControlPr: Array<CT_ControlPr>;
}

export class CT_ControlPr {
	LockedAttr: boolean | null;
	DefaultSizeAttr: boolean | null;
	PrintAttr: boolean | null;
	DisabledAttr: boolean | null;
	RecalcAlwaysAttr: boolean | null;
	UiObjectAttr: boolean | null;
	AutoFillAttr: boolean | null;
	AutoLineAttr: boolean | null;
	AutoPictAttr: boolean | null;
	MacroAttr: string | null;
	AltTextAttr: string | null;
	LinkedCellAttr: string | null;
	ListFillRangeAttr: string | null;
	CfAttr: string | null;
	RIdAttr: string | null;
	Anchor: Array<CT_ObjectAnchor>;
}

export enum ST_WebSourceType {
	sheet = 'sheet',
	printArea = 'printArea',
	autoFilter = 'autoFilter',
	range = 'range',
	chart = 'chart',
	pivotTable = 'pivotTable',
	query = 'query',
	label = 'label',
}

export class CT_IgnoredErrors {
	IgnoredError: Array<CT_IgnoredError>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_IgnoredError {
	SqrefAttr: ST_Sqref;
	EvalErrorAttr: boolean | null;
	TwoDigitTextYearAttr: boolean | null;
	NumberStoredAsTextAttr: boolean | null;
	FormulaAttr: boolean | null;
	FormulaRangeAttr: boolean | null;
	UnlockedFormulaAttr: boolean | null;
	EmptyCellReferenceAttr: boolean | null;
	ListDataValidationAttr: boolean | null;
	CalculatedColumnAttr: boolean | null;
}

export enum ST_PaneState {
	split = 'split',
	frozen = 'frozen',
	frozenSplit = 'frozenSplit',
}

export class CT_TableParts {
	CountAttr: number | null;
	TablePart: Array<CT_TablePart>;
}

export class CT_TablePart {
	RIdAttr: string;
}

export type Metadata = CT_Metadata;

export class CT_Metadata {
	MetadataTypes: Array<CT_MetadataTypes>;
	MetadataStrings: Array<CT_MetadataStrings>;
	MdxMetadata: Array<CT_MdxMetadata>;
	FutureMetadata: Array<CT_FutureMetadata>;
	CellMetadata: Array<CT_MetadataBlocks>;
	ValueMetadata: Array<CT_MetadataBlocks>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_MetadataTypes {
	CountAttr: number | null;
	MetadataType: Array<CT_MetadataType>;
}

export class CT_MetadataType {
	NameAttr: string;
	MinSupportedVersionAttr: number;
	GhostRowAttr: boolean | null;
	GhostColAttr: boolean | null;
	EditAttr: boolean | null;
	DeleteAttr: boolean | null;
	CopyAttr: boolean | null;
	PasteAllAttr: boolean | null;
	PasteFormulasAttr: boolean | null;
	PasteValuesAttr: boolean | null;
	PasteFormatsAttr: boolean | null;
	PasteCommentsAttr: boolean | null;
	PasteDataValidationAttr: boolean | null;
	PasteBordersAttr: boolean | null;
	PasteColWidthsAttr: boolean | null;
	PasteNumberFormatsAttr: boolean | null;
	MergeAttr: boolean | null;
	SplitFirstAttr: boolean | null;
	SplitAllAttr: boolean | null;
	RowColShiftAttr: boolean | null;
	ClearAllAttr: boolean | null;
	ClearFormatsAttr: boolean | null;
	ClearContentsAttr: boolean | null;
	ClearCommentsAttr: boolean | null;
	AssignAttr: boolean | null;
	CoerceAttr: boolean | null;
	AdjustAttr: boolean | null;
	CellMetaAttr: boolean | null;
}

export class CT_MetadataBlocks {
	CountAttr: number | null;
	Bk: Array<CT_MetadataBlock>;
}

export class CT_MetadataBlock {
	Rc: Array<CT_MetadataRecord>;
}

export class CT_MetadataRecord {
	TAttr: number;
	VAttr: number;
}

export class CT_FutureMetadata {
	NameAttr: string;
	CountAttr: number | null;
	Bk: Array<CT_FutureMetadataBlock>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_FutureMetadataBlock {
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_MdxMetadata {
	CountAttr: number | null;
	Mdx: Array<CT_Mdx>;
}

export class CT_Mdx {
	NAttr: number;
	FAttr: string;
	T: Array<CT_MdxTuple>;
	Ms: Array<CT_MdxSet>;
	P: Array<CT_MdxMemeberProp>;
	K: Array<CT_MdxKPI>;
}

export enum ST_MdxFunctionType {
	m = 'm',
	v = 'v',
	s = 's',
	c = 'c',
	r = 'r',
	p = 'p',
	k = 'k',
}

export class CT_MdxTuple {
	CAttr: number | null;
	CtAttr: string | null;
	SiAttr: number | null;
	FiAttr: number | null;
	BcAttr: Array<any> | null;
	FcAttr: Array<any> | null;
	IAttr: boolean | null;
	UAttr: boolean | null;
	StAttr: boolean | null;
	BAttr: boolean | null;
	N: Array<CT_MetadataStringIndex>;
}

export class CT_MdxSet {
	NsAttr: number;
	CAttr: number | null;
	OAttr: string | null;
	N: Array<CT_MetadataStringIndex>;
}

export enum ST_MdxSetOrder {
	u = 'u',
	a = 'a',
	d = 'd',
	aa = 'aa',
	ad = 'ad',
	na = 'na',
	nd = 'nd',
}

export class CT_MdxMemeberProp {
	NAttr: number;
	NpAttr: number;
}

export class CT_MdxKPI {
	NAttr: number;
	NpAttr: number;
	PAttr: string;
}

export enum ST_MdxKPIProperty {
	v = 'v',
	g = 'g',
	s = 's',
	t = 't',
	w = 'w',
	m = 'm',
}

export class CT_MetadataStringIndex {
	XAttr: number;
	SAttr: boolean | null;
}

export class CT_MetadataStrings {
	CountAttr: number | null;
	S: Array<CT_XStringElement>;
}

export type SingleXmlCells = CT_SingleXmlCells;

export class CT_SingleXmlCells {
	SingleXmlCell: Array<CT_SingleXmlCell>;
}

export class CT_SingleXmlCell {
	IdAttr: number;
	RAttr: string;
	ConnectionIdAttr: number;
	XmlCellPr: Array<CT_XmlCellPr>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_XmlCellPr {
	IdAttr: number;
	UniqueNameAttr: string | null;
	XmlPr: Array<CT_XmlPr>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_XmlPr {
	MapIdAttr: number;
	XpathAttr: string;
	XmlDataTypeAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export type StyleSheet = CT_Stylesheet;

export class CT_Stylesheet {
	NumFmts: Array<CT_NumFmts>;
	Fonts: Array<CT_Fonts>;
	Fills: Array<CT_Fills>;
	Borders: Array<CT_Borders>;
	CellStyleXfs: Array<CT_CellStyleXfs>;
	CellXfs: Array<CT_CellXfs>;
	CellStyles: Array<CT_CellStyles>;
	Dxfs: Array<CT_Dxfs>;
	TableStyles: Array<CT_TableStyles>;
	Colors: Array<CT_Colors>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CellAlignment {
	HorizontalAttr: string | null;
	VerticalAttr: string | null;
	TextRotationAttr: ST_TextRotation | null;
	WrapTextAttr: boolean | null;
	IndentAttr: number | null;
	RelativeIndentAttr: number | null;
	JustifyLastLineAttr: boolean | null;
	ShrinkToFitAttr: boolean | null;
	ReadingOrderAttr: number | null;
}

export enum ST_TextRotation {
	Enum255 = 255,
}

export enum ST_BorderStyle {
	none = 'none',
	thin = 'thin',
	medium = 'medium',
	dashed = 'dashed',
	dotted = 'dotted',
	thick = 'thick',
	double = 'double',
	hair = 'hair',
	mediumDashed = 'mediumDashed',
	dashDot = 'dashDot',
	mediumDashDot = 'mediumDashDot',
	dashDotDot = 'dashDotDot',
	mediumDashDotDot = 'mediumDashDotDot',
	slantDashDot = 'slantDashDot',
}

export class CT_Borders {
	CountAttr: number | null;
	Border: Array<CT_Border>;
}

export class CT_Border {
	DiagonalUpAttr: boolean | null;
	DiagonalDownAttr: boolean | null;
	OutlineAttr: boolean | null;
	Start: Array<CT_BorderPr>;
	End: Array<CT_BorderPr>;
	Top: Array<CT_BorderPr>;
	Bottom: Array<CT_BorderPr>;
	Diagonal: Array<CT_BorderPr>;
	Vertical: Array<CT_BorderPr>;
	Horizontal: Array<CT_BorderPr>;
}

export class CT_BorderPr {
	StyleAttr: string | null;
	Color: Array<CT_Color>;
}

export class CT_CellProtection {
	LockedAttr: boolean | null;
	HiddenAttr: boolean | null;
}

export class CT_Fonts {
	CountAttr: number | null;
	Font: Array<CT_Font>;
}

export class CT_Fills {
	CountAttr: number | null;
	Fill: Array<CT_Fill>;
}

export class CT_Fill {
	PatternFill: Array<CT_PatternFill>;
	GradientFill: Array<CT_GradientFill>;
}

export class CT_PatternFill {
	PatternTypeAttr: string | null;
	FgColor: Array<CT_Color>;
	BgColor: Array<CT_Color>;
}

export class CT_Color {
	AutoAttr: boolean | null;
	IndexedAttr: number | null;
	RgbAttr: Array<any> | null;
	ThemeAttr: number | null;
	TintAttr: number | null;
}

export enum ST_PatternType {
	none = 'none',
	solid = 'solid',
	mediumGray = 'mediumGray',
	darkGray = 'darkGray',
	lightGray = 'lightGray',
	darkHorizontal = 'darkHorizontal',
	darkVertical = 'darkVertical',
	darkDown = 'darkDown',
	darkUp = 'darkUp',
	darkGrid = 'darkGrid',
	darkTrellis = 'darkTrellis',
	lightHorizontal = 'lightHorizontal',
	lightVertical = 'lightVertical',
	lightDown = 'lightDown',
	lightUp = 'lightUp',
	lightGrid = 'lightGrid',
	lightTrellis = 'lightTrellis',
	gray125 = 'gray125',
	gray0625 = 'gray0625',
}

export class CT_GradientFill {
	TypeAttr: string | null;
	DegreeAttr: number | null;
	LeftAttr: number | null;
	RightAttr: number | null;
	TopAttr: number | null;
	BottomAttr: number | null;
	Stop: Array<CT_GradientStop>;
}

export class CT_GradientStop {
	PositionAttr: number;
	Color: Array<CT_Color>;
}

export enum ST_GradientType {
	linear = 'linear',
	path = 'path',
}

export enum ST_HorizontalAlignment {
	general = 'general',
	left = 'left',
	center = 'center',
	right = 'right',
	fill = 'fill',
	justify = 'justify',
	centerContinuous = 'centerContinuous',
	distributed = 'distributed',
}

export enum ST_VerticalAlignment {
	top = 'top',
	center = 'center',
	bottom = 'bottom',
	justify = 'justify',
	distributed = 'distributed',
}

export class CT_NumFmts {
	CountAttr: number | null;
	NumFmt: Array<CT_NumFmt>;
}

export class CT_NumFmt {
	NumFmtIdAttr: number;
	FormatCodeAttr: string;
}

export class CT_CellStyleXfs {
	CountAttr: number | null;
	Xf: Array<CT_Xf>;
}

export class CT_CellXfs {
	CountAttr: number | null;
	Xf: Array<CT_Xf>;
}

export class CT_Xf {
	NumFmtIdAttr: number | null;
	FontIdAttr: number | null;
	FillIdAttr: number | null;
	BorderIdAttr: number | null;
	XfIdAttr: number | null;
	QuotePrefixAttr: boolean | null;
	PivotButtonAttr: boolean | null;
	ApplyNumberFormatAttr: boolean | null;
	ApplyFontAttr: boolean | null;
	ApplyFillAttr: boolean | null;
	ApplyBorderAttr: boolean | null;
	ApplyAlignmentAttr: boolean | null;
	ApplyProtectionAttr: boolean | null;
	Alignment: Array<CT_CellAlignment>;
	Protection: Array<CT_CellProtection>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CellStyles {
	CountAttr: number | null;
	CellStyle: Array<CT_CellStyle>;
}

export class CT_CellStyle {
	NameAttr: string | null;
	XfIdAttr: number;
	BuiltinIdAttr: number | null;
	ILevelAttr: number | null;
	HiddenAttr: boolean | null;
	CustomBuiltinAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Dxfs {
	CountAttr: number | null;
	Dxf: Array<CT_Dxf>;
}

export class CT_Dxf {
	Font: Array<CT_Font>;
	NumFmt: Array<CT_NumFmt>;
	Fill: Array<CT_Fill>;
	Alignment: Array<CT_CellAlignment>;
	Border: Array<CT_Border>;
	Protection: Array<CT_CellProtection>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_NumFmtId = number;

export type ST_FontId = number;

export type ST_FillId = number;

export type ST_BorderId = number;

export type ST_CellStyleXfId = number;

export type ST_DxfId = number;

export class CT_Colors {
	IndexedColors: Array<CT_IndexedColors>;
	MruColors: Array<CT_MRUColors>;
}

export class CT_IndexedColors {
	RgbColor: Array<CT_RgbColor>;
}

export class CT_MRUColors {
	Color: Array<CT_Color>;
}

export class CT_RgbColor {
	RgbAttr: Array<any> | null;
}

export class CT_TableStyles {
	CountAttr: number | null;
	DefaultTableStyleAttr: string | null;
	DefaultPivotStyleAttr: string | null;
	TableStyle: Array<CT_TableStyle>;
}

export class CT_TableStyle {
	NameAttr: string;
	PivotAttr: boolean | null;
	TableAttr: boolean | null;
	CountAttr: number | null;
	TableStyleElement: Array<CT_TableStyleElement>;
}

export class CT_TableStyleElement {
	TypeAttr: string;
	SizeAttr: number | null;
	DxfIdAttr: number | null;
}

export enum ST_TableStyleType {
	wholeTable = 'wholeTable',
	headerRow = 'headerRow',
	totalRow = 'totalRow',
	firstColumn = 'firstColumn',
	lastColumn = 'lastColumn',
	firstRowStripe = 'firstRowStripe',
	secondRowStripe = 'secondRowStripe',
	firstColumnStripe = 'firstColumnStripe',
	secondColumnStripe = 'secondColumnStripe',
	firstHeaderCell = 'firstHeaderCell',
	lastHeaderCell = 'lastHeaderCell',
	firstTotalCell = 'firstTotalCell',
	lastTotalCell = 'lastTotalCell',
	firstSubtotalColumn = 'firstSubtotalColumn',
	secondSubtotalColumn = 'secondSubtotalColumn',
	thirdSubtotalColumn = 'thirdSubtotalColumn',
	firstSubtotalRow = 'firstSubtotalRow',
	secondSubtotalRow = 'secondSubtotalRow',
	thirdSubtotalRow = 'thirdSubtotalRow',
	blankRow = 'blankRow',
	firstColumnSubheading = 'firstColumnSubheading',
	secondColumnSubheading = 'secondColumnSubheading',
	thirdColumnSubheading = 'thirdColumnSubheading',
	firstRowSubheading = 'firstRowSubheading',
	secondRowSubheading = 'secondRowSubheading',
	thirdRowSubheading = 'thirdRowSubheading',
	pageFieldLabels = 'pageFieldLabels',
	pageFieldValues = 'pageFieldValues',
}

export class CT_BooleanProperty {
	ValAttr: boolean | null;
}

export class CT_FontSize {
	ValAttr: number;
}

export class CT_IntProperty {
	ValAttr: number;
}

export class CT_FontName {
	ValAttr: string;
}

export class CT_VerticalAlignFontProperty {
	ValAttr: string;
}

export class CT_FontScheme {
	ValAttr: string;
}

export enum ST_FontScheme {
	none = 'none',
	major = 'major',
	minor = 'minor',
}

export class CT_UnderlineProperty {
	ValAttr: string | null;
}

export enum ST_UnderlineValues {
	single = 'single',
	double = 'double',
	singleAccounting = 'singleAccounting',
	doubleAccounting = 'doubleAccounting',
	none = 'none',
}

export class CT_FontFamily {
	ValAttr: number;
}

export type ST_FontFamily = number;

export class CT_Font {
	Name: Array<CT_FontName>;
	Charset: Array<CT_IntProperty>;
	Family: Array<CT_FontFamily>;
	B: Array<CT_BooleanProperty>;
	I: Array<CT_BooleanProperty>;
	Strike: Array<CT_BooleanProperty>;
	Outline: Array<CT_BooleanProperty>;
	Shadow: Array<CT_BooleanProperty>;
	Condense: Array<CT_BooleanProperty>;
	Extend: Array<CT_BooleanProperty>;
	Color: Array<CT_Color>;
	Sz: Array<CT_FontSize>;
	U: Array<CT_UnderlineProperty>;
	VertAlign: Array<CT_VerticalAlignFontProperty>;
	Scheme: Array<CT_FontScheme>;
}

export class AG_AutoFormat {
	AutoFormatIdAttr: number | null;
	ApplyNumberFormatsAttr: boolean | null;
	ApplyBorderFormatsAttr: boolean | null;
	ApplyFontFormatsAttr: boolean | null;
	ApplyPatternFormatsAttr: boolean | null;
	ApplyAlignmentFormatsAttr: boolean | null;
	ApplyWidthHeightFormatsAttr: boolean | null;
}

export type ExternalLink = CT_ExternalLink;

export class CT_ExternalLink {
	ExternalBook: Array<CT_ExternalBook>;
	DdeLink: Array<CT_DdeLink>;
	OleLink: Array<CT_OleLink>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ExternalBook {
	RIdAttr: string;
	SheetNames: Array<CT_ExternalSheetNames>;
	DefinedNames: Array<CT_ExternalDefinedNames>;
	SheetDataSet: Array<CT_ExternalSheetDataSet>;
}

export class CT_ExternalSheetNames {
	SheetName: Array<CT_ExternalSheetName>;
}

export class CT_ExternalSheetName {
	ValAttr: string | null;
}

export class CT_ExternalDefinedNames {
	DefinedName: Array<CT_ExternalDefinedName>;
}

export class CT_ExternalDefinedName {
	NameAttr: string;
	RefersToAttr: string | null;
	SheetIdAttr: number | null;
}

export class CT_ExternalSheetDataSet {
	SheetData: Array<CT_ExternalSheetData>;
}

export class CT_ExternalSheetData {
	SheetIdAttr: number;
	RefreshErrorAttr: boolean | null;
	Row: Array<CT_ExternalRow>;
}

export class CT_ExternalRow {
	RAttr: number;
	Cell: Array<CT_ExternalCell>;
}

export class CT_ExternalCell {
	RAttr: string | null;
	TAttr: string | null;
	VmAttr: number | null;
	V: Array<string>;
}

export class CT_DdeLink {
	DdeServiceAttr: string;
	DdeTopicAttr: string;
	DdeItems: Array<CT_DdeItems>;
}

export class CT_DdeItems {
	DdeItem: Array<CT_DdeItem>;
}

export class CT_DdeItem {
	NameAttr: string | null;
	OleAttr: boolean | null;
	AdviseAttr: boolean | null;
	PreferPicAttr: boolean | null;
	Values: Array<CT_DdeValues>;
}

export class CT_DdeValues {
	RowsAttr: number | null;
	ColsAttr: number | null;
	Value: Array<CT_DdeValue>;
}

export class CT_DdeValue {
	TAttr: string | null;
	Val: Array<string>;
}

export enum ST_DdeValueType {
	nil = 'nil',
	b = 'b',
	n = 'n',
	e = 'e',
	str = 'str',
}

export class CT_OleLink {
	RIdAttr: string;
	ProgIdAttr: string;
	OleItems: Array<CT_OleItems>;
}

export class CT_OleItems {
	OleItem: Array<CT_OleItem>;
}

export class CT_OleItem {
	NameAttr: string;
	IconAttr: boolean | null;
	AdviseAttr: boolean | null;
	PreferPicAttr: boolean | null;
}

export type Table = CT_Table;

export class CT_Table {
	IdAttr: number;
	NameAttr: string | null;
	DisplayNameAttr: string;
	CommentAttr: string | null;
	RefAttr: string;
	TableTypeAttr: string | null;
	HeaderRowCountAttr: number | null;
	InsertRowAttr: boolean | null;
	InsertRowShiftAttr: boolean | null;
	TotalsRowCountAttr: number | null;
	TotalsRowShownAttr: boolean | null;
	PublishedAttr: boolean | null;
	HeaderRowDxfIdAttr: number | null;
	DataDxfIdAttr: number | null;
	TotalsRowDxfIdAttr: number | null;
	HeaderRowBorderDxfIdAttr: number | null;
	TableBorderDxfIdAttr: number | null;
	TotalsRowBorderDxfIdAttr: number | null;
	HeaderRowCellStyleAttr: string | null;
	DataCellStyleAttr: string | null;
	TotalsRowCellStyleAttr: string | null;
	ConnectionIdAttr: number | null;
	AutoFilter: Array<CT_AutoFilter>;
	SortState: Array<CT_SortState>;
	TableColumns: Array<CT_TableColumns>;
	TableStyleInfo: Array<CT_TableStyleInfo>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_TableType {
	worksheet = 'worksheet',
	xml = 'xml',
	queryTable = 'queryTable',
}

export class CT_TableStyleInfo {
	NameAttr: string | null;
	ShowFirstColumnAttr: boolean | null;
	ShowLastColumnAttr: boolean | null;
	ShowRowStripesAttr: boolean | null;
	ShowColumnStripesAttr: boolean | null;
}

export class CT_TableColumns {
	CountAttr: number | null;
	TableColumn: Array<CT_TableColumn>;
}

export class CT_TableColumn {
	IdAttr: number;
	UniqueNameAttr: string | null;
	NameAttr: string;
	TotalsRowFunctionAttr: string | null;
	TotalsRowLabelAttr: string | null;
	QueryTableFieldIdAttr: number | null;
	HeaderRowDxfIdAttr: number | null;
	DataDxfIdAttr: number | null;
	TotalsRowDxfIdAttr: number | null;
	HeaderRowCellStyleAttr: string | null;
	DataCellStyleAttr: string | null;
	TotalsRowCellStyleAttr: string | null;
	CalculatedColumnFormula: Array<CT_TableFormula>;
	TotalsRowFormula: Array<CT_TableFormula>;
	XmlColumnPr: Array<CT_XmlColumnPr>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_TableFormula {
	ArrayAttr: boolean | null;
}

export enum ST_TotalsRowFunction {
	none = 'none',
	sum = 'sum',
	min = 'min',
	max = 'max',
	average = 'average',
	count = 'count',
	countNums = 'countNums',
	stdDev = 'stdDev',
	var = 'var',
	custom = 'custom',
}

export class CT_XmlColumnPr {
	MapIdAttr: number;
	XpathAttr: string;
	DenormalizedAttr: boolean | null;
	XmlDataTypeAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_XmlDataType = string;

export type VolTypes = CT_VolTypes;

export class CT_VolTypes {
	VolType: Array<CT_VolType>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_VolType {
	TypeAttr: string;
	Main: Array<CT_VolMain>;
}

export class CT_VolMain {
	FirstAttr: string;
	Tp: Array<CT_VolTopic>;
}

export class CT_VolTopic {
	TAttr: string | null;
	V: Array<string>;
	Stp: Array<string>;
	Tr: Array<CT_VolTopicRef>;
}

export class CT_VolTopicRef {
	RAttr: string;
	SAttr: number;
}

export enum ST_VolDepType {
	realTimeData = 'realTimeData',
	olapFunctions = 'olapFunctions',
}

export enum ST_VolValueType {
	b = 'b',
	n = 'n',
	e = 'e',
	s = 's',
}

export type Workbook = CT_Workbook;

export class CT_Workbook {
	ConformanceAttr: string | null;
	FileVersion: Array<CT_FileVersion>;
	FileSharing: Array<CT_FileSharing>;
	WorkbookPr: Array<CT_WorkbookPr>;
	WorkbookProtection: Array<CT_WorkbookProtection>;
	BookViews: Array<CT_BookViews>;
	Sheets: Array<CT_Sheets>;
	FunctionGroups: Array<CT_FunctionGroups>;
	ExternalReferences: Array<CT_ExternalReferences>;
	DefinedNames: Array<CT_DefinedNames>;
	CalcPr: Array<CT_CalcPr>;
	OleSize: Array<CT_OleSize>;
	CustomWorkbookViews: Array<CT_CustomWorkbookViews>;
	PivotCaches: Array<CT_PivotCaches>;
	SmartTagPr: Array<CT_SmartTagPr>;
	SmartTagTypes: Array<CT_SmartTagTypes>;
	WebPublishing: Array<CT_WebPublishing>;
	FileRecoveryPr: Array<CT_FileRecoveryPr>;
	WebPublishObjects: Array<CT_WebPublishObjects>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_FileVersion {
	AppNameAttr: string | null;
	LastEditedAttr: string | null;
	LowestEditedAttr: string | null;
	RupBuildAttr: string | null;
	CodeNameAttr: string | null;
}

export class CT_BookViews {
	WorkbookView: Array<CT_BookView>;
}

export class CT_BookView {
	VisibilityAttr: string | null;
	MinimizedAttr: boolean | null;
	ShowHorizontalScrollAttr: boolean | null;
	ShowVerticalScrollAttr: boolean | null;
	ShowSheetTabsAttr: boolean | null;
	XWindowAttr: number | null;
	YWindowAttr: number | null;
	WindowWidthAttr: number | null;
	WindowHeightAttr: number | null;
	TabRatioAttr: number | null;
	FirstSheetAttr: number | null;
	ActiveTabAttr: number | null;
	AutoFilterDateGroupingAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_Visibility {
	visible = 'visible',
	hidden = 'hidden',
	veryHidden = 'veryHidden',
}

export class CT_CustomWorkbookViews {
	CustomWorkbookView: Array<CT_CustomWorkbookView>;
}

export class CT_CustomWorkbookView {
	NameAttr: string;
	GuidAttr: string;
	AutoUpdateAttr: boolean | null;
	MergeIntervalAttr: number | null;
	ChangesSavedWinAttr: boolean | null;
	OnlySyncAttr: boolean | null;
	PersonalViewAttr: boolean | null;
	IncludePrintSettingsAttr: boolean | null;
	IncludeHiddenRowColAttr: boolean | null;
	MaximizedAttr: boolean | null;
	MinimizedAttr: boolean | null;
	ShowHorizontalScrollAttr: boolean | null;
	ShowVerticalScrollAttr: boolean | null;
	ShowSheetTabsAttr: boolean | null;
	XWindowAttr: number | null;
	YWindowAttr: number | null;
	WindowWidthAttr: number;
	WindowHeightAttr: number;
	TabRatioAttr: number | null;
	ActiveSheetIdAttr: number;
	ShowFormulaBarAttr: boolean | null;
	ShowStatusbarAttr: boolean | null;
	ShowCommentsAttr: string | null;
	ShowObjectsAttr: string | null;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_Comments {
	commNone = 'commNone',
	commIndicator = 'commIndicator',
	commIndAndComment = 'commIndAndComment',
}

export enum ST_Objects {
	all = 'all',
	placeholders = 'placeholders',
	none = 'none',
}

export class CT_Sheets {
	Sheet: Array<CT_Sheet>;
}

export class CT_Sheet {
	NameAttr: string;
	SheetIdAttr: number;
	StateAttr: string | null;
	RIdAttr: string;
}

export enum ST_SheetState {
	visible = 'visible',
	hidden = 'hidden',
	veryHidden = 'veryHidden',
}

export class CT_WorkbookPr {
	Date1904Attr: boolean | null;
	ShowObjectsAttr: string | null;
	ShowBorderUnselectedTablesAttr: boolean | null;
	FilterPrivacyAttr: boolean | null;
	PromptedSolutionsAttr: boolean | null;
	ShowInkAnnotationAttr: boolean | null;
	BackupFileAttr: boolean | null;
	SaveExternalLinkValuesAttr: boolean | null;
	UpdateLinksAttr: string | null;
	CodeNameAttr: string | null;
	HidePivotFieldListAttr: boolean | null;
	ShowPivotChartFilterAttr: boolean | null;
	AllowRefreshQueryAttr: boolean | null;
	PublishItemsAttr: boolean | null;
	CheckCompatibilityAttr: boolean | null;
	AutoCompressPicturesAttr: boolean | null;
	RefreshAllConnectionsAttr: boolean | null;
	DefaultThemeVersionAttr: number | null;
}

export enum ST_UpdateLinks {
	userSet = 'userSet',
	never = 'never',
	always = 'always',
}

export class CT_SmartTagPr {
	EmbedAttr: boolean | null;
	ShowAttr: string | null;
}

export enum ST_SmartTagShow {
	all = 'all',
	none = 'none',
	noIndicator = 'noIndicator',
}

export class CT_SmartTagTypes {
	SmartTagType: Array<CT_SmartTagType>;
}

export class CT_SmartTagType {
	NamespaceUriAttr: string | null;
	NameAttr: string | null;
	UrlAttr: string | null;
}

export class CT_FileRecoveryPr {
	AutoRecoverAttr: boolean | null;
	CrashSaveAttr: boolean | null;
	DataExtractLoadAttr: boolean | null;
	RepairLoadAttr: boolean | null;
}

export class CT_CalcPr {
	CalcIdAttr: number | null;
	CalcModeAttr: string | null;
	FullCalcOnLoadAttr: boolean | null;
	RefModeAttr: string | null;
	IterateAttr: boolean | null;
	IterateCountAttr: number | null;
	IterateDeltaAttr: number | null;
	FullPrecisionAttr: boolean | null;
	CalcCompletedAttr: boolean | null;
	CalcOnSaveAttr: boolean | null;
	ConcurrentCalcAttr: boolean | null;
	ConcurrentManualCountAttr: number | null;
	ForceFullCalcAttr: boolean | null;
}

export enum ST_CalcMode {
	manual = 'manual',
	auto = 'auto',
	autoNoTable = 'autoNoTable',
}

export enum ST_RefMode {
	A1 = 'A1',
	R1C1 = 'R1C1',
}

export class CT_DefinedNames {
	DefinedName: Array<CT_DefinedName>;
}

export class CT_DefinedName {
	NameAttr: string;
	CommentAttr: string | null;
	CustomMenuAttr: string | null;
	DescriptionAttr: string | null;
	HelpAttr: string | null;
	StatusBarAttr: string | null;
	LocalSheetIdAttr: number | null;
	HiddenAttr: boolean | null;
	FunctionAttr: boolean | null;
	VbProcedureAttr: boolean | null;
	XlmAttr: boolean | null;
	FunctionGroupIdAttr: number | null;
	ShortcutKeyAttr: string | null;
	PublishToServerAttr: boolean | null;
	WorkbookParameterAttr: boolean | null;
}

export class CT_ExternalReferences {
	ExternalReference: Array<CT_ExternalReference>;
}

export class CT_ExternalReference {
	RIdAttr: string;
}

export class CT_SheetBackgroundPicture {
	RIdAttr: string;
}

export class CT_PivotCaches {
	PivotCache: Array<CT_PivotCache>;
}

export class CT_PivotCache {
	CacheIdAttr: number;
	RIdAttr: string;
}

export class CT_FileSharing {
	ReadOnlyRecommendedAttr: boolean | null;
	UserNameAttr: string | null;
	AlgorithmNameAttr: string | null;
	HashValueAttr: Array<any> | null;
	SaltValueAttr: Array<any> | null;
	SpinCountAttr: number | null;
}

export class CT_OleSize {
	RefAttr: string;
}

export class CT_WorkbookProtection {
	LockStructureAttr: boolean | null;
	LockWindowsAttr: boolean | null;
	LockRevisionAttr: boolean | null;
	RevisionsAlgorithmNameAttr: string | null;
	RevisionsHashValueAttr: Array<any> | null;
	RevisionsSaltValueAttr: Array<any> | null;
	RevisionsSpinCountAttr: number | null;
	WorkbookAlgorithmNameAttr: string | null;
	WorkbookHashValueAttr: Array<any> | null;
	WorkbookSaltValueAttr: Array<any> | null;
	WorkbookSpinCountAttr: number | null;
}

export class CT_WebPublishing {
	CssAttr: boolean | null;
	ThicketAttr: boolean | null;
	LongFileNamesAttr: boolean | null;
	VmlAttr: boolean | null;
	AllowPngAttr: boolean | null;
	TargetScreenSizeAttr: string | null;
	DpiAttr: number | null;
	CharacterSetAttr: string | null;
}

export enum ST_TargetScreenSize {
	544x376 = '544x376',
	640x480 = '640x480',
	720x512 = '720x512',
	800x600 = '800x600',
	1024x768 = '1024x768',
	1152x882 = '1152x882',
	1152x900 = '1152x900',
	1280x1024 = '1280x1024',
	1600x1200 = '1600x1200',
	1800x1440 = '1800x1440',
	1920x1200 = '1920x1200',
}

export class CT_FunctionGroups {
	BuiltInGroupCountAttr: number | null;
	FunctionGroup: Array<CT_FunctionGroup>;
}

export class CT_FunctionGroup {
	NameAttr: string | null;
}

export class CT_WebPublishObjects {
	CountAttr: number | null;
	WebPublishObject: Array<CT_WebPublishObject>;
}

export class CT_WebPublishObject {
	IdAttr: number;
	DivIdAttr: string;
	SourceObjectAttr: string | null;
	DestinationFileAttr: string;
	TitleAttr: string | null;
	AutoRepublishAttr: boolean | null;
}
