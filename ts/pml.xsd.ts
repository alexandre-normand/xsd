// Code generated by xgen. DO NOT EDIT.

export enum ST_TransitionSideDirectionType {
	l = 'l',
	u = 'u',
	r = 'r',
	d = 'd',
}

export enum ST_TransitionCornerDirectionType {
	lu = 'lu',
	ru = 'ru',
	ld = 'ld',
	rd = 'rd',
}

export enum ST_TransitionInOutDirectionType {
	out = 'out',
	in = 'in',
}

export class CT_SideDirectionTransition {
	DirAttr: string | null;
}

export class CT_CornerDirectionTransition {
	DirAttr: string | null;
}

export class ST_TransitionEightDirectionType {
	ST_TransitionSideDirectionType: string;
	ST_TransitionCornerDirectionType: string;
}

export class CT_EightDirectionTransition {
	DirAttr: ST_TransitionEightDirectionType | null;
}

export class CT_OrientationTransition {
	DirAttr: string | null;
}

export class CT_InOutTransition {
	DirAttr: string | null;
}

export class CT_OptionalBlackTransition {
	ThruBlkAttr: boolean | null;
}

export class CT_SplitTransition {
	OrientAttr: string | null;
	DirAttr: string | null;
}

export class CT_WheelTransition {
	SpokesAttr: number | null;
}

export class CT_TransitionStartSoundAction {
	LoopAttr: boolean | null;
	Snd: Array<CT_EmbeddedWAVAudioFile>;
}

export class CT_TransitionSoundAction {
	StSnd: Array<CT_TransitionStartSoundAction>;
	EndSnd: Array<CT_Empty>;
}

export enum ST_TransitionSpeed {
	slow = 'slow',
	med = 'med',
	fast = 'fast',
}

export class CT_SlideTransition {
	SpdAttr: string | null;
	AdvClickAttr: boolean | null;
	AdvTmAttr: number | null;
	Blinds: Array<CT_OrientationTransition>;
	Checker: Array<CT_OrientationTransition>;
	Circle: Array<CT_Empty>;
	Dissolve: Array<CT_Empty>;
	Comb: Array<CT_OrientationTransition>;
	Cover: Array<CT_EightDirectionTransition>;
	Cut: Array<CT_OptionalBlackTransition>;
	Diamond: Array<CT_Empty>;
	Fade: Array<CT_OptionalBlackTransition>;
	Newsflash: Array<CT_Empty>;
	Plus: Array<CT_Empty>;
	Pull: Array<CT_EightDirectionTransition>;
	Push: Array<CT_SideDirectionTransition>;
	Random: Array<CT_Empty>;
	RandomBar: Array<CT_OrientationTransition>;
	Split: Array<CT_SplitTransition>;
	Strips: Array<CT_CornerDirectionTransition>;
	Wedge: Array<CT_Empty>;
	Wheel: Array<CT_WheelTransition>;
	Wipe: Array<CT_SideDirectionTransition>;
	Zoom: Array<CT_InOutTransition>;
	SndAc: Array<CT_TransitionSoundAction>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export enum ST_TLTimeIndefinite {
	indefinite = 'indefinite',
}

export class ST_TLTime {
	UnsignedInt: number;
	ST_TLTimeIndefinite: string;
}

export type ST_TLTimeNodeID = number;

export class CT_TLIterateIntervalTime {
	ValAttr: ST_TLTime;
}

export class CT_TLIterateIntervalPercentage {
	ValAttr: ST_PositivePercentage;
}

export enum ST_IterateType {
	el = 'el',
	wd = 'wd',
	lt = 'lt',
}

export class CT_TLIterateData {
	TypeAttr: string | null;
	BackwardsAttr: boolean | null;
	TmAbs: Array<CT_TLIterateIntervalTime>;
	TmPct: Array<CT_TLIterateIntervalPercentage>;
}

export class CT_TLSubShapeId {
	SpidAttr: string;
}

export class CT_TLTextTargetElement {
	CharRg: Array<CT_IndexRange>;
	PRg: Array<CT_IndexRange>;
}

export enum ST_TLChartSubelementType {
	gridLegend = 'gridLegend',
	series = 'series',
	category = 'category',
	ptInSeries = 'ptInSeries',
	ptInCategory = 'ptInCategory',
}

export class CT_TLOleChartTargetElement {
	TypeAttr: string;
	LvlAttr: number | null;
}

export class CT_TLShapeTargetElement {
	SpidAttr: number;
	Bg: Array<CT_Empty>;
	SubSp: Array<CT_TLSubShapeId>;
	OleChartEl: Array<CT_TLOleChartTargetElement>;
	TxEl: Array<CT_TLTextTargetElement>;
	GraphicEl: Array<CT_AnimationElementChoice>;
}

export class CT_TLTimeTargetElement {
	SldTgt: Array<CT_Empty>;
	SndTgt: Array<CT_EmbeddedWAVAudioFile>;
	SpTgt: Array<CT_TLShapeTargetElement>;
	InkTgt: Array<CT_TLSubShapeId>;
}

export class CT_TLTriggerTimeNodeID {
	ValAttr: number;
}

export enum ST_TLTriggerRuntimeNode {
	first = 'first',
	last = 'last',
	all = 'all',
}

export class CT_TLTriggerRuntimeNode {
	ValAttr: string;
}

export enum ST_TLTriggerEvent {
	onBegin = 'onBegin',
	onEnd = 'onEnd',
	begin = 'begin',
	end = 'end',
	onClick = 'onClick',
	onDblClick = 'onDblClick',
	onMouseOver = 'onMouseOver',
	onMouseOut = 'onMouseOut',
	onNext = 'onNext',
	onPrev = 'onPrev',
	onStopAudio = 'onStopAudio',
}

export class CT_TLTimeCondition {
	EvtAttr: string | null;
	DelayAttr: ST_TLTime | null;
	TgtEl: Array<CT_TLTimeTargetElement>;
	Tn: Array<CT_TLTriggerTimeNodeID>;
	Rtn: Array<CT_TLTriggerRuntimeNode>;
}

export class CT_TLTimeConditionList {
	Cond: Array<CT_TLTimeCondition>;
}

export class CT_TimeNodeList {
	Par: Array<CT_TLTimeNodeParallel>;
	Seq: Array<CT_TLTimeNodeSequence>;
	Excl: Array<CT_TLTimeNodeExclusive>;
	Anim: Array<CT_TLAnimateBehavior>;
	AnimClr: Array<CT_TLAnimateColorBehavior>;
	AnimEffect: Array<CT_TLAnimateEffectBehavior>;
	AnimMotion: Array<CT_TLAnimateMotionBehavior>;
	AnimRot: Array<CT_TLAnimateRotationBehavior>;
	AnimScale: Array<CT_TLAnimateScaleBehavior>;
	Cmd: Array<CT_TLCommandBehavior>;
	Set: Array<CT_TLSetBehavior>;
	Audio: Array<CT_TLMediaNodeAudio>;
	Video: Array<CT_TLMediaNodeVideo>;
}

export enum ST_TLTimeNodePresetClassType {
	entr = 'entr',
	exit = 'exit',
	emph = 'emph',
	path = 'path',
	verb = 'verb',
	mediacall = 'mediacall',
}

export enum ST_TLTimeNodeRestartType {
	always = 'always',
	whenNotActive = 'whenNotActive',
	never = 'never',
}

export enum ST_TLTimeNodeFillType {
	remove = 'remove',
	freeze = 'freeze',
	hold = 'hold',
	transition = 'transition',
}

export enum ST_TLTimeNodeSyncType {
	canSlip = 'canSlip',
	locked = 'locked',
}

export enum ST_TLTimeNodeMasterRelation {
	sameClick = 'sameClick',
	lastClick = 'lastClick',
	nextClick = 'nextClick',
}

export enum ST_TLTimeNodeType {
	clickEffect = 'clickEffect',
	withEffect = 'withEffect',
	afterEffect = 'afterEffect',
	mainSeq = 'mainSeq',
	interactiveSeq = 'interactiveSeq',
	clickPar = 'clickPar',
	withGroup = 'withGroup',
	afterGroup = 'afterGroup',
	tmRoot = 'tmRoot',
}

export class CT_TLCommonTimeNodeData {
	IdAttr: number | null;
	PresetIDAttr: number | null;
	PresetClassAttr: string | null;
	PresetSubtypeAttr: number | null;
	DurAttr: ST_TLTime | null;
	RepeatCountAttr: ST_TLTime | null;
	RepeatDurAttr: ST_TLTime | null;
	SpdAttr: ST_Percentage | null;
	AccelAttr: ST_PositiveFixedPercentage | null;
	DecelAttr: ST_PositiveFixedPercentage | null;
	AutoRevAttr: boolean | null;
	RestartAttr: string | null;
	FillAttr: string | null;
	SyncBehaviorAttr: string | null;
	TmFilterAttr: string | null;
	EvtFilterAttr: string | null;
	DisplayAttr: boolean | null;
	MasterRelAttr: string | null;
	BldLvlAttr: number | null;
	GrpIdAttr: number | null;
	AfterEffectAttr: boolean | null;
	NodeTypeAttr: string | null;
	NodePhAttr: boolean | null;
	StCondLst: Array<CT_TLTimeConditionList>;
	EndCondLst: Array<CT_TLTimeConditionList>;
	EndSync: Array<CT_TLTimeCondition>;
	Iterate: Array<CT_TLIterateData>;
	ChildTnLst: Array<CT_TimeNodeList>;
	SubTnLst: Array<CT_TimeNodeList>;
}

export class CT_TLTimeNodeParallel {
	CTn: Array<CT_TLCommonTimeNodeData>;
}

export enum ST_TLNextActionType {
	none = 'none',
	seek = 'seek',
}

export enum ST_TLPreviousActionType {
	none = 'none',
	skipTimed = 'skipTimed',
}

export class CT_TLTimeNodeSequence {
	ConcurrentAttr: boolean | null;
	PrevAcAttr: string | null;
	NextAcAttr: string | null;
	CTn: Array<CT_TLCommonTimeNodeData>;
	PrevCondLst: Array<CT_TLTimeConditionList>;
	NextCondLst: Array<CT_TLTimeConditionList>;
}

export class CT_TLTimeNodeExclusive {
	CTn: Array<CT_TLCommonTimeNodeData>;
}

export class CT_TLBehaviorAttributeNameList {
	AttrName: Array<string>;
}

export enum ST_TLBehaviorAdditiveType {
	base = 'base',
	sum = 'sum',
	repl = 'repl',
	mult = 'mult',
	none = 'none',
}

export enum ST_TLBehaviorAccumulateType {
	none = 'none',
	always = 'always',
}

export enum ST_TLBehaviorTransformType {
	pt = 'pt',
	img = 'img',
}

export enum ST_TLBehaviorOverrideType {
	normal = 'normal',
	childStyle = 'childStyle',
}

export class CT_TLCommonBehaviorData {
	AdditiveAttr: string | null;
	AccumulateAttr: string | null;
	XfrmTypeAttr: string | null;
	FromAttr: string | null;
	ToAttr: string | null;
	ByAttr: string | null;
	RctxAttr: string | null;
	OverrideAttr: string | null;
	CTn: Array<CT_TLCommonTimeNodeData>;
	TgtEl: Array<CT_TLTimeTargetElement>;
	AttrNameLst: Array<CT_TLBehaviorAttributeNameList>;
}

export class CT_TLAnimVariantBooleanVal {
	ValAttr: boolean;
}

export class CT_TLAnimVariantIntegerVal {
	ValAttr: number;
}

export class CT_TLAnimVariantFloatVal {
	ValAttr: number;
}

export class CT_TLAnimVariantStringVal {
	ValAttr: string;
}

export class CT_TLAnimVariant {
	BoolVal: Array<CT_TLAnimVariantBooleanVal>;
	IntVal: Array<CT_TLAnimVariantIntegerVal>;
	FltVal: Array<CT_TLAnimVariantFloatVal>;
	StrVal: Array<CT_TLAnimVariantStringVal>;
	ClrVal: Array<CT_Color>;
}

export class ST_TLTimeAnimateValueTime {
	ST_PositiveFixedPercentage: ST_PositiveFixedPercentage;
	ST_TLTimeIndefinite: string;
}

export class CT_TLTimeAnimateValue {
	TmAttr: ST_TLTimeAnimateValueTime | null;
	FmlaAttr: string | null;
	Val: Array<CT_TLAnimVariant>;
}

export class CT_TLTimeAnimateValueList {
	Tav: Array<CT_TLTimeAnimateValue>;
}

export enum ST_TLAnimateBehaviorCalcMode {
	discrete = 'discrete',
	lin = 'lin',
	fmla = 'fmla',
}

export enum ST_TLAnimateBehaviorValueType {
	str = 'str',
	num = 'num',
	clr = 'clr',
}

export class CT_TLAnimateBehavior {
	ByAttr: string | null;
	FromAttr: string | null;
	ToAttr: string | null;
	CalcmodeAttr: string | null;
	ValueTypeAttr: string | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
	TavLst: Array<CT_TLTimeAnimateValueList>;
}

export class CT_TLByRgbColorTransform {
	RAttr: ST_FixedPercentage;
	GAttr: ST_FixedPercentage;
	BAttr: ST_FixedPercentage;
}

export class CT_TLByHslColorTransform {
	HAttr: number;
	SAttr: ST_FixedPercentage;
	LAttr: ST_FixedPercentage;
}

export class CT_TLByAnimateColorTransform {
	Rgb: Array<CT_TLByRgbColorTransform>;
	Hsl: Array<CT_TLByHslColorTransform>;
}

export enum ST_TLAnimateColorSpace {
	rgb = 'rgb',
	hsl = 'hsl',
}

export enum ST_TLAnimateColorDirection {
	cw = 'cw',
	ccw = 'ccw',
}

export class CT_TLAnimateColorBehavior {
	ClrSpcAttr: string | null;
	DirAttr: string | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
	By: Array<CT_TLByAnimateColorTransform>;
	From: Array<CT_Color>;
	To: Array<CT_Color>;
}

export enum ST_TLAnimateEffectTransition {
	in = 'in',
	out = 'out',
	none = 'none',
}

export class CT_TLAnimateEffectBehavior {
	TransitionAttr: string | null;
	FilterAttr: string | null;
	PrLstAttr: string | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
	Progress: Array<CT_TLAnimVariant>;
}

export enum ST_TLAnimateMotionBehaviorOrigin {
	parent = 'parent',
	layout = 'layout',
}

export enum ST_TLAnimateMotionPathEditMode {
	relative = 'relative',
	fixed = 'fixed',
}

export class CT_TLPoint {
	XAttr: ST_Percentage;
	YAttr: ST_Percentage;
}

export class CT_TLAnimateMotionBehavior {
	OriginAttr: string | null;
	PathAttr: string | null;
	PathEditModeAttr: string | null;
	RAngAttr: number | null;
	PtsTypesAttr: string | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
	By: Array<CT_TLPoint>;
	From: Array<CT_TLPoint>;
	To: Array<CT_TLPoint>;
	RCtr: Array<CT_TLPoint>;
}

export class CT_TLAnimateRotationBehavior {
	ByAttr: number | null;
	FromAttr: number | null;
	ToAttr: number | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
}

export class CT_TLAnimateScaleBehavior {
	ZoomContentsAttr: boolean | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
	By: Array<CT_TLPoint>;
	From: Array<CT_TLPoint>;
	To: Array<CT_TLPoint>;
}

export enum ST_TLCommandType {
	evt = 'evt',
	call = 'call',
	verb = 'verb',
}

export class CT_TLCommandBehavior {
	TypeAttr: string | null;
	CmdAttr: string | null;
	CBhvr: Array<CT_TLCommonBehaviorData>;
}

export class CT_TLSetBehavior {
	CBhvr: Array<CT_TLCommonBehaviorData>;
	To: Array<CT_TLAnimVariant>;
}

export class CT_TLCommonMediaNodeData {
	VolAttr: ST_PositiveFixedPercentage | null;
	MuteAttr: boolean | null;
	NumSldAttr: number | null;
	ShowWhenStoppedAttr: boolean | null;
	CTn: Array<CT_TLCommonTimeNodeData>;
	TgtEl: Array<CT_TLTimeTargetElement>;
}

export class CT_TLMediaNodeAudio {
	IsNarrationAttr: boolean | null;
	CMediaNode: Array<CT_TLCommonMediaNodeData>;
}

export class CT_TLMediaNodeVideo {
	FullScrnAttr: boolean | null;
	CMediaNode: Array<CT_TLCommonMediaNodeData>;
}

export class AG_TLBuild {
	SpidAttr: number;
	GrpIdAttr: number;
	UiExpandAttr: boolean | null;
}

export class CT_TLTemplate {
	LvlAttr: number | null;
	TnLst: Array<CT_TimeNodeList>;
}

export class CT_TLTemplateList {
	Tmpl: Array<CT_TLTemplate>;
}

export enum ST_TLParaBuildType {
	allAtOnce = 'allAtOnce',
	p = 'p',
	cust = 'cust',
	whole = 'whole',
}

export class CT_TLBuildParagraph {
	AG_TLBuild: AG_TLBuild;
	BuildAttr: string | null;
	BldLvlAttr: number | null;
	AnimBgAttr: boolean | null;
	AutoUpdateAnimBgAttr: boolean | null;
	RevAttr: boolean | null;
	AdvAutoAttr: ST_TLTime | null;
	TmplLst: Array<CT_TLTemplateList>;
}

export enum ST_TLDiagramBuildType {
	whole = 'whole',
	depthByNode = 'depthByNode',
	depthByBranch = 'depthByBranch',
	breadthByNode = 'breadthByNode',
	breadthByLvl = 'breadthByLvl',
	cw = 'cw',
	cwIn = 'cwIn',
	cwOut = 'cwOut',
	ccw = 'ccw',
	ccwIn = 'ccwIn',
	ccwOut = 'ccwOut',
	inByRing = 'inByRing',
	outByRing = 'outByRing',
	up = 'up',
	down = 'down',
	allAtOnce = 'allAtOnce',
	cust = 'cust',
}

export class CT_TLBuildDiagram {
	AG_TLBuild: AG_TLBuild;
	BldAttr: string | null;
}

export enum ST_TLOleChartBuildType {
	allAtOnce = 'allAtOnce',
	series = 'series',
	category = 'category',
	seriesEl = 'seriesEl',
	categoryEl = 'categoryEl',
}

export class CT_TLOleBuildChart {
	AG_TLBuild: AG_TLBuild;
	BldAttr: string | null;
	AnimBgAttr: boolean | null;
}

export class CT_TLGraphicalObjectBuild {
	AG_TLBuild: AG_TLBuild;
	BldAsOne: Array<CT_Empty>;
	BldSub: Array<CT_AnimationGraphicalObjectBuildProperties>;
}

export class CT_BuildList {
	BldP: Array<CT_TLBuildParagraph>;
	BldDgm: Array<CT_TLBuildDiagram>;
	BldOleChart: Array<CT_TLOleBuildChart>;
	BldGraphic: Array<CT_TLGraphicalObjectBuild>;
}

export class CT_SlideTiming {
	TnLst: Array<CT_TimeNodeList>;
	BldLst: Array<CT_BuildList>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_Empty {
}

export type ST_Name = string;

export enum ST_Direction {
	horz = 'horz',
	vert = 'vert',
}

export type ST_Index = number;

export class CT_IndexRange {
	StAttr: number;
	EndAttr: number;
}

export class CT_SlideRelationshipListEntry {
	RIdAttr: string;
}

export class CT_SlideRelationshipList {
	Sld: Array<CT_SlideRelationshipListEntry>;
}

export class CT_CustomShowId {
	IdAttr: number;
}

export class EG_SlideListChoice {
	SldAll: CT_Empty;
	SldRg: CT_IndexRange;
	CustShow: CT_CustomShowId;
}

export class CT_CustomerData {
	RIdAttr: string;
}

export class CT_TagsData {
	RIdAttr: string;
}

export class CT_CustomerDataList {
	CustData: Array<CT_CustomerData>;
	Tags: Array<CT_TagsData>;
}

export class CT_Extension {
	UriAttr: string;
}

export class EG_ExtensionList {
	Ext: Array<CT_Extension>;
}

export class CT_ExtensionList {
	EG_ExtensionList: Array<EG_ExtensionList>;
}

export class CT_ExtensionListModify {
	ModAttr: boolean | null;
	EG_ExtensionList: Array<EG_ExtensionList>;
}

export class CT_CommentAuthor {
	IdAttr: number;
	NameAttr: string;
	InitialsAttr: string;
	LastIdxAttr: number;
	ClrIdxAttr: number;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CommentAuthorList {
	CmAuthor: Array<CT_CommentAuthor>;
}

export type CmAuthorLst = CT_CommentAuthorList;

export class CT_Comment {
	AuthorIdAttr: number;
	DtAttr: string | null;
	IdxAttr: number;
	Pos: Array<CT_Point2D>;
	Text: Array<string>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_CommentList {
	Cm: Array<CT_Comment>;
}

export type CmLst = CT_CommentList;

export class AG_Ole {
	NameAttr: string | null;
	ShowAsIconAttr: boolean | null;
	RIdAttr: string | null;
	ImgWAttr: number | null;
	ImgHAttr: number | null;
}

export enum ST_OleObjectFollowColorScheme {
	none = 'none',
	full = 'full',
	textAndBackground = 'textAndBackground',
}

export class CT_OleObjectEmbed {
	FollowColorSchemeAttr: string | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_OleObjectLink {
	UpdateAutomaticAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_OleObject {
	AG_Ole: AG_Ole;
	ProgIdAttr: string | null;
	Embed: Array<CT_OleObjectEmbed>;
	Link: Array<CT_OleObjectLink>;
	Pic: Array<CT_Picture>;
}

export type OleObj = CT_OleObject;

export class CT_Control {
	AG_Ole: AG_Ole;
	ExtLst: Array<CT_ExtensionList>;
	Pic: Array<CT_Picture>;
}

export class CT_ControlList {
	Control: Array<CT_Control>;
}

export type ST_SlideId = number;

export class CT_SlideIdListEntry {
	IdAttr: number;
	RIdAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SlideIdList {
	SldId: Array<CT_SlideIdListEntry>;
}

export type ST_SlideMasterId = number;

export class CT_SlideMasterIdListEntry {
	IdAttr: number | null;
	RIdAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SlideMasterIdList {
	SldMasterId: Array<CT_SlideMasterIdListEntry>;
}

export class CT_NotesMasterIdListEntry {
	RIdAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_NotesMasterIdList {
	NotesMasterId: Array<CT_NotesMasterIdListEntry>;
}

export class CT_HandoutMasterIdListEntry {
	RIdAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_HandoutMasterIdList {
	HandoutMasterId: Array<CT_HandoutMasterIdListEntry>;
}

export class CT_EmbeddedFontDataId {
	RIdAttr: string;
}

export class CT_EmbeddedFontListEntry {
	Font: Array<CT_TextFont>;
	Regular: Array<CT_EmbeddedFontDataId>;
	Bold: Array<CT_EmbeddedFontDataId>;
	Italic: Array<CT_EmbeddedFontDataId>;
	BoldItalic: Array<CT_EmbeddedFontDataId>;
}

export class CT_EmbeddedFontList {
	EmbeddedFont: Array<CT_EmbeddedFontListEntry>;
}

export class CT_SmartTags {
	RIdAttr: string;
}

export class CT_CustomShow {
	NameAttr: string;
	IdAttr: number;
	SldLst: Array<CT_SlideRelationshipList>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CustomShowList {
	CustShow: Array<CT_CustomShow>;
}

export enum ST_PhotoAlbumLayout {
	fitToSlide = 'fitToSlide',
	1pic = '1pic',
	2pic = '2pic',
	4pic = '4pic',
	1picTitle = '1picTitle',
	2picTitle = '2picTitle',
	4picTitle = '4picTitle',
}

export enum ST_PhotoAlbumFrameShape {
	frameStyle1 = 'frameStyle1',
	frameStyle2 = 'frameStyle2',
	frameStyle3 = 'frameStyle3',
	frameStyle4 = 'frameStyle4',
	frameStyle5 = 'frameStyle5',
	frameStyle6 = 'frameStyle6',
	frameStyle7 = 'frameStyle7',
}

export class CT_PhotoAlbum {
	BwAttr: boolean | null;
	ShowCaptionsAttr: boolean | null;
	LayoutAttr: string | null;
	FrameAttr: string | null;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_SlideSizeCoordinate = number;

export enum ST_SlideSizeType {
	screen4x3 = 'screen4x3',
	letter = 'letter',
	A4 = 'A4',
	35mm = '35mm',
	overhead = 'overhead',
	banner = 'banner',
	custom = 'custom',
	ledger = 'ledger',
	A3 = 'A3',
	B4ISO = 'B4ISO',
	B5ISO = 'B5ISO',
	B4JIS = 'B4JIS',
	B5JIS = 'B5JIS',
	hagakiCard = 'hagakiCard',
	screen16x9 = 'screen16x9',
	screen16x10 = 'screen16x10',
}

export class CT_SlideSize {
	CxAttr: number;
	CyAttr: number;
	TypeAttr: string | null;
}

export class CT_Kinsoku {
	LangAttr: string | null;
	InvalStCharsAttr: string;
	InvalEndCharsAttr: string;
}

export type ST_BookmarkIdSeed = number;

export class CT_ModifyVerifier {
	AlgorithmNameAttr: string | null;
	HashValueAttr: Array<any> | null;
	SaltValueAttr: Array<any> | null;
	SpinValueAttr: number | null;
}

export class CT_Presentation {
	ServerZoomAttr: ST_Percentage | null;
	FirstSlideNumAttr: number | null;
	ShowSpecialPlsOnTitleSldAttr: boolean | null;
	RtlAttr: boolean | null;
	RemovePersonalInfoOnSaveAttr: boolean | null;
	CompatModeAttr: boolean | null;
	StrictFirstAndLastCharsAttr: boolean | null;
	EmbedTrueTypeFontsAttr: boolean | null;
	SaveSubsetFontsAttr: boolean | null;
	AutoCompressPicturesAttr: boolean | null;
	BookmarkIdSeedAttr: number | null;
	ConformanceAttr: string | null;
	SldMasterIdLst: Array<CT_SlideMasterIdList>;
	NotesMasterIdLst: Array<CT_NotesMasterIdList>;
	HandoutMasterIdLst: Array<CT_HandoutMasterIdList>;
	SldIdLst: Array<CT_SlideIdList>;
	SldSz: Array<CT_SlideSize>;
	NotesSz: Array<CT_PositiveSize2D>;
	SmartTags: Array<CT_SmartTags>;
	EmbeddedFontLst: Array<CT_EmbeddedFontList>;
	CustShowLst: Array<CT_CustomShowList>;
	PhotoAlbum: Array<CT_PhotoAlbum>;
	CustDataLst: Array<CT_CustomerDataList>;
	Kinsoku: Array<CT_Kinsoku>;
	DefaultTextStyle: Array<CT_TextListStyle>;
	ModifyVerifier: Array<CT_ModifyVerifier>;
	ExtLst: Array<CT_ExtensionList>;
}

export type Presentation = CT_Presentation;

export class CT_HtmlPublishProperties {
	ShowSpeakerNotesAttr: boolean | null;
	TargetAttr: string | null;
	TitleAttr: string | null;
	RIdAttr: string;
	EG_SlideListChoice: Array<EG_SlideListChoice>;
	ExtLst: Array<CT_ExtensionList>;
}

export enum ST_PrintWhat {
	slides = 'slides',
	handouts1 = 'handouts1',
	handouts2 = 'handouts2',
	handouts3 = 'handouts3',
	handouts4 = 'handouts4',
	handouts6 = 'handouts6',
	handouts9 = 'handouts9',
	notes = 'notes',
	outline = 'outline',
}

export enum ST_PrintColorMode {
	bw = 'bw',
	gray = 'gray',
	clr = 'clr',
}

export class CT_PrintProperties {
	PrnWhatAttr: string | null;
	ClrModeAttr: string | null;
	HiddenSlidesAttr: boolean | null;
	ScaleToFitPaperAttr: boolean | null;
	FrameSlidesAttr: boolean | null;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ShowInfoBrowse {
	ShowScrollbarAttr: boolean | null;
}

export class CT_ShowInfoKiosk {
	RestartAttr: number | null;
}

export class EG_ShowType {
	Present: CT_Empty;
	Browse: CT_ShowInfoBrowse;
	Kiosk: CT_ShowInfoKiosk;
}

export class CT_ShowProperties {
	LoopAttr: boolean | null;
	ShowNarrationAttr: boolean | null;
	ShowAnimationAttr: boolean | null;
	UseTimingsAttr: boolean | null;
	EG_ShowType: Array<EG_ShowType>;
	EG_SlideListChoice: Array<EG_SlideListChoice>;
	PenClr: Array<CT_Color>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PresentationProperties {
	PrnPr: Array<CT_PrintProperties>;
	ShowPr: Array<CT_ShowProperties>;
	ClrMru: Array<CT_ColorMRU>;
	ExtLst: Array<CT_ExtensionList>;
}

export type PresentationPr = CT_PresentationProperties;

export class CT_HeaderFooter {
	SldNumAttr: boolean | null;
	HdrAttr: boolean | null;
	FtrAttr: boolean | null;
	DtAttr: boolean | null;
	ExtLst: Array<CT_ExtensionListModify>;
}

export enum ST_PlaceholderType {
	title = 'title',
	body = 'body',
	ctrTitle = 'ctrTitle',
	subTitle = 'subTitle',
	dt = 'dt',
	sldNum = 'sldNum',
	ftr = 'ftr',
	hdr = 'hdr',
	obj = 'obj',
	chart = 'chart',
	tbl = 'tbl',
	clipArt = 'clipArt',
	dgm = 'dgm',
	media = 'media',
	sldImg = 'sldImg',
	pic = 'pic',
}

export enum ST_PlaceholderSize {
	full = 'full',
	half = 'half',
	quarter = 'quarter',
}

export class CT_Placeholder {
	TypeAttr: string | null;
	OrientAttr: string | null;
	SzAttr: string | null;
	IdxAttr: number | null;
	HasCustomPromptAttr: boolean | null;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_ApplicationNonVisualDrawingProps {
	IsPhotoAttr: boolean | null;
	UserDrawnAttr: boolean | null;
	AEG_Media: Array<EG_Media>;
	Ph: Array<CT_Placeholder>;
	CustDataLst: Array<CT_CustomerDataList>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ShapeNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvSpPr: Array<CT_NonVisualDrawingShapeProps>;
	NvPr: Array<CT_ApplicationNonVisualDrawingProps>;
}

export class CT_Shape {
	UseBgFillAttr: boolean | null;
	NvSpPr: Array<CT_ShapeNonVisual>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	TxBody: Array<CT_TextBody>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_ConnectorNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvCxnSpPr: Array<CT_NonVisualConnectorProperties>;
	NvPr: Array<CT_ApplicationNonVisualDrawingProps>;
}

export class CT_Connector {
	NvCxnSpPr: Array<CT_ConnectorNonVisual>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_PictureNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvPicPr: Array<CT_NonVisualPictureProperties>;
	NvPr: Array<CT_ApplicationNonVisualDrawingProps>;
}

export class CT_Picture {
	NvPicPr: Array<CT_PictureNonVisual>;
	BlipFill: Array<CT_BlipFillProperties>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_GraphicalObjectFrameNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvGraphicFramePr: Array<CT_NonVisualGraphicFrameProperties>;
	NvPr: Array<CT_ApplicationNonVisualDrawingProps>;
}

export class CT_GraphicalObjectFrame {
	BwModeAttr: string | null;
	NvGraphicFramePr: Array<CT_GraphicalObjectFrameNonVisual>;
	Xfrm: Array<CT_Transform2D>;
	AGraphic: Array<CT_GraphicalObject>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_GroupShapeNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvGrpSpPr: Array<CT_NonVisualGroupDrawingShapeProps>;
	NvPr: Array<CT_ApplicationNonVisualDrawingProps>;
}

export class CT_GroupShape {
	NvGrpSpPr: Array<CT_GroupShapeNonVisual>;
	GrpSpPr: Array<CT_GroupShapeProperties>;
	Sp: Array<CT_Shape>;
	GrpSp: Array<CT_GroupShape>;
	GraphicFrame: Array<CT_GraphicalObjectFrame>;
	CxnSp: Array<CT_Connector>;
	Pic: Array<CT_Picture>;
	ContentPart: Array<CT_Rel>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export class CT_Rel {
	RIdAttr: string;
}

export class EG_TopLevelSlide {
	ClrMap: Array<CT_ColorMapping>;
}

export class EG_ChildSlide {
	ClrMapOvr: Array<CT_ColorMappingOverride>;
}

export class AG_ChildSlide {
	ShowMasterSpAttr: boolean | null;
	ShowMasterPhAnimAttr: boolean | null;
}

export class CT_BackgroundProperties {
	ShadeToTitleAttr: boolean | null;
	AEG_FillProperties: Array<EG_FillProperties>;
	AEG_EffectProperties: Array<EG_EffectProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class EG_Background {
	BgPr: CT_BackgroundProperties;
	BgRef: CT_StyleMatrixReference;
}

export class CT_Background {
	BwModeAttr: string | null;
	EG_Background: EG_Background;
}

export class CT_CommonSlideData {
	NameAttr: string | null;
	Bg: Array<CT_Background>;
	SpTree: Array<CT_GroupShape>;
	CustDataLst: Array<CT_CustomerDataList>;
	Controls: Array<CT_ControlList>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Slide {
	AG_ChildSlide: AG_ChildSlide;
	ShowAttr: boolean | null;
	EG_ChildSlide: Array<EG_ChildSlide>;
	CSld: Array<CT_CommonSlideData>;
	Transition: Array<CT_SlideTransition>;
	Timing: Array<CT_SlideTiming>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export type Sld = CT_Slide;

export enum ST_SlideLayoutType {
	title = 'title',
	tx = 'tx',
	twoColTx = 'twoColTx',
	tbl = 'tbl',
	txAndChart = 'txAndChart',
	chartAndTx = 'chartAndTx',
	dgm = 'dgm',
	chart = 'chart',
	txAndClipArt = 'txAndClipArt',
	clipArtAndTx = 'clipArtAndTx',
	titleOnly = 'titleOnly',
	blank = 'blank',
	txAndObj = 'txAndObj',
	objAndTx = 'objAndTx',
	objOnly = 'objOnly',
	obj = 'obj',
	txAndMedia = 'txAndMedia',
	mediaAndTx = 'mediaAndTx',
	objOverTx = 'objOverTx',
	txOverObj = 'txOverObj',
	txAndTwoObj = 'txAndTwoObj',
	twoObjAndTx = 'twoObjAndTx',
	twoObjOverTx = 'twoObjOverTx',
	fourObj = 'fourObj',
	vertTx = 'vertTx',
	clipArtAndVertTx = 'clipArtAndVertTx',
	vertTitleAndTx = 'vertTitleAndTx',
	vertTitleAndTxOverChart = 'vertTitleAndTxOverChart',
	twoObj = 'twoObj',
	objAndTwoObj = 'objAndTwoObj',
	twoObjAndObj = 'twoObjAndObj',
	cust = 'cust',
	secHead = 'secHead',
	twoTxTwoObj = 'twoTxTwoObj',
	objTx = 'objTx',
	picTx = 'picTx',
}

export class CT_SlideLayout {
	AG_ChildSlide: AG_ChildSlide;
	MatchingNameAttr: string | null;
	TypeAttr: string | null;
	PreserveAttr: boolean | null;
	UserDrawnAttr: boolean | null;
	EG_ChildSlide: Array<EG_ChildSlide>;
	CSld: Array<CT_CommonSlideData>;
	Transition: Array<CT_SlideTransition>;
	Timing: Array<CT_SlideTiming>;
	Hf: Array<CT_HeaderFooter>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export type SldLayout = CT_SlideLayout;

export class CT_SlideMasterTextStyles {
	TitleStyle: Array<CT_TextListStyle>;
	BodyStyle: Array<CT_TextListStyle>;
	OtherStyle: Array<CT_TextListStyle>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_SlideLayoutId = number;

export class CT_SlideLayoutIdListEntry {
	IdAttr: number | null;
	RIdAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SlideLayoutIdList {
	SldLayoutId: Array<CT_SlideLayoutIdListEntry>;
}

export class CT_SlideMaster {
	PreserveAttr: boolean | null;
	EG_TopLevelSlide: Array<EG_TopLevelSlide>;
	CSld: Array<CT_CommonSlideData>;
	SldLayoutIdLst: Array<CT_SlideLayoutIdList>;
	Transition: Array<CT_SlideTransition>;
	Timing: Array<CT_SlideTiming>;
	Hf: Array<CT_HeaderFooter>;
	TxStyles: Array<CT_SlideMasterTextStyles>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export type SldMaster = CT_SlideMaster;

export class CT_HandoutMaster {
	EG_TopLevelSlide: Array<EG_TopLevelSlide>;
	CSld: Array<CT_CommonSlideData>;
	Hf: Array<CT_HeaderFooter>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export type HandoutMaster = CT_HandoutMaster;

export class CT_NotesMaster {
	EG_TopLevelSlide: Array<EG_TopLevelSlide>;
	CSld: Array<CT_CommonSlideData>;
	Hf: Array<CT_HeaderFooter>;
	NotesStyle: Array<CT_TextListStyle>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export type NotesMaster = CT_NotesMaster;

export class CT_NotesSlide {
	AG_ChildSlide: AG_ChildSlide;
	EG_ChildSlide: Array<EG_ChildSlide>;
	CSld: Array<CT_CommonSlideData>;
	ExtLst: Array<CT_ExtensionListModify>;
}

export type Notes = CT_NotesSlide;

export class CT_SlideSyncProperties {
	ServerSldIdAttr: string;
	ServerSldModifiedTimeAttr: string;
	ClientInsertedTimeAttr: string;
	ExtLst: Array<CT_ExtensionList>;
}

export type SldSyncPr = CT_SlideSyncProperties;

export class CT_StringTag {
	NameAttr: string;
	ValAttr: string;
}

export class CT_TagList {
	Tag: Array<CT_StringTag>;
}

export type TagLst = CT_TagList;

export enum ST_SplitterBarState {
	minimized = 'minimized',
	restored = 'restored',
	maximized = 'maximized',
}

export enum ST_ViewType {
	sldView = 'sldView',
	sldMasterView = 'sldMasterView',
	notesView = 'notesView',
	handoutView = 'handoutView',
	notesMasterView = 'notesMasterView',
	outlineView = 'outlineView',
	sldSorterView = 'sldSorterView',
	sldThumbnailView = 'sldThumbnailView',
}

export class CT_NormalViewPortion {
	SzAttr: ST_PositiveFixedPercentage;
	AutoAdjustAttr: boolean | null;
}

export class CT_NormalViewProperties {
	ShowOutlineIconsAttr: boolean | null;
	SnapVertSplitterAttr: boolean | null;
	VertBarStateAttr: string | null;
	HorzBarStateAttr: string | null;
	PreferSingleViewAttr: boolean | null;
	RestoredLeft: Array<CT_NormalViewPortion>;
	RestoredTop: Array<CT_NormalViewPortion>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_CommonViewProperties {
	VarScaleAttr: boolean | null;
	Scale: Array<CT_Scale2D>;
	Origin: Array<CT_Point2D>;
}

export class CT_NotesTextViewProperties {
	CViewPr: Array<CT_CommonViewProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_OutlineViewSlideEntry {
	RIdAttr: string;
	CollapseAttr: boolean | null;
}

export class CT_OutlineViewSlideList {
	Sld: Array<CT_OutlineViewSlideEntry>;
}

export class CT_OutlineViewProperties {
	CViewPr: Array<CT_CommonViewProperties>;
	SldLst: Array<CT_OutlineViewSlideList>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SlideSorterViewProperties {
	ShowFormattingAttr: boolean | null;
	CViewPr: Array<CT_CommonViewProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Guide {
	OrientAttr: string | null;
	PosAttr: ST_Coordinate32 | null;
}

export class CT_GuideList {
	Guide: Array<CT_Guide>;
}

export class CT_CommonSlideViewProperties {
	SnapToGridAttr: boolean | null;
	SnapToObjectsAttr: boolean | null;
	ShowGuidesAttr: boolean | null;
	CViewPr: Array<CT_CommonViewProperties>;
	GuideLst: Array<CT_GuideList>;
}

export class CT_SlideViewProperties {
	CSldViewPr: Array<CT_CommonSlideViewProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_NotesViewProperties {
	CSldViewPr: Array<CT_CommonSlideViewProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ViewProperties {
	LastViewAttr: string | null;
	ShowCommentsAttr: boolean | null;
	NormalViewPr: Array<CT_NormalViewProperties>;
	SlideViewPr: Array<CT_SlideViewProperties>;
	OutlineViewPr: Array<CT_OutlineViewProperties>;
	NotesTextViewPr: Array<CT_NotesTextViewProperties>;
	SorterViewPr: Array<CT_SlideSorterViewProperties>;
	NotesViewPr: Array<CT_NotesViewProperties>;
	GridSpacing: Array<CT_PositiveSize2D>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ViewPr = CT_ViewProperties;
