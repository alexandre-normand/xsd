// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

export class CT_Boolean {
	ValAttr: boolean | null;
}

export class CT_Double {
	ValAttr: number;
}

export class CT_UnsignedInt {
	ValAttr: number;
}

export class CT_RelId {
	RIdAttr: string;
}

export class CT_Extension {
	UriAttr: string | null;
}

export class CT_ExtensionList {
	Ext: Array<CT_Extension>;
}

export class CT_NumVal {
	IdxAttr: number;
	FormatCodeAttr: string | null;
	V: Array<string>;
}

export class CT_NumData {
	FormatCode: Array<string>;
	PtCount: Array<CT_UnsignedInt>;
	Pt: Array<CT_NumVal>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_NumRef {
	F: Array<string>;
	NumCache: Array<CT_NumData>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_NumDataSource {
	NumRef: Array<CT_NumRef>;
	NumLit: Array<CT_NumData>;
}

export class CT_StrVal {
	IdxAttr: number;
	V: Array<string>;
}

export class CT_StrData {
	PtCount: Array<CT_UnsignedInt>;
	Pt: Array<CT_StrVal>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_StrRef {
	F: Array<string>;
	StrCache: Array<CT_StrData>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Tx {
	StrRef: Array<CT_StrRef>;
	Rich: Array<CT_TextBody>;
}

export class CT_TextLanguageID {
	ValAttr: string;
}

export class CT_Lvl {
	Pt: Array<CT_StrVal>;
}

export class CT_MultiLvlStrData {
	PtCount: Array<CT_UnsignedInt>;
	Lvl: Array<CT_Lvl>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_MultiLvlStrRef {
	F: Array<string>;
	MultiLvlStrCache: Array<CT_MultiLvlStrData>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_AxDataSource {
	MultiLvlStrRef: Array<CT_MultiLvlStrRef>;
	NumRef: Array<CT_NumRef>;
	NumLit: Array<CT_NumData>;
	StrRef: Array<CT_StrRef>;
	StrLit: Array<CT_StrData>;
}

export class CT_SerTx {
	StrRef: Array<CT_StrRef>;
	V: Array<string>;
}

export type ST_LayoutTarget = string;

export class CT_LayoutTarget {
	ValAttr: string | null;
}

export type ST_LayoutMode = string;

export class CT_LayoutMode {
	ValAttr: string | null;
}

export class CT_ManualLayout {
	LayoutTarget: Array<CT_LayoutTarget>;
	XMode: Array<CT_LayoutMode>;
	YMode: Array<CT_LayoutMode>;
	WMode: Array<CT_LayoutMode>;
	HMode: Array<CT_LayoutMode>;
	X: Array<CT_Double>;
	Y: Array<CT_Double>;
	W: Array<CT_Double>;
	H: Array<CT_Double>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Layout {
	ManualLayout: Array<CT_ManualLayout>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Title {
	Tx: Array<CT_Tx>;
	Layout: Array<CT_Layout>;
	Overlay: Array<CT_Boolean>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_RotX = Any;

export class CT_RotX {
	ValAttr: Any | null;
}

export class ST_HPercent {
	ST_HPercentWithSymbol: ST_HPercentWithSymbol;
}

export type ST_HPercentWithSymbol = string;

export class CT_HPercent {
	ValAttr: ST_HPercent | null;
}

export type ST_RotY = number;

export class CT_RotY {
	ValAttr: number | null;
}

export class ST_DepthPercent {
	ST_DepthPercentWithSymbol: ST_DepthPercentWithSymbol;
}

export type ST_DepthPercentWithSymbol = string;

export class CT_DepthPercent {
	ValAttr: ST_DepthPercent | null;
}

export type ST_Perspective = Any;

export class CT_Perspective {
	ValAttr: Any | null;
}

export class CT_View3D {
	RotX: Array<CT_RotX>;
	HPercent: Array<CT_HPercent>;
	RotY: Array<CT_RotY>;
	DepthPercent: Array<CT_DepthPercent>;
	RAngAx: Array<CT_Boolean>;
	Perspective: Array<CT_Perspective>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Surface {
	Thickness: Array<CT_Thickness>;
	SpPr: Array<CT_ShapeProperties>;
	PictureOptions: Array<CT_PictureOptions>;
	ExtLst: Array<CT_ExtensionList>;
}

export class ST_Thickness {
	ST_ThicknessPercent: ST_ThicknessPercent;
}

export type ST_ThicknessPercent = string;

export class CT_Thickness {
	ValAttr: ST_Thickness;
}

export class CT_DTable {
	ShowHorzBorder: Array<CT_Boolean>;
	ShowVertBorder: Array<CT_Boolean>;
	ShowOutline: Array<CT_Boolean>;
	ShowKeys: Array<CT_Boolean>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	ExtLst: Array<CT_ExtensionList>;
}

export class ST_GapAmount {
	ST_GapAmountPercent: ST_GapAmountPercent;
}

export type ST_GapAmountPercent = string;

export class CT_GapAmount {
	ValAttr: ST_GapAmount | null;
}

export class ST_Overlap {
	ST_OverlapPercent: ST_OverlapPercent;
}

export type ST_OverlapPercent = string;

export class CT_Overlap {
	ValAttr: ST_Overlap | null;
}

export class ST_BubbleScale {
	ST_BubbleScalePercent: ST_BubbleScalePercent;
}

export type ST_BubbleScalePercent = string;

export class CT_BubbleScale {
	ValAttr: ST_BubbleScale | null;
}

export type ST_SizeRepresents = string;

export class CT_SizeRepresents {
	ValAttr: string | null;
}

export type ST_FirstSliceAng = number;

export class CT_FirstSliceAng {
	ValAttr: number | null;
}

export class ST_HoleSize {
	ST_HoleSizePercent: ST_HoleSizePercent;
}

export type ST_HoleSizePercent = string;

export class CT_HoleSize {
	ValAttr: ST_HoleSize | null;
}

export type ST_SplitType = string;

export class CT_SplitType {
	ValAttr: string | null;
}

export class CT_CustSplit {
	SecondPiePt: Array<CT_UnsignedInt>;
}

export class ST_SecondPieSize {
	ST_SecondPieSizePercent: ST_SecondPieSizePercent;
}

export type ST_SecondPieSizePercent = string;

export class CT_SecondPieSize {
	ValAttr: ST_SecondPieSize | null;
}

export class CT_NumFmt {
	FormatCodeAttr: string;
	SourceLinkedAttr: boolean | null;
}

export type ST_LblAlgn = string;

export class CT_LblAlgn {
	ValAttr: string;
}

export type ST_DLblPos = string;

export class CT_DLblPos {
	ValAttr: string;
}

export class EG_DLblShared {
	NumFmt: Array<CT_NumFmt>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	DLblPos: Array<CT_DLblPos>;
	ShowLegendKey: Array<CT_Boolean>;
	ShowVal: Array<CT_Boolean>;
	ShowCatName: Array<CT_Boolean>;
	ShowSerName: Array<CT_Boolean>;
	ShowPercent: Array<CT_Boolean>;
	ShowBubbleSize: Array<CT_Boolean>;
	Separator: Array<string>;
}

export class Group_DLbl {
	Layout: Array<CT_Layout>;
	Tx: Array<CT_Tx>;
	EG_DLblShared: Array<EG_DLblShared>;
}

export class CT_DLbl {
	Group_DLbl: Array<Group_DLbl>;
	Idx: Array<CT_UnsignedInt>;
	Delete: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export class Group_DLbls {
	ShowLeaderLines: Array<CT_Boolean>;
	LeaderLines: Array<CT_ChartLines>;
	EG_DLblShared: Array<EG_DLblShared>;
}

export class CT_DLbls {
	Group_DLbls: Array<Group_DLbls>;
	DLbl: Array<CT_DLbl>;
	Delete: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_MarkerStyle = string;

export class CT_MarkerStyle {
	ValAttr: string;
}

export type ST_MarkerSize = Any;

export class CT_MarkerSize {
	ValAttr: Any | null;
}

export class CT_Marker {
	Symbol: Array<CT_MarkerStyle>;
	Size: Array<CT_MarkerSize>;
	SpPr: Array<CT_ShapeProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_DPt {
	Idx: Array<CT_UnsignedInt>;
	InvertIfNegative: Array<CT_Boolean>;
	Marker: Array<CT_Marker>;
	Bubble3D: Array<CT_Boolean>;
	Explosion: Array<CT_UnsignedInt>;
	SpPr: Array<CT_ShapeProperties>;
	PictureOptions: Array<CT_PictureOptions>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_TrendlineType = string;

export class CT_TrendlineType {
	ValAttr: string | null;
}

export type ST_Order = Any;

export class CT_Order {
	ValAttr: Any | null;
}

export type ST_Period = number;

export class CT_Period {
	ValAttr: number | null;
}

export class CT_TrendlineLbl {
	Layout: Array<CT_Layout>;
	Tx: Array<CT_Tx>;
	NumFmt: Array<CT_NumFmt>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Trendline {
	Name: Array<string>;
	SpPr: Array<CT_ShapeProperties>;
	TrendlineType: Array<CT_TrendlineType>;
	Order: Array<CT_Order>;
	Period: Array<CT_Period>;
	Forward: Array<CT_Double>;
	Backward: Array<CT_Double>;
	Intercept: Array<CT_Double>;
	DispRSqr: Array<CT_Boolean>;
	DispEq: Array<CT_Boolean>;
	TrendlineLbl: Array<CT_TrendlineLbl>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_ErrDir = string;

export class CT_ErrDir {
	ValAttr: string;
}

export type ST_ErrBarType = string;

export class CT_ErrBarType {
	ValAttr: string | null;
}

export type ST_ErrValType = string;

export class CT_ErrValType {
	ValAttr: string | null;
}

export class CT_ErrBars {
	ErrDir: Array<CT_ErrDir>;
	ErrBarType: Array<CT_ErrBarType>;
	ErrValType: Array<CT_ErrValType>;
	NoEndCap: Array<CT_Boolean>;
	Plus: Array<CT_NumDataSource>;
	Minus: Array<CT_NumDataSource>;
	Val: Array<CT_Double>;
	SpPr: Array<CT_ShapeProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_UpDownBar {
	SpPr: Array<CT_ShapeProperties>;
}

export class CT_UpDownBars {
	GapWidth: Array<CT_GapAmount>;
	UpBars: Array<CT_UpDownBar>;
	DownBars: Array<CT_UpDownBar>;
	ExtLst: Array<CT_ExtensionList>;
}

export class EG_SerShared {
	Idx: Array<CT_UnsignedInt>;
	Order: Array<CT_UnsignedInt>;
	Tx: Array<CT_SerTx>;
	SpPr: Array<CT_ShapeProperties>;
}

export class CT_LineSer {
	EG_SerShared: Array<EG_SerShared>;
	Marker: Array<CT_Marker>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Trendline: Array<CT_Trendline>;
	ErrBars: Array<CT_ErrBars>;
	Cat: Array<CT_AxDataSource>;
	Val: Array<CT_NumDataSource>;
	Smooth: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ScatterSer {
	EG_SerShared: Array<EG_SerShared>;
	Marker: Array<CT_Marker>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Trendline: Array<CT_Trendline>;
	ErrBars: Array<CT_ErrBars>;
	XVal: Array<CT_AxDataSource>;
	YVal: Array<CT_NumDataSource>;
	Smooth: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_RadarSer {
	EG_SerShared: Array<EG_SerShared>;
	Marker: Array<CT_Marker>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Cat: Array<CT_AxDataSource>;
	Val: Array<CT_NumDataSource>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_BarSer {
	EG_SerShared: Array<EG_SerShared>;
	InvertIfNegative: Array<CT_Boolean>;
	PictureOptions: Array<CT_PictureOptions>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Trendline: Array<CT_Trendline>;
	ErrBars: Array<CT_ErrBars>;
	Cat: Array<CT_AxDataSource>;
	Val: Array<CT_NumDataSource>;
	Shape: Array<CT_Shape>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_AreaSer {
	EG_SerShared: Array<EG_SerShared>;
	PictureOptions: Array<CT_PictureOptions>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Trendline: Array<CT_Trendline>;
	ErrBars: Array<CT_ErrBars>;
	Cat: Array<CT_AxDataSource>;
	Val: Array<CT_NumDataSource>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PieSer {
	EG_SerShared: Array<EG_SerShared>;
	Explosion: Array<CT_UnsignedInt>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Cat: Array<CT_AxDataSource>;
	Val: Array<CT_NumDataSource>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_BubbleSer {
	EG_SerShared: Array<EG_SerShared>;
	InvertIfNegative: Array<CT_Boolean>;
	DPt: Array<CT_DPt>;
	DLbls: Array<CT_DLbls>;
	Trendline: Array<CT_Trendline>;
	ErrBars: Array<CT_ErrBars>;
	XVal: Array<CT_AxDataSource>;
	YVal: Array<CT_NumDataSource>;
	BubbleSize: Array<CT_NumDataSource>;
	Bubble3D: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SurfaceSer {
	EG_SerShared: Array<EG_SerShared>;
	Cat: Array<CT_AxDataSource>;
	Val: Array<CT_NumDataSource>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_Grouping = string;

export class CT_Grouping {
	ValAttr: string | null;
}

export class CT_ChartLines {
	SpPr: Array<CT_ShapeProperties>;
}

export class EG_LineChartShared {
	Grouping: Array<CT_Grouping>;
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_LineSer>;
	DLbls: Array<CT_DLbls>;
	DropLines: Array<CT_ChartLines>;
}

export class CT_LineChart {
	EG_LineChartShared: Array<EG_LineChartShared>;
	HiLowLines: Array<CT_ChartLines>;
	UpDownBars: Array<CT_UpDownBars>;
	Marker: Array<CT_Boolean>;
	Smooth: Array<CT_Boolean>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Line3DChart {
	EG_LineChartShared: Array<EG_LineChartShared>;
	GapDepth: Array<CT_GapAmount>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_StockChart {
	Ser: Array<CT_LineSer>;
	DLbls: Array<CT_DLbls>;
	DropLines: Array<CT_ChartLines>;
	HiLowLines: Array<CT_ChartLines>;
	UpDownBars: Array<CT_UpDownBars>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_ScatterStyle = string;

export class CT_ScatterStyle {
	ValAttr: string | null;
}

export class CT_ScatterChart {
	ScatterStyle: Array<CT_ScatterStyle>;
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_ScatterSer>;
	DLbls: Array<CT_DLbls>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_RadarStyle = string;

export class CT_RadarStyle {
	ValAttr: string | null;
}

export class CT_RadarChart {
	RadarStyle: Array<CT_RadarStyle>;
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_RadarSer>;
	DLbls: Array<CT_DLbls>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_BarGrouping = string;

export class CT_BarGrouping {
	ValAttr: string | null;
}

export type ST_BarDir = string;

export class CT_BarDir {
	ValAttr: string | null;
}

export type ST_Shape = string;

export class CT_Shape {
	ValAttr: string | null;
}

export class EG_BarChartShared {
	BarDir: Array<CT_BarDir>;
	Grouping: Array<CT_BarGrouping>;
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_BarSer>;
	DLbls: Array<CT_DLbls>;
}

export class CT_BarChart {
	EG_BarChartShared: Array<EG_BarChartShared>;
	GapWidth: Array<CT_GapAmount>;
	Overlap: Array<CT_Overlap>;
	SerLines: Array<CT_ChartLines>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Bar3DChart {
	EG_BarChartShared: Array<EG_BarChartShared>;
	GapWidth: Array<CT_GapAmount>;
	GapDepth: Array<CT_GapAmount>;
	Shape: Array<CT_Shape>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class EG_AreaChartShared {
	Grouping: Array<CT_Grouping>;
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_AreaSer>;
	DLbls: Array<CT_DLbls>;
	DropLines: Array<CT_ChartLines>;
}

export class CT_AreaChart {
	EG_AreaChartShared: Array<EG_AreaChartShared>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Area3DChart {
	EG_AreaChartShared: Array<EG_AreaChartShared>;
	GapDepth: Array<CT_GapAmount>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class EG_PieChartShared {
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_PieSer>;
	DLbls: Array<CT_DLbls>;
}

export class CT_PieChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	FirstSliceAng: Array<CT_FirstSliceAng>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Pie3DChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_DoughnutChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	FirstSliceAng: Array<CT_FirstSliceAng>;
	HoleSize: Array<CT_HoleSize>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_OfPieType = string;

export class CT_OfPieType {
	ValAttr: string | null;
}

export class CT_OfPieChart {
	EG_PieChartShared: Array<EG_PieChartShared>;
	OfPieType: Array<CT_OfPieType>;
	GapWidth: Array<CT_GapAmount>;
	SplitType: Array<CT_SplitType>;
	SplitPos: Array<CT_Double>;
	CustSplit: Array<CT_CustSplit>;
	SecondPieSize: Array<CT_SecondPieSize>;
	SerLines: Array<CT_ChartLines>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_BubbleChart {
	VaryColors: Array<CT_Boolean>;
	Ser: Array<CT_BubbleSer>;
	DLbls: Array<CT_DLbls>;
	Bubble3D: Array<CT_Boolean>;
	BubbleScale: Array<CT_BubbleScale>;
	ShowNegBubbles: Array<CT_Boolean>;
	SizeRepresents: Array<CT_SizeRepresents>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_BandFmt {
	Idx: Array<CT_UnsignedInt>;
	SpPr: Array<CT_ShapeProperties>;
}

export class CT_BandFmts {
	BandFmt: Array<CT_BandFmt>;
}

export class EG_SurfaceChartShared {
	Wireframe: Array<CT_Boolean>;
	Ser: Array<CT_SurfaceSer>;
	BandFmts: Array<CT_BandFmts>;
}

export class CT_SurfaceChart {
	EG_SurfaceChartShared: Array<EG_SurfaceChartShared>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Surface3DChart {
	EG_SurfaceChartShared: Array<EG_SurfaceChartShared>;
	AxId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_AxPos = string;

export class CT_AxPos {
	ValAttr: string;
}

export type ST_Crosses = string;

export class CT_Crosses {
	ValAttr: string;
}

export type ST_CrossBetween = string;

export class CT_CrossBetween {
	ValAttr: string;
}

export type ST_TickMark = string;

export class CT_TickMark {
	ValAttr: string | null;
}

export type ST_TickLblPos = string;

export class CT_TickLblPos {
	ValAttr: string | null;
}

export type ST_Skip = number;

export class CT_Skip {
	ValAttr: number;
}

export type ST_TimeUnit = string;

export class CT_TimeUnit {
	ValAttr: string | null;
}

export type ST_AxisUnit = number;

export class CT_AxisUnit {
	ValAttr: number;
}

export type ST_BuiltInUnit = string;

export class CT_BuiltInUnit {
	ValAttr: string | null;
}

export type ST_PictureFormat = string;

export class CT_PictureFormat {
	ValAttr: string;
}

export type ST_PictureStackUnit = number;

export class CT_PictureStackUnit {
	ValAttr: number;
}

export class CT_PictureOptions {
	ApplyToFront: Array<CT_Boolean>;
	ApplyToSides: Array<CT_Boolean>;
	ApplyToEnd: Array<CT_Boolean>;
	PictureFormat: Array<CT_PictureFormat>;
	PictureStackUnit: Array<CT_PictureStackUnit>;
}

export class CT_DispUnitsLbl {
	Layout: Array<CT_Layout>;
	Tx: Array<CT_Tx>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
}

export class CT_DispUnits {
	CustUnit: Array<CT_Double>;
	BuiltInUnit: Array<CT_BuiltInUnit>;
	DispUnitsLbl: Array<CT_DispUnitsLbl>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_Orientation = string;

export class CT_Orientation {
	ValAttr: string | null;
}

export type ST_LogBase = number;

export class CT_LogBase {
	ValAttr: number;
}

export class CT_Scaling {
	LogBase: Array<CT_LogBase>;
	Orientation: Array<CT_Orientation>;
	Max: Array<CT_Double>;
	Min: Array<CT_Double>;
	ExtLst: Array<CT_ExtensionList>;
}

export class ST_LblOffset {
	ST_LblOffsetPercent: ST_LblOffsetPercent;
}

export type ST_LblOffsetPercent = string;

export class CT_LblOffset {
	ValAttr: ST_LblOffset | null;
}

export class EG_AxShared {
	AxId: Array<CT_UnsignedInt>;
	Scaling: Array<CT_Scaling>;
	Delete: Array<CT_Boolean>;
	AxPos: Array<CT_AxPos>;
	MajorGridlines: Array<CT_ChartLines>;
	MinorGridlines: Array<CT_ChartLines>;
	Title: Array<CT_Title>;
	NumFmt: Array<CT_NumFmt>;
	MajorTickMark: Array<CT_TickMark>;
	MinorTickMark: Array<CT_TickMark>;
	TickLblPos: Array<CT_TickLblPos>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	CrossAx: Array<CT_UnsignedInt>;
	Crosses: Array<CT_Crosses>;
	CrossesAt: Array<CT_Double>;
}

export class CT_CatAx {
	EG_AxShared: Array<EG_AxShared>;
	Auto: Array<CT_Boolean>;
	LblAlgn: Array<CT_LblAlgn>;
	LblOffset: Array<CT_LblOffset>;
	TickLblSkip: Array<CT_Skip>;
	TickMarkSkip: Array<CT_Skip>;
	NoMultiLvlLbl: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_DateAx {
	EG_AxShared: Array<EG_AxShared>;
	Auto: Array<CT_Boolean>;
	LblOffset: Array<CT_LblOffset>;
	BaseTimeUnit: Array<CT_TimeUnit>;
	MajorUnit: Array<CT_AxisUnit>;
	MajorTimeUnit: Array<CT_TimeUnit>;
	MinorUnit: Array<CT_AxisUnit>;
	MinorTimeUnit: Array<CT_TimeUnit>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_SerAx {
	EG_AxShared: Array<EG_AxShared>;
	TickLblSkip: Array<CT_Skip>;
	TickMarkSkip: Array<CT_Skip>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_ValAx {
	EG_AxShared: Array<EG_AxShared>;
	CrossBetween: Array<CT_CrossBetween>;
	MajorUnit: Array<CT_AxisUnit>;
	MinorUnit: Array<CT_AxisUnit>;
	DispUnits: Array<CT_DispUnits>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PlotArea {
	Layout: Array<CT_Layout>;
	AreaChart: Array<CT_AreaChart>;
	Area3DChart: Array<CT_Area3DChart>;
	LineChart: Array<CT_LineChart>;
	Line3DChart: Array<CT_Line3DChart>;
	StockChart: Array<CT_StockChart>;
	RadarChart: Array<CT_RadarChart>;
	ScatterChart: Array<CT_ScatterChart>;
	PieChart: Array<CT_PieChart>;
	Pie3DChart: Array<CT_Pie3DChart>;
	DoughnutChart: Array<CT_DoughnutChart>;
	BarChart: Array<CT_BarChart>;
	Bar3DChart: Array<CT_Bar3DChart>;
	OfPieChart: Array<CT_OfPieChart>;
	SurfaceChart: Array<CT_SurfaceChart>;
	Surface3DChart: Array<CT_Surface3DChart>;
	BubbleChart: Array<CT_BubbleChart>;
	ValAx: Array<CT_ValAx>;
	CatAx: Array<CT_CatAx>;
	DateAx: Array<CT_DateAx>;
	SerAx: Array<CT_SerAx>;
	DTable: Array<CT_DTable>;
	SpPr: Array<CT_ShapeProperties>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PivotFmt {
	Idx: Array<CT_UnsignedInt>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	Marker: Array<CT_Marker>;
	DLbl: Array<CT_DLbl>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_PivotFmts {
	PivotFmt: Array<CT_PivotFmt>;
}

export type ST_LegendPos = string;

export class CT_LegendPos {
	ValAttr: string | null;
}

export class EG_LegendEntryData {
	TxPr: Array<CT_TextBody>;
}

export class CT_LegendEntry {
	EG_LegendEntryData: Array<EG_LegendEntryData>;
	Idx: Array<CT_UnsignedInt>;
	Delete: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Legend {
	LegendPos: Array<CT_LegendPos>;
	LegendEntry: Array<CT_LegendEntry>;
	Layout: Array<CT_Layout>;
	Overlay: Array<CT_Boolean>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_DispBlanksAs = string;

export class CT_DispBlanksAs {
	ValAttr: string | null;
}

export class CT_Chart {
	Title: Array<CT_Title>;
	AutoTitleDeleted: Array<CT_Boolean>;
	PivotFmts: Array<CT_PivotFmts>;
	View3D: Array<CT_View3D>;
	Floor: Array<CT_Surface>;
	SideWall: Array<CT_Surface>;
	BackWall: Array<CT_Surface>;
	PlotArea: Array<CT_PlotArea>;
	Legend: Array<CT_Legend>;
	PlotVisOnly: Array<CT_Boolean>;
	DispBlanksAs: Array<CT_DispBlanksAs>;
	ShowDLblsOverMax: Array<CT_Boolean>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ST_Style = Any;

export class CT_Style {
	ValAttr: Any;
}

export class CT_PivotSource {
	Name: Array<string>;
	FmtId: Array<CT_UnsignedInt>;
	ExtLst: Array<CT_ExtensionList>;
}

export class CT_Protection {
	ChartObject: Array<CT_Boolean>;
	Data: Array<CT_Boolean>;
	Formatting: Array<CT_Boolean>;
	Selection: Array<CT_Boolean>;
	UserInterface: Array<CT_Boolean>;
}

export class CT_HeaderFooter {
	AlignWithMarginsAttr: boolean | null;
	DifferentOddEvenAttr: boolean | null;
	DifferentFirstAttr: boolean | null;
	OddHeader: Array<string>;
	OddFooter: Array<string>;
	EvenHeader: Array<string>;
	EvenFooter: Array<string>;
	FirstHeader: Array<string>;
	FirstFooter: Array<string>;
}

export class CT_PageMargins {
	LAttr: number;
	RAttr: number;
	TAttr: number;
	BAttr: number;
	HeaderAttr: number;
	FooterAttr: number;
}

export type ST_PageSetupOrientation = string;

export class CT_ExternalData {
	RIdAttr: string;
	AutoUpdate: Array<CT_Boolean>;
}

export class CT_PageSetup {
	PaperSizeAttr: number | null;
	PaperHeightAttr: string | null;
	PaperWidthAttr: string | null;
	FirstPageNumberAttr: number | null;
	OrientationAttr: string | null;
	BlackAndWhiteAttr: boolean | null;
	DraftAttr: boolean | null;
	UseFirstPageNumberAttr: boolean | null;
	HorizontalDpiAttr: number | null;
	VerticalDpiAttr: number | null;
	CopiesAttr: number | null;
}

export class CT_PrintSettings {
	HeaderFooter: Array<CT_HeaderFooter>;
	PageMargins: Array<CT_PageMargins>;
	PageSetup: Array<CT_PageSetup>;
}

export class CT_ChartSpace {
	Date1904: Array<CT_Boolean>;
	Lang: Array<CT_TextLanguageID>;
	RoundedCorners: Array<CT_Boolean>;
	Style: Array<CT_Style>;
	ClrMapOvr: Array<CT_ColorMapping>;
	PivotSource: Array<CT_PivotSource>;
	Protection: Array<CT_Protection>;
	Chart: Array<CT_Chart>;
	SpPr: Array<CT_ShapeProperties>;
	TxPr: Array<CT_TextBody>;
	ExternalData: Array<CT_ExternalData>;
	PrintSettings: Array<CT_PrintSettings>;
	UserShapes: Array<CT_RelId>;
	ExtLst: Array<CT_ExtensionList>;
}

export type ChartSpace = CT_ChartSpace;

export type UserShapes = CT_Drawing;

export type Chart = CT_RelId;
