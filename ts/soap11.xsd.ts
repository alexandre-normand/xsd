// Code generated by xgen. DO NOT EDIT.

// Root is 'root' can be used to distinguish serialization roots from other
//        elements that are present in a serialization but are not roots of
//        a serialized value graph
export type Root = boolean;

// CommonAttributes is Attributes common to all elements that function as accessors or
//         represent independent (multi-ref) values.  The href attribute is
//         intended to be used in a manner like CONREF.  That is, the element
//         content should be empty iff the href attribute appears
export class CommonAttributes {
	IdAttr: string | null;
	HrefAttr: string | null;
}

// ArrayCoordinate ...
export type ArrayCoordinate = string;

// ArrayType ...
export type ArrayType = string;

// Offset ...
export type Offset = string;

// ArrayAttributes ...
export class ArrayAttributes {
	TnsArrayTypeAttr: string | null;
	TnsOffsetAttr: string | null;
}

// Position ...
export type Position = string;

// ArrayMemberAttributes ...
export class ArrayMemberAttributes {
	TnsPositionAttr: string | null;
}

// Array ...
export class Array {
}

// Struct ...
export type Struct = Struct;

// Base64 ...
export type Base64 = Uint8Array;

// Duration ...
export type Duration = string;

// DateTime ...
export type DateTime = string;

// NOTATION ...
export type NOTATION = Array<string>;

// Time ...
export type Time = string;

// Date ...
export type Date = string;

// GYearMonth ...
export type GYearMonth = string;

// GYear ...
export type GYear = string;

// GMonthDay ...
export type GMonthDay = string;

// GDay ...
export type GDay = string;

// GMonth ...
export type GMonth = string;

// Boolean ...
export type Boolean = boolean;

// Base64Binary ...
export type Base64Binary = Uint8Array;

// HexBinary ...
export type HexBinary = Uint8Array;

// Float ...
export type Float = number;

// Double ...
export type Double = number;

// AnyURI ...
export type AnyURI = string;

// QName ...
export type QName = any;

// String ...
export type String = string;

// NormalizedString ...
export type NormalizedString = string;

// Token ...
export type Token = string;

// Language ...
export type Language = string;

// Name ...
export type Name = string;

// NMTOKEN ...
export type NMTOKEN = string;

// NCName ...
export type NCName = string;

// NMTOKENS ...
export type NMTOKENS = Array<string>;

// ID ...
export type ID = string;

// IDREF ...
export type IDREF = string;

// ENTITY ...
export type ENTITY = string;

// IDREFS ...
export type IDREFS = Array<string>;

// ENTITIES ...
export type ENTITIES = Array<string>;

// Decimal ...
export type Decimal = number;

// Integer ...
export type Integer = number;

// NonPositiveInteger ...
export type NonPositiveInteger = number;

// NegativeInteger ...
export type NegativeInteger = number;

// Long ...
export type Long = number;

// Int ...
export type Int = number;

// Short ...
export type Short = number;

// Byte ...
export type Byte = any;

// NonNegativeInteger ...
export type NonNegativeInteger = number;

// UnsignedLong ...
export type UnsignedLong = number;

// UnsignedInt ...
export type UnsignedInt = number;

// UnsignedShort ...
export type UnsignedShort = number;

// UnsignedByte ...
export type UnsignedByte = any;

// PositiveInteger ...
export type PositiveInteger = number;

// AnyType ...
export type AnyType = string;
