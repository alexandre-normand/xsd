// Code generated by xgen. DO NOT EDIT.

// CT_AudioFile ...
export class CT_AudioFile {
	RLinkAttr: string;
	ContentTypeAttr: string | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_VideoFile ...
export class CT_VideoFile {
	RLinkAttr: string;
	ContentTypeAttr: string | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_QuickTimeFile ...
export class CT_QuickTimeFile {
	RLinkAttr: string;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_AudioCDTime ...
export class CT_AudioCDTime {
	TrackAttr: any;
	TimeAttr: number | null;
}

// CT_AudioCD ...
export class CT_AudioCD {
	St: Array<CT_AudioCDTime>;
	End: Array<CT_AudioCDTime>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// EG_Media ...
export class EG_Media {
	AudioCd: CT_AudioCD;
	WavAudioFile: CT_EmbeddedWAVAudioFile;
	AudioFile: CT_AudioFile;
	VideoFile: CT_VideoFile;
	QuickTimeFile: CT_QuickTimeFile;
}

// VideoFile ...
export type VideoFile = CT_VideoFile;

// ST_StyleMatrixColumnIndex ...
export type ST_StyleMatrixColumnIndex = number;

// ST_FontCollectionIndex ...
export enum ST_FontCollectionIndex {
	major = 'major',
	minor = 'minor',
	none = 'none',
}

// ST_ColorSchemeIndex ...
export enum ST_ColorSchemeIndex {
	dk1 = 'dk1',
	lt1 = 'lt1',
	dk2 = 'dk2',
	lt2 = 'lt2',
	accent1 = 'accent1',
	accent2 = 'accent2',
	accent3 = 'accent3',
	accent4 = 'accent4',
	accent5 = 'accent5',
	accent6 = 'accent6',
	hlink = 'hlink',
	folHlink = 'folHlink',
}

// CT_ColorScheme ...
export class CT_ColorScheme {
	NameAttr: string;
	Dk1: Array<CT_Color>;
	Lt1: Array<CT_Color>;
	Dk2: Array<CT_Color>;
	Lt2: Array<CT_Color>;
	Accent1: Array<CT_Color>;
	Accent2: Array<CT_Color>;
	Accent3: Array<CT_Color>;
	Accent4: Array<CT_Color>;
	Accent5: Array<CT_Color>;
	Accent6: Array<CT_Color>;
	Hlink: Array<CT_Color>;
	FolHlink: Array<CT_Color>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_CustomColor ...
export class CT_CustomColor {
	NameAttr: string | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_SupplementalFont ...
export class CT_SupplementalFont {
	ScriptAttr: string;
	TypefaceAttr: string;
}

// CT_CustomColorList ...
export class CT_CustomColorList {
	CustClr: Array<CT_CustomColor>;
}

// CT_FontCollection ...
export class CT_FontCollection {
	Latin: Array<CT_TextFont>;
	Ea: Array<CT_TextFont>;
	Cs: Array<CT_TextFont>;
	Font: Array<CT_SupplementalFont>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_EffectStyleItem ...
export class CT_EffectStyleItem {
	EG_EffectProperties: Array<EG_EffectProperties>;
	Scene3d: Array<CT_Scene3D>;
	Sp3d: Array<CT_Shape3D>;
}

// CT_FontScheme ...
export class CT_FontScheme {
	NameAttr: string;
	MajorFont: Array<CT_FontCollection>;
	MinorFont: Array<CT_FontCollection>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_FillStyleList ...
export class CT_FillStyleList {
	EG_FillProperties: Array<EG_FillProperties>;
}

// CT_LineStyleList ...
export class CT_LineStyleList {
	Ln: Array<CT_LineProperties>;
}

// CT_EffectStyleList ...
export class CT_EffectStyleList {
	EffectStyle: Array<CT_EffectStyleItem>;
}

// CT_BackgroundFillStyleList ...
export class CT_BackgroundFillStyleList {
	EG_FillProperties: Array<EG_FillProperties>;
}

// CT_StyleMatrix ...
export class CT_StyleMatrix {
	NameAttr: string | null;
	FillStyleLst: Array<CT_FillStyleList>;
	LnStyleLst: Array<CT_LineStyleList>;
	EffectStyleLst: Array<CT_EffectStyleList>;
	BgFillStyleLst: Array<CT_BackgroundFillStyleList>;
}

// CT_BaseStyles ...
export class CT_BaseStyles {
	ClrScheme: Array<CT_ColorScheme>;
	FontScheme: Array<CT_FontScheme>;
	FmtScheme: Array<CT_StyleMatrix>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_OfficeArtExtension ...
export class CT_OfficeArtExtension {
	UriAttr: string;
}

// ST_Coordinate ...
export class ST_Coordinate {
	ST_CoordinateUnqualified: ST_CoordinateUnqualified;
	ST_UniversalMeasure: string;
}

// ST_CoordinateUnqualified ...
export type ST_CoordinateUnqualified = number;

// ST_Coordinate32 ...
export class ST_Coordinate32 {
	ST_Coordinate32Unqualified: ST_Coordinate32Unqualified;
	ST_UniversalMeasure: string;
}

// ST_Coordinate32Unqualified ...
export type ST_Coordinate32Unqualified = number;

// ST_PositiveCoordinate ...
export type ST_PositiveCoordinate = number;

// ST_PositiveCoordinate32 ...
export type ST_PositiveCoordinate32 = number;

// ST_Angle ...
export type ST_Angle = number;

// CT_Angle ...
export class CT_Angle {
	ValAttr: number;
}

// ST_FixedAngle ...
export type ST_FixedAngle = number;

// ST_PositiveFixedAngle ...
export type ST_PositiveFixedAngle = number;

// CT_PositiveFixedAngle ...
export class CT_PositiveFixedAngle {
	ValAttr: number;
}

// ST_Percentage ...
export class ST_Percentage {
	ST_Percentage: string;
}

// CT_Percentage ...
export class CT_Percentage {
	ValAttr: ST_Percentage;
}

// ST_PositivePercentage ...
export class ST_PositivePercentage {
	ST_PositivePercentage: string;
}

// CT_PositivePercentage ...
export class CT_PositivePercentage {
	ValAttr: ST_PositivePercentage;
}

// ST_FixedPercentage ...
export class ST_FixedPercentage {
	ST_FixedPercentage: string;
}

// CT_FixedPercentage ...
export class CT_FixedPercentage {
	ValAttr: ST_FixedPercentage;
}

// ST_PositiveFixedPercentage ...
export class ST_PositiveFixedPercentage {
	ST_PositiveFixedPercentage: string;
}

// CT_PositiveFixedPercentage ...
export class CT_PositiveFixedPercentage {
	ValAttr: ST_PositiveFixedPercentage;
}

// CT_Ratio ...
export class CT_Ratio {
	NAttr: number;
	DAttr: number;
}

// CT_Point2D ...
export class CT_Point2D {
	XAttr: ST_Coordinate;
	YAttr: ST_Coordinate;
}

// CT_PositiveSize2D ...
export class CT_PositiveSize2D {
	CxAttr: number;
	CyAttr: number;
}

// CT_ComplementTransform ...
export class CT_ComplementTransform {
}

// CT_InverseTransform ...
export class CT_InverseTransform {
}

// CT_GrayscaleTransform ...
export class CT_GrayscaleTransform {
}

// CT_GammaTransform ...
export class CT_GammaTransform {
}

// CT_InverseGammaTransform ...
export class CT_InverseGammaTransform {
}

// EG_ColorTransform ...
export class EG_ColorTransform {
	Tint: Array<CT_PositiveFixedPercentage>;
	Shade: Array<CT_PositiveFixedPercentage>;
	Comp: Array<CT_ComplementTransform>;
	Inv: Array<CT_InverseTransform>;
	Gray: Array<CT_GrayscaleTransform>;
	Alpha: Array<CT_PositiveFixedPercentage>;
	AlphaOff: Array<CT_FixedPercentage>;
	AlphaMod: Array<CT_PositivePercentage>;
	Hue: Array<CT_PositiveFixedAngle>;
	HueOff: Array<CT_Angle>;
	HueMod: Array<CT_PositivePercentage>;
	Sat: Array<CT_Percentage>;
	SatOff: Array<CT_Percentage>;
	SatMod: Array<CT_Percentage>;
	Lum: Array<CT_Percentage>;
	LumOff: Array<CT_Percentage>;
	LumMod: Array<CT_Percentage>;
	Red: Array<CT_Percentage>;
	RedOff: Array<CT_Percentage>;
	RedMod: Array<CT_Percentage>;
	Green: Array<CT_Percentage>;
	GreenOff: Array<CT_Percentage>;
	GreenMod: Array<CT_Percentage>;
	Blue: Array<CT_Percentage>;
	BlueOff: Array<CT_Percentage>;
	BlueMod: Array<CT_Percentage>;
	Gamma: Array<CT_GammaTransform>;
	InvGamma: Array<CT_InverseGammaTransform>;
}

// CT_ScRgbColor ...
export class CT_ScRgbColor {
	RAttr: ST_Percentage;
	GAttr: ST_Percentage;
	BAttr: ST_Percentage;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

// CT_SRgbColor ...
export class CT_SRgbColor {
	ValAttr: Uint8Array;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

// CT_HslColor ...
export class CT_HslColor {
	HueAttr: number;
	SatAttr: ST_Percentage;
	LumAttr: ST_Percentage;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

// ST_SystemColorVal ...
export enum ST_SystemColorVal {
	scrollBar = 'scrollBar',
	background = 'background',
	activeCaption = 'activeCaption',
	inactiveCaption = 'inactiveCaption',
	menu = 'menu',
	window = 'window',
	windowFrame = 'windowFrame',
	menuText = 'menuText',
	windowText = 'windowText',
	captionText = 'captionText',
	activeBorder = 'activeBorder',
	inactiveBorder = 'inactiveBorder',
	appWorkspace = 'appWorkspace',
	highlight = 'highlight',
	highlightText = 'highlightText',
	btnFace = 'btnFace',
	btnShadow = 'btnShadow',
	grayText = 'grayText',
	btnText = 'btnText',
	inactiveCaptionText = 'inactiveCaptionText',
	btnHighlight = 'btnHighlight',
	3dDkShadow = '3dDkShadow',
	3dLight = '3dLight',
	infoText = 'infoText',
	infoBk = 'infoBk',
	hotLight = 'hotLight',
	gradientActiveCaption = 'gradientActiveCaption',
	gradientInactiveCaption = 'gradientInactiveCaption',
	menuHighlight = 'menuHighlight',
	menuBar = 'menuBar',
}

// CT_SystemColor ...
export class CT_SystemColor {
	ValAttr: string;
	LastClrAttr: Uint8Array | null;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

// ST_SchemeColorVal ...
export enum ST_SchemeColorVal {
	bg1 = 'bg1',
	tx1 = 'tx1',
	bg2 = 'bg2',
	tx2 = 'tx2',
	accent1 = 'accent1',
	accent2 = 'accent2',
	accent3 = 'accent3',
	accent4 = 'accent4',
	accent5 = 'accent5',
	accent6 = 'accent6',
	hlink = 'hlink',
	folHlink = 'folHlink',
	phClr = 'phClr',
	dk1 = 'dk1',
	lt1 = 'lt1',
	dk2 = 'dk2',
	lt2 = 'lt2',
}

// CT_SchemeColor ...
export class CT_SchemeColor {
	ValAttr: string;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

// ST_PresetColorVal ...
export enum ST_PresetColorVal {
	aliceBlue = 'aliceBlue',
	antiqueWhite = 'antiqueWhite',
	aqua = 'aqua',
	aquamarine = 'aquamarine',
	azure = 'azure',
	beige = 'beige',
	bisque = 'bisque',
	black = 'black',
	blanchedAlmond = 'blanchedAlmond',
	blue = 'blue',
	blueViolet = 'blueViolet',
	brown = 'brown',
	burlyWood = 'burlyWood',
	cadetBlue = 'cadetBlue',
	chartreuse = 'chartreuse',
	chocolate = 'chocolate',
	coral = 'coral',
	cornflowerBlue = 'cornflowerBlue',
	cornsilk = 'cornsilk',
	crimson = 'crimson',
	cyan = 'cyan',
	darkBlue = 'darkBlue',
	darkCyan = 'darkCyan',
	darkGoldenrod = 'darkGoldenrod',
	darkGray = 'darkGray',
	darkGrey = 'darkGrey',
	darkGreen = 'darkGreen',
	darkKhaki = 'darkKhaki',
	darkMagenta = 'darkMagenta',
	darkOliveGreen = 'darkOliveGreen',
	darkOrange = 'darkOrange',
	darkOrchid = 'darkOrchid',
	darkRed = 'darkRed',
	darkSalmon = 'darkSalmon',
	darkSeaGreen = 'darkSeaGreen',
	darkSlateBlue = 'darkSlateBlue',
	darkSlateGray = 'darkSlateGray',
	darkSlateGrey = 'darkSlateGrey',
	darkTurquoise = 'darkTurquoise',
	darkViolet = 'darkViolet',
	dkBlue = 'dkBlue',
	dkCyan = 'dkCyan',
	dkGoldenrod = 'dkGoldenrod',
	dkGray = 'dkGray',
	dkGrey = 'dkGrey',
	dkGreen = 'dkGreen',
	dkKhaki = 'dkKhaki',
	dkMagenta = 'dkMagenta',
	dkOliveGreen = 'dkOliveGreen',
	dkOrange = 'dkOrange',
	dkOrchid = 'dkOrchid',
	dkRed = 'dkRed',
	dkSalmon = 'dkSalmon',
	dkSeaGreen = 'dkSeaGreen',
	dkSlateBlue = 'dkSlateBlue',
	dkSlateGray = 'dkSlateGray',
	dkSlateGrey = 'dkSlateGrey',
	dkTurquoise = 'dkTurquoise',
	dkViolet = 'dkViolet',
	deepPink = 'deepPink',
	deepSkyBlue = 'deepSkyBlue',
	dimGray = 'dimGray',
	dimGrey = 'dimGrey',
	dodgerBlue = 'dodgerBlue',
	firebrick = 'firebrick',
	floralWhite = 'floralWhite',
	forestGreen = 'forestGreen',
	fuchsia = 'fuchsia',
	gainsboro = 'gainsboro',
	ghostWhite = 'ghostWhite',
	gold = 'gold',
	goldenrod = 'goldenrod',
	gray = 'gray',
	grey = 'grey',
	green = 'green',
	greenYellow = 'greenYellow',
	honeydew = 'honeydew',
	hotPink = 'hotPink',
	indianRed = 'indianRed',
	indigo = 'indigo',
	ivory = 'ivory',
	khaki = 'khaki',
	lavender = 'lavender',
	lavenderBlush = 'lavenderBlush',
	lawnGreen = 'lawnGreen',
	lemonChiffon = 'lemonChiffon',
	lightBlue = 'lightBlue',
	lightCoral = 'lightCoral',
	lightCyan = 'lightCyan',
	lightGoldenrodYellow = 'lightGoldenrodYellow',
	lightGray = 'lightGray',
	lightGrey = 'lightGrey',
	lightGreen = 'lightGreen',
	lightPink = 'lightPink',
	lightSalmon = 'lightSalmon',
	lightSeaGreen = 'lightSeaGreen',
	lightSkyBlue = 'lightSkyBlue',
	lightSlateGray = 'lightSlateGray',
	lightSlateGrey = 'lightSlateGrey',
	lightSteelBlue = 'lightSteelBlue',
	lightYellow = 'lightYellow',
	ltBlue = 'ltBlue',
	ltCoral = 'ltCoral',
	ltCyan = 'ltCyan',
	ltGoldenrodYellow = 'ltGoldenrodYellow',
	ltGray = 'ltGray',
	ltGrey = 'ltGrey',
	ltGreen = 'ltGreen',
	ltPink = 'ltPink',
	ltSalmon = 'ltSalmon',
	ltSeaGreen = 'ltSeaGreen',
	ltSkyBlue = 'ltSkyBlue',
	ltSlateGray = 'ltSlateGray',
	ltSlateGrey = 'ltSlateGrey',
	ltSteelBlue = 'ltSteelBlue',
	ltYellow = 'ltYellow',
	lime = 'lime',
	limeGreen = 'limeGreen',
	linen = 'linen',
	magenta = 'magenta',
	maroon = 'maroon',
	medAquamarine = 'medAquamarine',
	medBlue = 'medBlue',
	medOrchid = 'medOrchid',
	medPurple = 'medPurple',
	medSeaGreen = 'medSeaGreen',
	medSlateBlue = 'medSlateBlue',
	medSpringGreen = 'medSpringGreen',
	medTurquoise = 'medTurquoise',
	medVioletRed = 'medVioletRed',
	mediumAquamarine = 'mediumAquamarine',
	mediumBlue = 'mediumBlue',
	mediumOrchid = 'mediumOrchid',
	mediumPurple = 'mediumPurple',
	mediumSeaGreen = 'mediumSeaGreen',
	mediumSlateBlue = 'mediumSlateBlue',
	mediumSpringGreen = 'mediumSpringGreen',
	mediumTurquoise = 'mediumTurquoise',
	mediumVioletRed = 'mediumVioletRed',
	midnightBlue = 'midnightBlue',
	mintCream = 'mintCream',
	mistyRose = 'mistyRose',
	moccasin = 'moccasin',
	navajoWhite = 'navajoWhite',
	navy = 'navy',
	oldLace = 'oldLace',
	olive = 'olive',
	oliveDrab = 'oliveDrab',
	orange = 'orange',
	orangeRed = 'orangeRed',
	orchid = 'orchid',
	paleGoldenrod = 'paleGoldenrod',
	paleGreen = 'paleGreen',
	paleTurquoise = 'paleTurquoise',
	paleVioletRed = 'paleVioletRed',
	papayaWhip = 'papayaWhip',
	peachPuff = 'peachPuff',
	peru = 'peru',
	pink = 'pink',
	plum = 'plum',
	powderBlue = 'powderBlue',
	purple = 'purple',
	red = 'red',
	rosyBrown = 'rosyBrown',
	royalBlue = 'royalBlue',
	saddleBrown = 'saddleBrown',
	salmon = 'salmon',
	sandyBrown = 'sandyBrown',
	seaGreen = 'seaGreen',
	seaShell = 'seaShell',
	sienna = 'sienna',
	silver = 'silver',
	skyBlue = 'skyBlue',
	slateBlue = 'slateBlue',
	slateGray = 'slateGray',
	slateGrey = 'slateGrey',
	snow = 'snow',
	springGreen = 'springGreen',
	steelBlue = 'steelBlue',
	tan = 'tan',
	teal = 'teal',
	thistle = 'thistle',
	tomato = 'tomato',
	turquoise = 'turquoise',
	violet = 'violet',
	wheat = 'wheat',
	white = 'white',
	whiteSmoke = 'whiteSmoke',
	yellow = 'yellow',
	yellowGreen = 'yellowGreen',
}

// CT_PresetColor ...
export class CT_PresetColor {
	ValAttr: string;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

// EG_OfficeArtExtensionList ...
export class EG_OfficeArtExtensionList {
	Ext: Array<CT_OfficeArtExtension>;
}

// CT_OfficeArtExtensionList ...
export class CT_OfficeArtExtensionList {
	EG_OfficeArtExtensionList: Array<EG_OfficeArtExtensionList>;
}

// CT_Scale2D ...
export class CT_Scale2D {
	Sx: Array<CT_Ratio>;
	Sy: Array<CT_Ratio>;
}

// CT_Transform2D ...
export class CT_Transform2D {
	RotAttr: number | null;
	FlipHAttr: boolean | null;
	FlipVAttr: boolean | null;
	Off: Array<CT_Point2D>;
	Ext: Array<CT_PositiveSize2D>;
}

// CT_GroupTransform2D ...
export class CT_GroupTransform2D {
	RotAttr: number | null;
	FlipHAttr: boolean | null;
	FlipVAttr: boolean | null;
	Off: Array<CT_Point2D>;
	Ext: Array<CT_PositiveSize2D>;
	ChOff: Array<CT_Point2D>;
	ChExt: Array<CT_PositiveSize2D>;
}

// CT_Point3D ...
export class CT_Point3D {
	XAttr: ST_Coordinate;
	YAttr: ST_Coordinate;
	ZAttr: ST_Coordinate;
}

// CT_Vector3D ...
export class CT_Vector3D {
	DxAttr: ST_Coordinate;
	DyAttr: ST_Coordinate;
	DzAttr: ST_Coordinate;
}

// CT_SphereCoords ...
export class CT_SphereCoords {
	LatAttr: number;
	LonAttr: number;
	RevAttr: number;
}

// CT_RelativeRect ...
export class CT_RelativeRect {
	LAttr: ST_Percentage | null;
	TAttr: ST_Percentage | null;
	RAttr: ST_Percentage | null;
	BAttr: ST_Percentage | null;
}

// ST_RectAlignment ...
export enum ST_RectAlignment {
	tl = 'tl',
	t = 't',
	tr = 'tr',
	l = 'l',
	ctr = 'ctr',
	r = 'r',
	bl = 'bl',
	b = 'b',
	br = 'br',
}

// EG_ColorChoice ...
export class EG_ColorChoice {
	ScrgbClr: Array<CT_ScRgbColor>;
	SrgbClr: Array<CT_SRgbColor>;
	HslClr: Array<CT_HslColor>;
	SysClr: Array<CT_SystemColor>;
	SchemeClr: Array<CT_SchemeColor>;
	PrstClr: Array<CT_PresetColor>;
}

// CT_Color ...
export class CT_Color {
	EG_ColorChoice: EG_ColorChoice;
}

// CT_ColorMRU ...
export class CT_ColorMRU {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// ST_BlackWhiteMode ...
export enum ST_BlackWhiteMode {
	clr = 'clr',
	auto = 'auto',
	gray = 'gray',
	ltGray = 'ltGray',
	invGray = 'invGray',
	grayWhite = 'grayWhite',
	blackGray = 'blackGray',
	blackWhite = 'blackWhite',
	black = 'black',
	white = 'white',
	hidden = 'hidden',
}

// AG_Blob ...
export class AG_Blob {
	REmbedAttr: string | null;
	RLinkAttr: string | null;
}

// CT_EmbeddedWAVAudioFile ...
export class CT_EmbeddedWAVAudioFile {
	REmbedAttr: string;
	NameAttr: string | null;
}

// CT_Hyperlink ...
export class CT_Hyperlink {
	RIdAttr: string | null;
	InvalidUrlAttr: string | null;
	ActionAttr: string | null;
	TgtFrameAttr: string | null;
	TooltipAttr: string | null;
	HistoryAttr: boolean | null;
	HighlightClickAttr: boolean | null;
	EndSndAttr: boolean | null;
	Snd: Array<CT_EmbeddedWAVAudioFile>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// ST_DrawingElementId ...
export type ST_DrawingElementId = number;

// AG_Locking ...
export class AG_Locking {
	NoGrpAttr: boolean | null;
	NoSelectAttr: boolean | null;
	NoRotAttr: boolean | null;
	NoChangeAspectAttr: boolean | null;
	NoMoveAttr: boolean | null;
	NoResizeAttr: boolean | null;
	NoEditPointsAttr: boolean | null;
	NoAdjustHandlesAttr: boolean | null;
	NoChangeArrowheadsAttr: boolean | null;
	NoChangeShapeTypeAttr: boolean | null;
}

// CT_ConnectorLocking ...
export class CT_ConnectorLocking {
	AG_Locking: AG_Locking;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_ShapeLocking ...
export class CT_ShapeLocking {
	AG_Locking: AG_Locking;
	NoTextEditAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_PictureLocking ...
export class CT_PictureLocking {
	AG_Locking: AG_Locking;
	NoCropAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GroupLocking ...
export class CT_GroupLocking {
	NoGrpAttr: boolean | null;
	NoUngrpAttr: boolean | null;
	NoSelectAttr: boolean | null;
	NoRotAttr: boolean | null;
	NoChangeAspectAttr: boolean | null;
	NoMoveAttr: boolean | null;
	NoResizeAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GraphicalObjectFrameLocking ...
export class CT_GraphicalObjectFrameLocking {
	NoGrpAttr: boolean | null;
	NoDrilldownAttr: boolean | null;
	NoSelectAttr: boolean | null;
	NoChangeAspectAttr: boolean | null;
	NoMoveAttr: boolean | null;
	NoResizeAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_ContentPartLocking ...
export class CT_ContentPartLocking {
	AG_Locking: AG_Locking;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualDrawingProps ...
export class CT_NonVisualDrawingProps {
	IdAttr: number;
	NameAttr: string;
	DescrAttr: string | null;
	HiddenAttr: boolean | null;
	TitleAttr: string | null;
	HlinkClick: Array<CT_Hyperlink>;
	HlinkHover: Array<CT_Hyperlink>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualDrawingShapeProps ...
export class CT_NonVisualDrawingShapeProps {
	TxBoxAttr: boolean | null;
	SpLocks: Array<CT_ShapeLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualConnectorProperties ...
export class CT_NonVisualConnectorProperties {
	CxnSpLocks: Array<CT_ConnectorLocking>;
	StCxn: Array<CT_Connection>;
	EndCxn: Array<CT_Connection>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualPictureProperties ...
export class CT_NonVisualPictureProperties {
	PreferRelativeResizeAttr: boolean | null;
	PicLocks: Array<CT_PictureLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualGroupDrawingShapeProps ...
export class CT_NonVisualGroupDrawingShapeProps {
	GrpSpLocks: Array<CT_GroupLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualGraphicFrameProperties ...
export class CT_NonVisualGraphicFrameProperties {
	GraphicFrameLocks: Array<CT_GraphicalObjectFrameLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_NonVisualContentPartProperties ...
export class CT_NonVisualContentPartProperties {
	IsCommentAttr: boolean | null;
	CpLocks: Array<CT_ContentPartLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GraphicalObjectData ...
export class CT_GraphicalObjectData {
	UriAttr: string;
}

// CT_GraphicalObject ...
export class CT_GraphicalObject {
	GraphicData: CT_GraphicalObjectData;
}

// Graphic ...
export type Graphic = CT_GraphicalObject;

// ST_ChartBuildStep ...
export enum ST_ChartBuildStep {
	category = 'category',
	ptInCategory = 'ptInCategory',
	series = 'series',
	ptInSeries = 'ptInSeries',
	allPts = 'allPts',
	gridLegend = 'gridLegend',
}

// ST_DgmBuildStep ...
export enum ST_DgmBuildStep {
	sp = 'sp',
	bg = 'bg',
}

// CT_AnimationDgmElement ...
export class CT_AnimationDgmElement {
	IdAttr: string | null;
	BldStepAttr: string | null;
}

// CT_AnimationChartElement ...
export class CT_AnimationChartElement {
	SeriesIdxAttr: number | null;
	CategoryIdxAttr: number | null;
	BldStepAttr: string;
}

// CT_AnimationElementChoice ...
export class CT_AnimationElementChoice {
	Dgm: CT_AnimationDgmElement;
	Chart: CT_AnimationChartElement;
}

// ST_AnimationBuildType ...
export enum ST_AnimationBuildType {
	allAtOnce = 'allAtOnce',
}

// ST_AnimationDgmOnlyBuildType ...
export enum ST_AnimationDgmOnlyBuildType {
	one = 'one',
	lvlOne = 'lvlOne',
	lvlAtOnce = 'lvlAtOnce',
}

// ST_AnimationDgmBuildType ...
export class ST_AnimationDgmBuildType {
	ST_AnimationDgmOnlyBuildType: string;
	ST_AnimationBuildType: string;
}

// CT_AnimationDgmBuildProperties ...
export class CT_AnimationDgmBuildProperties {
	BldAttr: ST_AnimationDgmBuildType | null;
	RevAttr: boolean | null;
}

// ST_AnimationChartOnlyBuildType ...
export enum ST_AnimationChartOnlyBuildType {
	series = 'series',
	category = 'category',
	seriesEl = 'seriesEl',
	categoryEl = 'categoryEl',
}

// ST_AnimationChartBuildType ...
export class ST_AnimationChartBuildType {
	ST_AnimationBuildType: string;
	ST_AnimationChartOnlyBuildType: string;
}

// CT_AnimationChartBuildProperties ...
export class CT_AnimationChartBuildProperties {
	BldAttr: ST_AnimationChartBuildType | null;
	AnimBgAttr: boolean | null;
}

// CT_AnimationGraphicalObjectBuildProperties ...
export class CT_AnimationGraphicalObjectBuildProperties {
	BldDgm: CT_AnimationDgmBuildProperties;
	BldChart: CT_AnimationChartBuildProperties;
}

// CT_BackgroundFormatting ...
export class CT_BackgroundFormatting {
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
}

// CT_WholeE2oFormatting ...
export class CT_WholeE2oFormatting {
	EG_EffectProperties: Array<EG_EffectProperties>;
	Ln: Array<CT_LineProperties>;
}

// CT_GvmlUseShapeRectangle ...
export class CT_GvmlUseShapeRectangle {
}

// CT_GvmlTextShape ...
export class CT_GvmlTextShape {
	TxBody: Array<CT_TextBody>;
	UseSpRect: Array<CT_GvmlUseShapeRectangle>;
	Xfrm: Array<CT_Transform2D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GvmlShapeNonVisual ...
export class CT_GvmlShapeNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvSpPr: Array<CT_NonVisualDrawingShapeProps>;
}

// CT_GvmlShape ...
export class CT_GvmlShape {
	NvSpPr: Array<CT_GvmlShapeNonVisual>;
	SpPr: Array<CT_ShapeProperties>;
	TxSp: Array<CT_GvmlTextShape>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GvmlConnectorNonVisual ...
export class CT_GvmlConnectorNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvCxnSpPr: Array<CT_NonVisualConnectorProperties>;
}

// CT_GvmlConnector ...
export class CT_GvmlConnector {
	NvCxnSpPr: Array<CT_GvmlConnectorNonVisual>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GvmlPictureNonVisual ...
export class CT_GvmlPictureNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvPicPr: Array<CT_NonVisualPictureProperties>;
}

// CT_GvmlPicture ...
export class CT_GvmlPicture {
	NvPicPr: Array<CT_GvmlPictureNonVisual>;
	BlipFill: Array<CT_BlipFillProperties>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GvmlGraphicFrameNonVisual ...
export class CT_GvmlGraphicFrameNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvGraphicFramePr: Array<CT_NonVisualGraphicFrameProperties>;
}

// CT_GvmlGraphicalObjectFrame ...
export class CT_GvmlGraphicalObjectFrame {
	NvGraphicFramePr: Array<CT_GvmlGraphicFrameNonVisual>;
	Graphic: Array<CT_GraphicalObject>;
	Xfrm: Array<CT_Transform2D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GvmlGroupShapeNonVisual ...
export class CT_GvmlGroupShapeNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvGrpSpPr: Array<CT_NonVisualGroupDrawingShapeProps>;
}

// CT_GvmlGroupShape ...
export class CT_GvmlGroupShape {
	NvGrpSpPr: Array<CT_GvmlGroupShapeNonVisual>;
	GrpSpPr: Array<CT_GroupShapeProperties>;
	TxSp: CT_GvmlTextShape;
	Sp: CT_GvmlShape;
	CxnSp: CT_GvmlConnector;
	Pic: CT_GvmlPicture;
	GraphicFrame: CT_GvmlGraphicalObjectFrame;
	GrpSp: CT_GvmlGroupShape;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// ST_PresetCameraType ...
export enum ST_PresetCameraType {
	legacyObliqueTopLeft = 'legacyObliqueTopLeft',
	legacyObliqueTop = 'legacyObliqueTop',
	legacyObliqueTopRight = 'legacyObliqueTopRight',
	legacyObliqueLeft = 'legacyObliqueLeft',
	legacyObliqueFront = 'legacyObliqueFront',
	legacyObliqueRight = 'legacyObliqueRight',
	legacyObliqueBottomLeft = 'legacyObliqueBottomLeft',
	legacyObliqueBottom = 'legacyObliqueBottom',
	legacyObliqueBottomRight = 'legacyObliqueBottomRight',
	legacyPerspectiveTopLeft = 'legacyPerspectiveTopLeft',
	legacyPerspectiveTop = 'legacyPerspectiveTop',
	legacyPerspectiveTopRight = 'legacyPerspectiveTopRight',
	legacyPerspectiveLeft = 'legacyPerspectiveLeft',
	legacyPerspectiveFront = 'legacyPerspectiveFront',
	legacyPerspectiveRight = 'legacyPerspectiveRight',
	legacyPerspectiveBottomLeft = 'legacyPerspectiveBottomLeft',
	legacyPerspectiveBottom = 'legacyPerspectiveBottom',
	legacyPerspectiveBottomRight = 'legacyPerspectiveBottomRight',
	orthographicFront = 'orthographicFront',
	isometricTopUp = 'isometricTopUp',
	isometricTopDown = 'isometricTopDown',
	isometricBottomUp = 'isometricBottomUp',
	isometricBottomDown = 'isometricBottomDown',
	isometricLeftUp = 'isometricLeftUp',
	isometricLeftDown = 'isometricLeftDown',
	isometricRightUp = 'isometricRightUp',
	isometricRightDown = 'isometricRightDown',
	isometricOffAxis1Left = 'isometricOffAxis1Left',
	isometricOffAxis1Right = 'isometricOffAxis1Right',
	isometricOffAxis1Top = 'isometricOffAxis1Top',
	isometricOffAxis2Left = 'isometricOffAxis2Left',
	isometricOffAxis2Right = 'isometricOffAxis2Right',
	isometricOffAxis2Top = 'isometricOffAxis2Top',
	isometricOffAxis3Left = 'isometricOffAxis3Left',
	isometricOffAxis3Right = 'isometricOffAxis3Right',
	isometricOffAxis3Bottom = 'isometricOffAxis3Bottom',
	isometricOffAxis4Left = 'isometricOffAxis4Left',
	isometricOffAxis4Right = 'isometricOffAxis4Right',
	isometricOffAxis4Bottom = 'isometricOffAxis4Bottom',
	obliqueTopLeft = 'obliqueTopLeft',
	obliqueTop = 'obliqueTop',
	obliqueTopRight = 'obliqueTopRight',
	obliqueLeft = 'obliqueLeft',
	obliqueRight = 'obliqueRight',
	obliqueBottomLeft = 'obliqueBottomLeft',
	obliqueBottom = 'obliqueBottom',
	obliqueBottomRight = 'obliqueBottomRight',
	perspectiveFront = 'perspectiveFront',
	perspectiveLeft = 'perspectiveLeft',
	perspectiveRight = 'perspectiveRight',
	perspectiveAbove = 'perspectiveAbove',
	perspectiveBelow = 'perspectiveBelow',
	perspectiveAboveLeftFacing = 'perspectiveAboveLeftFacing',
	perspectiveAboveRightFacing = 'perspectiveAboveRightFacing',
	perspectiveContrastingLeftFacing = 'perspectiveContrastingLeftFacing',
	perspectiveContrastingRightFacing = 'perspectiveContrastingRightFacing',
	perspectiveHeroicLeftFacing = 'perspectiveHeroicLeftFacing',
	perspectiveHeroicRightFacing = 'perspectiveHeroicRightFacing',
	perspectiveHeroicExtremeLeftFacing = 'perspectiveHeroicExtremeLeftFacing',
	perspectiveHeroicExtremeRightFacing = 'perspectiveHeroicExtremeRightFacing',
	perspectiveRelaxed = 'perspectiveRelaxed',
	perspectiveRelaxedModerately = 'perspectiveRelaxedModerately',
}

// ST_FOVAngle ...
export type ST_FOVAngle = number;

// CT_Camera ...
export class CT_Camera {
	PrstAttr: string;
	FovAttr: number | null;
	ZoomAttr: ST_PositivePercentage | null;
	Rot: Array<CT_SphereCoords>;
}

// ST_LightRigDirection ...
export enum ST_LightRigDirection {
	tl = 'tl',
	t = 't',
	tr = 'tr',
	l = 'l',
	r = 'r',
	bl = 'bl',
	b = 'b',
	br = 'br',
}

// ST_LightRigType ...
export enum ST_LightRigType {
	legacyFlat1 = 'legacyFlat1',
	legacyFlat2 = 'legacyFlat2',
	legacyFlat3 = 'legacyFlat3',
	legacyFlat4 = 'legacyFlat4',
	legacyNormal1 = 'legacyNormal1',
	legacyNormal2 = 'legacyNormal2',
	legacyNormal3 = 'legacyNormal3',
	legacyNormal4 = 'legacyNormal4',
	legacyHarsh1 = 'legacyHarsh1',
	legacyHarsh2 = 'legacyHarsh2',
	legacyHarsh3 = 'legacyHarsh3',
	legacyHarsh4 = 'legacyHarsh4',
	threePt = 'threePt',
	balanced = 'balanced',
	soft = 'soft',
	harsh = 'harsh',
	flood = 'flood',
	contrasting = 'contrasting',
	morning = 'morning',
	sunrise = 'sunrise',
	sunset = 'sunset',
	chilly = 'chilly',
	freezing = 'freezing',
	flat = 'flat',
	twoPt = 'twoPt',
	glow = 'glow',
	brightRoom = 'brightRoom',
}

// CT_LightRig ...
export class CT_LightRig {
	RigAttr: string;
	DirAttr: string;
	Rot: Array<CT_SphereCoords>;
}

// CT_Scene3D ...
export class CT_Scene3D {
	Camera: Array<CT_Camera>;
	LightRig: Array<CT_LightRig>;
	Backdrop: Array<CT_Backdrop>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_Backdrop ...
export class CT_Backdrop {
	Anchor: Array<CT_Point3D>;
	Norm: Array<CT_Vector3D>;
	Up: Array<CT_Vector3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// ST_BevelPresetType ...
export enum ST_BevelPresetType {
	relaxedInset = 'relaxedInset',
	circle = 'circle',
	slope = 'slope',
	cross = 'cross',
	angle = 'angle',
	softRound = 'softRound',
	convex = 'convex',
	coolSlant = 'coolSlant',
	divot = 'divot',
	riblet = 'riblet',
	hardEdge = 'hardEdge',
	artDeco = 'artDeco',
}

// CT_Bevel ...
export class CT_Bevel {
	WAttr: number | null;
	HAttr: number | null;
	PrstAttr: string | null;
}

// ST_PresetMaterialType ...
export enum ST_PresetMaterialType {
	legacyMatte = 'legacyMatte',
	legacyPlastic = 'legacyPlastic',
	legacyMetal = 'legacyMetal',
	legacyWireframe = 'legacyWireframe',
	matte = 'matte',
	plastic = 'plastic',
	metal = 'metal',
	warmMatte = 'warmMatte',
	translucentPowder = 'translucentPowder',
	powder = 'powder',
	dkEdge = 'dkEdge',
	softEdge = 'softEdge',
	clear = 'clear',
	flat = 'flat',
	softmetal = 'softmetal',
}

// CT_Shape3D ...
export class CT_Shape3D {
	ZAttr: ST_Coordinate | null;
	ExtrusionHAttr: number | null;
	ContourWAttr: number | null;
	PrstMaterialAttr: string | null;
	BevelT: Array<CT_Bevel>;
	BevelB: Array<CT_Bevel>;
	ExtrusionClr: Array<CT_Color>;
	ContourClr: Array<CT_Color>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_FlatText ...
export class CT_FlatText {
	ZAttr: ST_Coordinate | null;
}

// EG_Text3D ...
export class EG_Text3D {
	Sp3d: Array<CT_Shape3D>;
	FlatTx: Array<CT_FlatText>;
}

// CT_AlphaBiLevelEffect ...
export class CT_AlphaBiLevelEffect {
	ThreshAttr: ST_PositiveFixedPercentage;
}

// CT_AlphaCeilingEffect ...
export class CT_AlphaCeilingEffect {
}

// CT_AlphaFloorEffect ...
export class CT_AlphaFloorEffect {
}

// CT_AlphaInverseEffect ...
export class CT_AlphaInverseEffect {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_AlphaModulateFixedEffect ...
export class CT_AlphaModulateFixedEffect {
	AmtAttr: ST_PositivePercentage | null;
}

// CT_AlphaOutsetEffect ...
export class CT_AlphaOutsetEffect {
	RadAttr: ST_Coordinate | null;
}

// CT_AlphaReplaceEffect ...
export class CT_AlphaReplaceEffect {
	AAttr: ST_PositiveFixedPercentage;
}

// CT_BiLevelEffect ...
export class CT_BiLevelEffect {
	ThreshAttr: ST_PositiveFixedPercentage;
}

// CT_BlurEffect ...
export class CT_BlurEffect {
	RadAttr: number | null;
	GrowAttr: boolean | null;
}

// CT_ColorChangeEffect ...
export class CT_ColorChangeEffect {
	UseAAttr: boolean | null;
	ClrFrom: Array<CT_Color>;
	ClrTo: Array<CT_Color>;
}

// CT_ColorReplaceEffect ...
export class CT_ColorReplaceEffect {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_DuotoneEffect ...
export class CT_DuotoneEffect {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_GlowEffect ...
export class CT_GlowEffect {
	RadAttr: number | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_GrayscaleEffect ...
export class CT_GrayscaleEffect {
}

// CT_HSLEffect ...
export class CT_HSLEffect {
	HueAttr: number | null;
	SatAttr: ST_FixedPercentage | null;
	LumAttr: ST_FixedPercentage | null;
}

// CT_InnerShadowEffect ...
export class CT_InnerShadowEffect {
	BlurRadAttr: number | null;
	DistAttr: number | null;
	DirAttr: number | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_LuminanceEffect ...
export class CT_LuminanceEffect {
	BrightAttr: ST_FixedPercentage | null;
	ContrastAttr: ST_FixedPercentage | null;
}

// CT_OuterShadowEffect ...
export class CT_OuterShadowEffect {
	BlurRadAttr: number | null;
	DistAttr: number | null;
	DirAttr: number | null;
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	KxAttr: number | null;
	KyAttr: number | null;
	AlgnAttr: string | null;
	RotWithShapeAttr: boolean | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// ST_PresetShadowVal ...
export enum ST_PresetShadowVal {
	shdw1 = 'shdw1',
	shdw2 = 'shdw2',
	shdw3 = 'shdw3',
	shdw4 = 'shdw4',
	shdw5 = 'shdw5',
	shdw6 = 'shdw6',
	shdw7 = 'shdw7',
	shdw8 = 'shdw8',
	shdw9 = 'shdw9',
	shdw10 = 'shdw10',
	shdw11 = 'shdw11',
	shdw12 = 'shdw12',
	shdw13 = 'shdw13',
	shdw14 = 'shdw14',
	shdw15 = 'shdw15',
	shdw16 = 'shdw16',
	shdw17 = 'shdw17',
	shdw18 = 'shdw18',
	shdw19 = 'shdw19',
	shdw20 = 'shdw20',
}

// CT_PresetShadowEffect ...
export class CT_PresetShadowEffect {
	PrstAttr: string;
	DistAttr: number | null;
	DirAttr: number | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_ReflectionEffect ...
export class CT_ReflectionEffect {
	BlurRadAttr: number | null;
	StAAttr: ST_PositiveFixedPercentage | null;
	StPosAttr: ST_PositiveFixedPercentage | null;
	EndAAttr: ST_PositiveFixedPercentage | null;
	EndPosAttr: ST_PositiveFixedPercentage | null;
	DistAttr: number | null;
	DirAttr: number | null;
	FadeDirAttr: number | null;
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	KxAttr: number | null;
	KyAttr: number | null;
	AlgnAttr: string | null;
	RotWithShapeAttr: boolean | null;
}

// CT_RelativeOffsetEffect ...
export class CT_RelativeOffsetEffect {
	TxAttr: ST_Percentage | null;
	TyAttr: ST_Percentage | null;
}

// CT_SoftEdgesEffect ...
export class CT_SoftEdgesEffect {
	RadAttr: number;
}

// CT_TintEffect ...
export class CT_TintEffect {
	HueAttr: number | null;
	AmtAttr: ST_FixedPercentage | null;
}

// CT_TransformEffect ...
export class CT_TransformEffect {
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	KxAttr: number | null;
	KyAttr: number | null;
	TxAttr: ST_Coordinate | null;
	TyAttr: ST_Coordinate | null;
}

// CT_NoFillProperties ...
export class CT_NoFillProperties {
}

// CT_SolidColorFillProperties ...
export class CT_SolidColorFillProperties {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_LinearShadeProperties ...
export class CT_LinearShadeProperties {
	AngAttr: number | null;
	ScaledAttr: boolean | null;
}

// ST_PathShadeType ...
export enum ST_PathShadeType {
	shape = 'shape',
	circle = 'circle',
	rect = 'rect',
}

// CT_PathShadeProperties ...
export class CT_PathShadeProperties {
	PathAttr: string | null;
	FillToRect: Array<CT_RelativeRect>;
}

// EG_ShadeProperties ...
export class EG_ShadeProperties {
	Lin: Array<CT_LinearShadeProperties>;
	Path: Array<CT_PathShadeProperties>;
}

// ST_TileFlipMode ...
export enum ST_TileFlipMode {
	none = 'none',
	x = 'x',
	y = 'y',
	xy = 'xy',
}

// CT_GradientStop ...
export class CT_GradientStop {
	PosAttr: ST_PositiveFixedPercentage;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_GradientStopList ...
export class CT_GradientStopList {
	Gs: Array<CT_GradientStop>;
}

// CT_GradientFillProperties ...
export class CT_GradientFillProperties {
	FlipAttr: string | null;
	RotWithShapeAttr: boolean | null;
	EG_ShadeProperties: Array<EG_ShadeProperties>;
	GsLst: Array<CT_GradientStopList>;
	TileRect: Array<CT_RelativeRect>;
}

// CT_TileInfoProperties ...
export class CT_TileInfoProperties {
	TxAttr: ST_Coordinate | null;
	TyAttr: ST_Coordinate | null;
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	FlipAttr: string | null;
	AlgnAttr: string | null;
}

// CT_StretchInfoProperties ...
export class CT_StretchInfoProperties {
	FillRect: Array<CT_RelativeRect>;
}

// EG_FillModeProperties ...
export class EG_FillModeProperties {
	Tile: Array<CT_TileInfoProperties>;
	Stretch: Array<CT_StretchInfoProperties>;
}

// ST_BlipCompression ...
export enum ST_BlipCompression {
	email = 'email',
	screen = 'screen',
	print = 'print',
	hqprint = 'hqprint',
	none = 'none',
}

// CT_Blip ...
export class CT_Blip {
	AG_Blob: AG_Blob;
	CstateAttr: string | null;
	AlphaBiLevel: Array<CT_AlphaBiLevelEffect>;
	AlphaCeiling: Array<CT_AlphaCeilingEffect>;
	AlphaFloor: Array<CT_AlphaFloorEffect>;
	AlphaInv: Array<CT_AlphaInverseEffect>;
	AlphaMod: Array<CT_AlphaModulateEffect>;
	AlphaModFix: Array<CT_AlphaModulateFixedEffect>;
	AlphaRepl: Array<CT_AlphaReplaceEffect>;
	BiLevel: Array<CT_BiLevelEffect>;
	Blur: Array<CT_BlurEffect>;
	ClrChange: Array<CT_ColorChangeEffect>;
	ClrRepl: Array<CT_ColorReplaceEffect>;
	Duotone: Array<CT_DuotoneEffect>;
	FillOverlay: Array<CT_FillOverlayEffect>;
	Grayscl: Array<CT_GrayscaleEffect>;
	Hsl: Array<CT_HSLEffect>;
	Lum: Array<CT_LuminanceEffect>;
	Tint: Array<CT_TintEffect>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_BlipFillProperties ...
export class CT_BlipFillProperties {
	DpiAttr: number | null;
	RotWithShapeAttr: boolean | null;
	EG_FillModeProperties: Array<EG_FillModeProperties>;
	Blip: Array<CT_Blip>;
	SrcRect: Array<CT_RelativeRect>;
}

// ST_PresetPatternVal ...
export enum ST_PresetPatternVal {
	pct5 = 'pct5',
	pct10 = 'pct10',
	pct20 = 'pct20',
	pct25 = 'pct25',
	pct30 = 'pct30',
	pct40 = 'pct40',
	pct50 = 'pct50',
	pct60 = 'pct60',
	pct70 = 'pct70',
	pct75 = 'pct75',
	pct80 = 'pct80',
	pct90 = 'pct90',
	horz = 'horz',
	vert = 'vert',
	ltHorz = 'ltHorz',
	ltVert = 'ltVert',
	dkHorz = 'dkHorz',
	dkVert = 'dkVert',
	narHorz = 'narHorz',
	narVert = 'narVert',
	dashHorz = 'dashHorz',
	dashVert = 'dashVert',
	cross = 'cross',
	dnDiag = 'dnDiag',
	upDiag = 'upDiag',
	ltDnDiag = 'ltDnDiag',
	ltUpDiag = 'ltUpDiag',
	dkDnDiag = 'dkDnDiag',
	dkUpDiag = 'dkUpDiag',
	wdDnDiag = 'wdDnDiag',
	wdUpDiag = 'wdUpDiag',
	dashDnDiag = 'dashDnDiag',
	dashUpDiag = 'dashUpDiag',
	diagCross = 'diagCross',
	smCheck = 'smCheck',
	lgCheck = 'lgCheck',
	smGrid = 'smGrid',
	lgGrid = 'lgGrid',
	dotGrid = 'dotGrid',
	smConfetti = 'smConfetti',
	lgConfetti = 'lgConfetti',
	horzBrick = 'horzBrick',
	diagBrick = 'diagBrick',
	solidDmnd = 'solidDmnd',
	openDmnd = 'openDmnd',
	dotDmnd = 'dotDmnd',
	plaid = 'plaid',
	sphere = 'sphere',
	weave = 'weave',
	divot = 'divot',
	shingle = 'shingle',
	wave = 'wave',
	trellis = 'trellis',
	zigZag = 'zigZag',
}

// CT_PatternFillProperties ...
export class CT_PatternFillProperties {
	PrstAttr: string | null;
	FgClr: Array<CT_Color>;
	BgClr: Array<CT_Color>;
}

// CT_GroupFillProperties ...
export class CT_GroupFillProperties {
}

// EG_FillProperties ...
export class EG_FillProperties {
	NoFill: Array<CT_NoFillProperties>;
	SolidFill: Array<CT_SolidColorFillProperties>;
	GradFill: Array<CT_GradientFillProperties>;
	BlipFill: Array<CT_BlipFillProperties>;
	PattFill: Array<CT_PatternFillProperties>;
	GrpFill: Array<CT_GroupFillProperties>;
}

// CT_FillProperties ...
export class CT_FillProperties {
	EG_FillProperties: Array<EG_FillProperties>;
}

// CT_FillEffect ...
export class CT_FillEffect {
	EG_FillProperties: Array<EG_FillProperties>;
}

// ST_BlendMode ...
export enum ST_BlendMode {
	over = 'over',
	mult = 'mult',
	screen = 'screen',
	darken = 'darken',
	lighten = 'lighten',
}

// CT_FillOverlayEffect ...
export class CT_FillOverlayEffect {
	BlendAttr: string;
	EG_FillProperties: Array<EG_FillProperties>;
}

// CT_EffectReference ...
export class CT_EffectReference {
	RefAttr: string;
}

// EG_Effect ...
export class EG_Effect {
	Cont: Array<CT_EffectContainer>;
	Effect: Array<CT_EffectReference>;
	AlphaBiLevel: Array<CT_AlphaBiLevelEffect>;
	AlphaCeiling: Array<CT_AlphaCeilingEffect>;
	AlphaFloor: Array<CT_AlphaFloorEffect>;
	AlphaInv: Array<CT_AlphaInverseEffect>;
	AlphaMod: Array<CT_AlphaModulateEffect>;
	AlphaModFix: Array<CT_AlphaModulateFixedEffect>;
	AlphaOutset: Array<CT_AlphaOutsetEffect>;
	AlphaRepl: Array<CT_AlphaReplaceEffect>;
	BiLevel: Array<CT_BiLevelEffect>;
	Blend: Array<CT_BlendEffect>;
	Blur: Array<CT_BlurEffect>;
	ClrChange: Array<CT_ColorChangeEffect>;
	ClrRepl: Array<CT_ColorReplaceEffect>;
	Duotone: Array<CT_DuotoneEffect>;
	Fill: Array<CT_FillEffect>;
	FillOverlay: Array<CT_FillOverlayEffect>;
	Glow: Array<CT_GlowEffect>;
	Grayscl: Array<CT_GrayscaleEffect>;
	Hsl: Array<CT_HSLEffect>;
	InnerShdw: Array<CT_InnerShadowEffect>;
	Lum: Array<CT_LuminanceEffect>;
	OuterShdw: Array<CT_OuterShadowEffect>;
	PrstShdw: Array<CT_PresetShadowEffect>;
	Reflection: Array<CT_ReflectionEffect>;
	RelOff: Array<CT_RelativeOffsetEffect>;
	SoftEdge: Array<CT_SoftEdgesEffect>;
	Tint: Array<CT_TintEffect>;
	Xfrm: Array<CT_TransformEffect>;
}

// ST_EffectContainerType ...
export enum ST_EffectContainerType {
	sib = 'sib',
	tree = 'tree',
}

// CT_EffectContainer ...
export class CT_EffectContainer {
	TypeAttr: string | null;
	NameAttr: string | null;
	EG_Effect: Array<EG_Effect>;
}

// CT_AlphaModulateEffect ...
export class CT_AlphaModulateEffect {
	Cont: Array<CT_EffectContainer>;
}

// CT_BlendEffect ...
export class CT_BlendEffect {
	BlendAttr: string;
	Cont: Array<CT_EffectContainer>;
}

// CT_EffectList ...
export class CT_EffectList {
	Blur: Array<CT_BlurEffect>;
	FillOverlay: Array<CT_FillOverlayEffect>;
	Glow: Array<CT_GlowEffect>;
	InnerShdw: Array<CT_InnerShadowEffect>;
	OuterShdw: Array<CT_OuterShadowEffect>;
	PrstShdw: Array<CT_PresetShadowEffect>;
	Reflection: Array<CT_ReflectionEffect>;
	SoftEdge: Array<CT_SoftEdgesEffect>;
}

// EG_EffectProperties ...
export class EG_EffectProperties {
	EffectLst: Array<CT_EffectList>;
	EffectDag: Array<CT_EffectContainer>;
}

// CT_EffectProperties ...
export class CT_EffectProperties {
	EG_EffectProperties: Array<EG_EffectProperties>;
}

// Blip ...
export type Blip = CT_Blip;

// ST_ShapeType ...
export enum ST_ShapeType {
	line = 'line',
	lineInv = 'lineInv',
	triangle = 'triangle',
	rtTriangle = 'rtTriangle',
	rect = 'rect',
	diamond = 'diamond',
	parallelogram = 'parallelogram',
	trapezoid = 'trapezoid',
	nonIsoscelesTrapezoid = 'nonIsoscelesTrapezoid',
	pentagon = 'pentagon',
	hexagon = 'hexagon',
	heptagon = 'heptagon',
	octagon = 'octagon',
	decagon = 'decagon',
	dodecagon = 'dodecagon',
	star4 = 'star4',
	star5 = 'star5',
	star6 = 'star6',
	star7 = 'star7',
	star8 = 'star8',
	star10 = 'star10',
	star12 = 'star12',
	star16 = 'star16',
	star24 = 'star24',
	star32 = 'star32',
	roundRect = 'roundRect',
	round1Rect = 'round1Rect',
	round2SameRect = 'round2SameRect',
	round2DiagRect = 'round2DiagRect',
	snipRoundRect = 'snipRoundRect',
	snip1Rect = 'snip1Rect',
	snip2SameRect = 'snip2SameRect',
	snip2DiagRect = 'snip2DiagRect',
	plaque = 'plaque',
	ellipse = 'ellipse',
	teardrop = 'teardrop',
	homePlate = 'homePlate',
	chevron = 'chevron',
	pieWedge = 'pieWedge',
	pie = 'pie',
	blockArc = 'blockArc',
	donut = 'donut',
	noSmoking = 'noSmoking',
	rightArrow = 'rightArrow',
	leftArrow = 'leftArrow',
	upArrow = 'upArrow',
	downArrow = 'downArrow',
	stripedRightArrow = 'stripedRightArrow',
	notchedRightArrow = 'notchedRightArrow',
	bentUpArrow = 'bentUpArrow',
	leftRightArrow = 'leftRightArrow',
	upDownArrow = 'upDownArrow',
	leftUpArrow = 'leftUpArrow',
	leftRightUpArrow = 'leftRightUpArrow',
	quadArrow = 'quadArrow',
	leftArrowCallout = 'leftArrowCallout',
	rightArrowCallout = 'rightArrowCallout',
	upArrowCallout = 'upArrowCallout',
	downArrowCallout = 'downArrowCallout',
	leftRightArrowCallout = 'leftRightArrowCallout',
	upDownArrowCallout = 'upDownArrowCallout',
	quadArrowCallout = 'quadArrowCallout',
	bentArrow = 'bentArrow',
	uturnArrow = 'uturnArrow',
	circularArrow = 'circularArrow',
	leftCircularArrow = 'leftCircularArrow',
	leftRightCircularArrow = 'leftRightCircularArrow',
	curvedRightArrow = 'curvedRightArrow',
	curvedLeftArrow = 'curvedLeftArrow',
	curvedUpArrow = 'curvedUpArrow',
	curvedDownArrow = 'curvedDownArrow',
	swooshArrow = 'swooshArrow',
	cube = 'cube',
	can = 'can',
	lightningBolt = 'lightningBolt',
	heart = 'heart',
	sun = 'sun',
	moon = 'moon',
	smileyFace = 'smileyFace',
	irregularSeal1 = 'irregularSeal1',
	irregularSeal2 = 'irregularSeal2',
	foldedCorner = 'foldedCorner',
	bevel = 'bevel',
	frame = 'frame',
	halfFrame = 'halfFrame',
	corner = 'corner',
	diagStripe = 'diagStripe',
	chord = 'chord',
	arc = 'arc',
	leftBracket = 'leftBracket',
	rightBracket = 'rightBracket',
	leftBrace = 'leftBrace',
	rightBrace = 'rightBrace',
	bracketPair = 'bracketPair',
	bracePair = 'bracePair',
	straightConnector1 = 'straightConnector1',
	bentConnector2 = 'bentConnector2',
	bentConnector3 = 'bentConnector3',
	bentConnector4 = 'bentConnector4',
	bentConnector5 = 'bentConnector5',
	curvedConnector2 = 'curvedConnector2',
	curvedConnector3 = 'curvedConnector3',
	curvedConnector4 = 'curvedConnector4',
	curvedConnector5 = 'curvedConnector5',
	callout1 = 'callout1',
	callout2 = 'callout2',
	callout3 = 'callout3',
	accentCallout1 = 'accentCallout1',
	accentCallout2 = 'accentCallout2',
	accentCallout3 = 'accentCallout3',
	borderCallout1 = 'borderCallout1',
	borderCallout2 = 'borderCallout2',
	borderCallout3 = 'borderCallout3',
	accentBorderCallout1 = 'accentBorderCallout1',
	accentBorderCallout2 = 'accentBorderCallout2',
	accentBorderCallout3 = 'accentBorderCallout3',
	wedgeRectCallout = 'wedgeRectCallout',
	wedgeRoundRectCallout = 'wedgeRoundRectCallout',
	wedgeEllipseCallout = 'wedgeEllipseCallout',
	cloudCallout = 'cloudCallout',
	cloud = 'cloud',
	ribbon = 'ribbon',
	ribbon2 = 'ribbon2',
	ellipseRibbon = 'ellipseRibbon',
	ellipseRibbon2 = 'ellipseRibbon2',
	leftRightRibbon = 'leftRightRibbon',
	verticalScroll = 'verticalScroll',
	horizontalScroll = 'horizontalScroll',
	wave = 'wave',
	doubleWave = 'doubleWave',
	plus = 'plus',
	flowChartProcess = 'flowChartProcess',
	flowChartDecision = 'flowChartDecision',
	flowChartInputOutput = 'flowChartInputOutput',
	flowChartPredefinedProcess = 'flowChartPredefinedProcess',
	flowChartInternalStorage = 'flowChartInternalStorage',
	flowChartDocument = 'flowChartDocument',
	flowChartMultidocument = 'flowChartMultidocument',
	flowChartTerminator = 'flowChartTerminator',
	flowChartPreparation = 'flowChartPreparation',
	flowChartManualInput = 'flowChartManualInput',
	flowChartManualOperation = 'flowChartManualOperation',
	flowChartConnector = 'flowChartConnector',
	flowChartPunchedCard = 'flowChartPunchedCard',
	flowChartPunchedTape = 'flowChartPunchedTape',
	flowChartSummingJunction = 'flowChartSummingJunction',
	flowChartOr = 'flowChartOr',
	flowChartCollate = 'flowChartCollate',
	flowChartSort = 'flowChartSort',
	flowChartExtract = 'flowChartExtract',
	flowChartMerge = 'flowChartMerge',
	flowChartOfflineStorage = 'flowChartOfflineStorage',
	flowChartOnlineStorage = 'flowChartOnlineStorage',
	flowChartMagneticTape = 'flowChartMagneticTape',
	flowChartMagneticDisk = 'flowChartMagneticDisk',
	flowChartMagneticDrum = 'flowChartMagneticDrum',
	flowChartDisplay = 'flowChartDisplay',
	flowChartDelay = 'flowChartDelay',
	flowChartAlternateProcess = 'flowChartAlternateProcess',
	flowChartOffpageConnector = 'flowChartOffpageConnector',
	actionButtonBlank = 'actionButtonBlank',
	actionButtonHome = 'actionButtonHome',
	actionButtonHelp = 'actionButtonHelp',
	actionButtonInformation = 'actionButtonInformation',
	actionButtonForwardNext = 'actionButtonForwardNext',
	actionButtonBackPrevious = 'actionButtonBackPrevious',
	actionButtonEnd = 'actionButtonEnd',
	actionButtonBeginning = 'actionButtonBeginning',
	actionButtonReturn = 'actionButtonReturn',
	actionButtonDocument = 'actionButtonDocument',
	actionButtonSound = 'actionButtonSound',
	actionButtonMovie = 'actionButtonMovie',
	gear6 = 'gear6',
	gear9 = 'gear9',
	funnel = 'funnel',
	mathPlus = 'mathPlus',
	mathMinus = 'mathMinus',
	mathMultiply = 'mathMultiply',
	mathDivide = 'mathDivide',
	mathEqual = 'mathEqual',
	mathNotEqual = 'mathNotEqual',
	cornerTabs = 'cornerTabs',
	squareTabs = 'squareTabs',
	plaqueTabs = 'plaqueTabs',
	chartX = 'chartX',
	chartStar = 'chartStar',
	chartPlus = 'chartPlus',
}

// ST_TextShapeType ...
export enum ST_TextShapeType {
	textNoShape = 'textNoShape',
	textPlain = 'textPlain',
	textStop = 'textStop',
	textTriangle = 'textTriangle',
	textTriangleInverted = 'textTriangleInverted',
	textChevron = 'textChevron',
	textChevronInverted = 'textChevronInverted',
	textRingInside = 'textRingInside',
	textRingOutside = 'textRingOutside',
	textArchUp = 'textArchUp',
	textArchDown = 'textArchDown',
	textCircle = 'textCircle',
	textButton = 'textButton',
	textArchUpPour = 'textArchUpPour',
	textArchDownPour = 'textArchDownPour',
	textCirclePour = 'textCirclePour',
	textButtonPour = 'textButtonPour',
	textCurveUp = 'textCurveUp',
	textCurveDown = 'textCurveDown',
	textCanUp = 'textCanUp',
	textCanDown = 'textCanDown',
	textWave1 = 'textWave1',
	textWave2 = 'textWave2',
	textDoubleWave1 = 'textDoubleWave1',
	textWave4 = 'textWave4',
	textInflate = 'textInflate',
	textDeflate = 'textDeflate',
	textInflateBottom = 'textInflateBottom',
	textDeflateBottom = 'textDeflateBottom',
	textInflateTop = 'textInflateTop',
	textDeflateTop = 'textDeflateTop',
	textDeflateInflate = 'textDeflateInflate',
	textDeflateInflateDeflate = 'textDeflateInflateDeflate',
	textFadeRight = 'textFadeRight',
	textFadeLeft = 'textFadeLeft',
	textFadeUp = 'textFadeUp',
	textFadeDown = 'textFadeDown',
	textSlantUp = 'textSlantUp',
	textSlantDown = 'textSlantDown',
	textCascadeUp = 'textCascadeUp',
	textCascadeDown = 'textCascadeDown',
}

// ST_GeomGuideName ...
export type ST_GeomGuideName = string;

// ST_GeomGuideFormula ...
export type ST_GeomGuideFormula = string;

// CT_GeomGuide ...
export class CT_GeomGuide {
	NameAttr: string;
	FmlaAttr: string;
}

// CT_GeomGuideList ...
export class CT_GeomGuideList {
	Gd: Array<CT_GeomGuide>;
}

// ST_AdjCoordinate ...
export class ST_AdjCoordinate {
	ST_Coordinate: ST_Coordinate;
	ST_GeomGuideName: string;
}

// ST_AdjAngle ...
export class ST_AdjAngle {
	ST_Angle: number;
	ST_GeomGuideName: string;
}

// CT_AdjPoint2D ...
export class CT_AdjPoint2D {
	XAttr: ST_AdjCoordinate;
	YAttr: ST_AdjCoordinate;
}

// CT_GeomRect ...
export class CT_GeomRect {
	LAttr: ST_AdjCoordinate;
	TAttr: ST_AdjCoordinate;
	RAttr: ST_AdjCoordinate;
	BAttr: ST_AdjCoordinate;
}

// CT_XYAdjustHandle ...
export class CT_XYAdjustHandle {
	GdRefXAttr: string | null;
	MinXAttr: ST_AdjCoordinate | null;
	MaxXAttr: ST_AdjCoordinate | null;
	GdRefYAttr: string | null;
	MinYAttr: ST_AdjCoordinate | null;
	MaxYAttr: ST_AdjCoordinate | null;
	Pos: Array<CT_AdjPoint2D>;
}

// CT_PolarAdjustHandle ...
export class CT_PolarAdjustHandle {
	GdRefRAttr: string | null;
	MinRAttr: ST_AdjCoordinate | null;
	MaxRAttr: ST_AdjCoordinate | null;
	GdRefAngAttr: string | null;
	MinAngAttr: ST_AdjAngle | null;
	MaxAngAttr: ST_AdjAngle | null;
	Pos: Array<CT_AdjPoint2D>;
}

// CT_ConnectionSite ...
export class CT_ConnectionSite {
	AngAttr: ST_AdjAngle;
	Pos: Array<CT_AdjPoint2D>;
}

// CT_AdjustHandleList ...
export class CT_AdjustHandleList {
	AhXY: Array<CT_XYAdjustHandle>;
	AhPolar: Array<CT_PolarAdjustHandle>;
}

// CT_ConnectionSiteList ...
export class CT_ConnectionSiteList {
	Cxn: Array<CT_ConnectionSite>;
}

// CT_Connection ...
export class CT_Connection {
	IdAttr: number;
	IdxAttr: number;
}

// CT_Path2DMoveTo ...
export class CT_Path2DMoveTo {
	Pt: Array<CT_AdjPoint2D>;
}

// CT_Path2DLineTo ...
export class CT_Path2DLineTo {
	Pt: Array<CT_AdjPoint2D>;
}

// CT_Path2DArcTo ...
export class CT_Path2DArcTo {
	WRAttr: ST_AdjCoordinate;
	HRAttr: ST_AdjCoordinate;
	StAngAttr: ST_AdjAngle;
	SwAngAttr: ST_AdjAngle;
}

// CT_Path2DQuadBezierTo ...
export class CT_Path2DQuadBezierTo {
	Pt: Array<CT_AdjPoint2D>;
}

// CT_Path2DCubicBezierTo ...
export class CT_Path2DCubicBezierTo {
	Pt: Array<CT_AdjPoint2D>;
}

// CT_Path2DClose ...
export class CT_Path2DClose {
}

// ST_PathFillMode ...
export enum ST_PathFillMode {
	none = 'none',
	norm = 'norm',
	lighten = 'lighten',
	lightenLess = 'lightenLess',
	darken = 'darken',
	darkenLess = 'darkenLess',
}

// CT_Path2D ...
export class CT_Path2D {
	WAttr: number | null;
	HAttr: number | null;
	FillAttr: string | null;
	StrokeAttr: boolean | null;
	ExtrusionOkAttr: boolean | null;
	Close: Array<CT_Path2DClose>;
	MoveTo: Array<CT_Path2DMoveTo>;
	LnTo: Array<CT_Path2DLineTo>;
	ArcTo: Array<CT_Path2DArcTo>;
	QuadBezTo: Array<CT_Path2DQuadBezierTo>;
	CubicBezTo: Array<CT_Path2DCubicBezierTo>;
}

// CT_Path2DList ...
export class CT_Path2DList {
	Path: Array<CT_Path2D>;
}

// CT_PresetGeometry2D ...
export class CT_PresetGeometry2D {
	PrstAttr: string;
	AvLst: Array<CT_GeomGuideList>;
}

// CT_PresetTextShape ...
export class CT_PresetTextShape {
	PrstAttr: string;
	AvLst: Array<CT_GeomGuideList>;
}

// CT_CustomGeometry2D ...
export class CT_CustomGeometry2D {
	AvLst: Array<CT_GeomGuideList>;
	GdLst: Array<CT_GeomGuideList>;
	AhLst: Array<CT_AdjustHandleList>;
	CxnLst: Array<CT_ConnectionSiteList>;
	Rect: Array<CT_GeomRect>;
	PathLst: Array<CT_Path2DList>;
}

// EG_Geometry ...
export class EG_Geometry {
	CustGeom: Array<CT_CustomGeometry2D>;
	PrstGeom: Array<CT_PresetGeometry2D>;
}

// EG_TextGeometry ...
export class EG_TextGeometry {
	CustGeom: Array<CT_CustomGeometry2D>;
	PrstTxWarp: Array<CT_PresetTextShape>;
}

// ST_LineEndType ...
export enum ST_LineEndType {
	none = 'none',
	triangle = 'triangle',
	stealth = 'stealth',
	diamond = 'diamond',
	oval = 'oval',
	arrow = 'arrow',
}

// ST_LineEndWidth ...
export enum ST_LineEndWidth {
	sm = 'sm',
	med = 'med',
	lg = 'lg',
}

// ST_LineEndLength ...
export enum ST_LineEndLength {
	sm = 'sm',
	med = 'med',
	lg = 'lg',
}

// CT_LineEndProperties ...
export class CT_LineEndProperties {
	TypeAttr: string | null;
	WAttr: string | null;
	LenAttr: string | null;
}

// EG_LineFillProperties ...
export class EG_LineFillProperties {
	NoFill: Array<CT_NoFillProperties>;
	SolidFill: Array<CT_SolidColorFillProperties>;
	GradFill: Array<CT_GradientFillProperties>;
	PattFill: Array<CT_PatternFillProperties>;
}

// CT_LineJoinBevel ...
export class CT_LineJoinBevel {
}

// CT_LineJoinRound ...
export class CT_LineJoinRound {
}

// CT_LineJoinMiterProperties ...
export class CT_LineJoinMiterProperties {
	LimAttr: ST_PositivePercentage | null;
}

// EG_LineJoinProperties ...
export class EG_LineJoinProperties {
	Round: Array<CT_LineJoinRound>;
	Bevel: Array<CT_LineJoinBevel>;
	Miter: Array<CT_LineJoinMiterProperties>;
}

// ST_PresetLineDashVal ...
export enum ST_PresetLineDashVal {
	solid = 'solid',
	dot = 'dot',
	dash = 'dash',
	lgDash = 'lgDash',
	dashDot = 'dashDot',
	lgDashDot = 'lgDashDot',
	lgDashDotDot = 'lgDashDotDot',
	sysDash = 'sysDash',
	sysDot = 'sysDot',
	sysDashDot = 'sysDashDot',
	sysDashDotDot = 'sysDashDotDot',
}

// CT_PresetLineDashProperties ...
export class CT_PresetLineDashProperties {
	ValAttr: string | null;
}

// CT_DashStop ...
export class CT_DashStop {
	DAttr: ST_PositivePercentage;
	SpAttr: ST_PositivePercentage;
}

// CT_DashStopList ...
export class CT_DashStopList {
	Ds: Array<CT_DashStop>;
}

// EG_LineDashProperties ...
export class EG_LineDashProperties {
	PrstDash: Array<CT_PresetLineDashProperties>;
	CustDash: Array<CT_DashStopList>;
}

// ST_LineCap ...
export enum ST_LineCap {
	rnd = 'rnd',
	sq = 'sq',
	flat = 'flat',
}

// ST_LineWidth ...
export type ST_LineWidth = number;

// ST_PenAlignment ...
export enum ST_PenAlignment {
	ctr = 'ctr',
	in = 'in',
}

// ST_CompoundLine ...
export enum ST_CompoundLine {
	sng = 'sng',
	dbl = 'dbl',
	thickThin = 'thickThin',
	thinThick = 'thinThick',
	tri = 'tri',
}

// CT_LineProperties ...
export class CT_LineProperties {
	WAttr: number | null;
	CapAttr: string | null;
	CmpdAttr: string | null;
	AlgnAttr: string | null;
	EG_LineFillProperties: Array<EG_LineFillProperties>;
	EG_LineDashProperties: Array<EG_LineDashProperties>;
	EG_LineJoinProperties: Array<EG_LineJoinProperties>;
	HeadEnd: Array<CT_LineEndProperties>;
	TailEnd: Array<CT_LineEndProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// ST_ShapeID ...
export type ST_ShapeID = string;

// CT_ShapeProperties ...
export class CT_ShapeProperties {
	BwModeAttr: string | null;
	EG_Geometry: Array<EG_Geometry>;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	Xfrm: Array<CT_Transform2D>;
	Ln: Array<CT_LineProperties>;
	Scene3d: Array<CT_Scene3D>;
	Sp3d: Array<CT_Shape3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_GroupShapeProperties ...
export class CT_GroupShapeProperties {
	BwModeAttr: string | null;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	Xfrm: Array<CT_GroupTransform2D>;
	Scene3d: Array<CT_Scene3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_StyleMatrixReference ...
export class CT_StyleMatrixReference {
	IdxAttr: number;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_FontReference ...
export class CT_FontReference {
	IdxAttr: string;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

// CT_ShapeStyle ...
export class CT_ShapeStyle {
	LnRef: Array<CT_StyleMatrixReference>;
	FillRef: Array<CT_StyleMatrixReference>;
	EffectRef: Array<CT_StyleMatrixReference>;
	FontRef: Array<CT_FontReference>;
}

// CT_DefaultShapeDefinition ...
export class CT_DefaultShapeDefinition {
	SpPr: Array<CT_ShapeProperties>;
	BodyPr: Array<CT_TextBodyProperties>;
	LstStyle: Array<CT_TextListStyle>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_ObjectStyleDefaults ...
export class CT_ObjectStyleDefaults {
	SpDef: Array<CT_DefaultShapeDefinition>;
	LnDef: Array<CT_DefaultShapeDefinition>;
	TxDef: Array<CT_DefaultShapeDefinition>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_EmptyElement ...
export class CT_EmptyElement {
}

// CT_ColorMapping ...
export class CT_ColorMapping {
	Bg1Attr: string;
	Tx1Attr: string;
	Bg2Attr: string;
	Tx2Attr: string;
	Accent1Attr: string;
	Accent2Attr: string;
	Accent3Attr: string;
	Accent4Attr: string;
	Accent5Attr: string;
	Accent6Attr: string;
	HlinkAttr: string;
	FolHlinkAttr: string;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_ColorMappingOverride ...
export class CT_ColorMappingOverride {
	MasterClrMapping: CT_EmptyElement;
	OverrideClrMapping: CT_ColorMapping;
}

// CT_ColorSchemeAndMapping ...
export class CT_ColorSchemeAndMapping {
	ClrScheme: Array<CT_ColorScheme>;
	ClrMap: Array<CT_ColorMapping>;
}

// CT_ColorSchemeList ...
export class CT_ColorSchemeList {
	ExtraClrScheme: Array<CT_ColorSchemeAndMapping>;
}

// CT_OfficeStyleSheet ...
export class CT_OfficeStyleSheet {
	NameAttr: string | null;
	ThemeElements: Array<CT_BaseStyles>;
	ObjectDefaults: Array<CT_ObjectStyleDefaults>;
	ExtraClrSchemeLst: Array<CT_ColorSchemeList>;
	CustClrLst: Array<CT_CustomColorList>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_BaseStylesOverride ...
export class CT_BaseStylesOverride {
	ClrScheme: Array<CT_ColorScheme>;
	FontScheme: Array<CT_FontScheme>;
	FmtScheme: Array<CT_StyleMatrix>;
}

// CT_ClipboardStyleSheet ...
export class CT_ClipboardStyleSheet {
	ThemeElements: Array<CT_BaseStyles>;
	ClrMap: Array<CT_ColorMapping>;
}

// Theme ...
export type Theme = CT_OfficeStyleSheet;

// ThemeOverride ...
export type ThemeOverride = CT_BaseStylesOverride;

// ThemeManager ...
export type ThemeManager = CT_EmptyElement;

// CT_TableCellProperties ...
export class CT_TableCellProperties {
	MarLAttr: ST_Coordinate32 | null;
	MarRAttr: ST_Coordinate32 | null;
	MarTAttr: ST_Coordinate32 | null;
	MarBAttr: ST_Coordinate32 | null;
	VertAttr: string | null;
	AnchorAttr: string | null;
	AnchorCtrAttr: boolean | null;
	HorzOverflowAttr: string | null;
	EG_FillProperties: Array<EG_FillProperties>;
	LnL: Array<CT_LineProperties>;
	LnR: Array<CT_LineProperties>;
	LnT: Array<CT_LineProperties>;
	LnB: Array<CT_LineProperties>;
	LnTlToBr: Array<CT_LineProperties>;
	LnBlToTr: Array<CT_LineProperties>;
	Cell3D: Array<CT_Cell3D>;
	Headers: CT_Headers;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_Headers ...
export class CT_Headers {
	Header: string;
}

// CT_TableCol ...
export class CT_TableCol {
	WAttr: ST_Coordinate;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TableGrid ...
export class CT_TableGrid {
	GridCol: Array<CT_TableCol>;
}

// CT_TableCell ...
export class CT_TableCell {
	RowSpanAttr: number | null;
	GridSpanAttr: number | null;
	HMergeAttr: boolean | null;
	VMergeAttr: boolean | null;
	IdAttr: string | null;
	TxBody: Array<CT_TextBody>;
	TcPr: Array<CT_TableCellProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TableRow ...
export class CT_TableRow {
	HAttr: ST_Coordinate;
	Tc: Array<CT_TableCell>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TableProperties ...
export class CT_TableProperties {
	RtlAttr: boolean | null;
	FirstRowAttr: boolean | null;
	FirstColAttr: boolean | null;
	LastRowAttr: boolean | null;
	LastColAttr: boolean | null;
	BandRowAttr: boolean | null;
	BandColAttr: boolean | null;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	TableStyle: CT_TableStyle;
	TableStyleId: string;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_Table ...
export class CT_Table {
	TblPr: Array<CT_TableProperties>;
	TblGrid: Array<CT_TableGrid>;
	Tr: Array<CT_TableRow>;
}

// Tbl ...
export type Tbl = CT_Table;

// CT_Cell3D ...
export class CT_Cell3D {
	PrstMaterialAttr: string | null;
	Bevel: Array<CT_Bevel>;
	LightRig: Array<CT_LightRig>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// EG_ThemeableFillStyle ...
export class EG_ThemeableFillStyle {
	Fill: Array<CT_FillProperties>;
	FillRef: Array<CT_StyleMatrixReference>;
}

// CT_ThemeableLineStyle ...
export class CT_ThemeableLineStyle {
	Ln: Array<CT_LineProperties>;
	LnRef: Array<CT_StyleMatrixReference>;
}

// EG_ThemeableEffectStyle ...
export class EG_ThemeableEffectStyle {
	Effect: Array<CT_EffectProperties>;
	EffectRef: Array<CT_StyleMatrixReference>;
}

// EG_ThemeableFontStyles ...
export class EG_ThemeableFontStyles {
	Font: Array<CT_FontCollection>;
	FontRef: Array<CT_FontReference>;
}

// ST_OnOffStyleType ...
export enum ST_OnOffStyleType {
	on = 'on',
	off = 'off',
	def = 'def',
}

// CT_TableStyleTextStyle ...
export class CT_TableStyleTextStyle {
	BAttr: string | null;
	IAttr: string | null;
	EG_ThemeableFontStyles: Array<EG_ThemeableFontStyles>;
	EG_ColorChoice: Array<EG_ColorChoice>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TableCellBorderStyle ...
export class CT_TableCellBorderStyle {
	Left: Array<CT_ThemeableLineStyle>;
	Right: Array<CT_ThemeableLineStyle>;
	Top: Array<CT_ThemeableLineStyle>;
	Bottom: Array<CT_ThemeableLineStyle>;
	InsideH: Array<CT_ThemeableLineStyle>;
	InsideV: Array<CT_ThemeableLineStyle>;
	Tl2br: Array<CT_ThemeableLineStyle>;
	Tr2bl: Array<CT_ThemeableLineStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TableBackgroundStyle ...
export class CT_TableBackgroundStyle {
	EG_ThemeableFillStyle: Array<EG_ThemeableFillStyle>;
	EG_ThemeableEffectStyle: Array<EG_ThemeableEffectStyle>;
}

// CT_TableStyleCellStyle ...
export class CT_TableStyleCellStyle {
	EG_ThemeableFillStyle: Array<EG_ThemeableFillStyle>;
	TcBdr: Array<CT_TableCellBorderStyle>;
	Cell3D: Array<CT_Cell3D>;
}

// CT_TablePartStyle ...
export class CT_TablePartStyle {
	TcTxStyle: Array<CT_TableStyleTextStyle>;
	TcStyle: Array<CT_TableStyleCellStyle>;
}

// CT_TableStyle ...
export class CT_TableStyle {
	StyleIdAttr: string;
	StyleNameAttr: string;
	TblBg: Array<CT_TableBackgroundStyle>;
	WholeTbl: Array<CT_TablePartStyle>;
	Band1H: Array<CT_TablePartStyle>;
	Band2H: Array<CT_TablePartStyle>;
	Band1V: Array<CT_TablePartStyle>;
	Band2V: Array<CT_TablePartStyle>;
	LastCol: Array<CT_TablePartStyle>;
	FirstCol: Array<CT_TablePartStyle>;
	LastRow: Array<CT_TablePartStyle>;
	SeCell: Array<CT_TablePartStyle>;
	SwCell: Array<CT_TablePartStyle>;
	FirstRow: Array<CT_TablePartStyle>;
	NeCell: Array<CT_TablePartStyle>;
	NwCell: Array<CT_TablePartStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TableStyleList ...
export class CT_TableStyleList {
	DefAttr: string;
	TblStyle: Array<CT_TableStyle>;
}

// TblStyleLst ...
export type TblStyleLst = CT_TableStyleList;

// CT_TextParagraph ...
export class CT_TextParagraph {
	EG_TextRun: Array<EG_TextRun>;
	PPr: Array<CT_TextParagraphProperties>;
	EndParaRPr: Array<CT_TextCharacterProperties>;
}

// ST_TextAnchoringType ...
export enum ST_TextAnchoringType {
	t = 't',
	ctr = 'ctr',
	b = 'b',
	just = 'just',
	dist = 'dist',
}

// ST_TextVertOverflowType ...
export enum ST_TextVertOverflowType {
	overflow = 'overflow',
	ellipsis = 'ellipsis',
	clip = 'clip',
}

// ST_TextHorzOverflowType ...
export enum ST_TextHorzOverflowType {
	overflow = 'overflow',
	clip = 'clip',
}

// ST_TextVerticalType ...
export enum ST_TextVerticalType {
	horz = 'horz',
	vert = 'vert',
	vert270 = 'vert270',
	wordArtVert = 'wordArtVert',
	eaVert = 'eaVert',
	mongolianVert = 'mongolianVert',
	wordArtVertRtl = 'wordArtVertRtl',
}

// ST_TextWrappingType ...
export enum ST_TextWrappingType {
	none = 'none',
	square = 'square',
}

// ST_TextColumnCount ...
export type ST_TextColumnCount = number;

// CT_TextListStyle ...
export class CT_TextListStyle {
	DefPPr: Array<CT_TextParagraphProperties>;
	Lvl1pPr: Array<CT_TextParagraphProperties>;
	Lvl2pPr: Array<CT_TextParagraphProperties>;
	Lvl3pPr: Array<CT_TextParagraphProperties>;
	Lvl4pPr: Array<CT_TextParagraphProperties>;
	Lvl5pPr: Array<CT_TextParagraphProperties>;
	Lvl6pPr: Array<CT_TextParagraphProperties>;
	Lvl7pPr: Array<CT_TextParagraphProperties>;
	Lvl8pPr: Array<CT_TextParagraphProperties>;
	Lvl9pPr: Array<CT_TextParagraphProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// ST_TextFontScalePercentOrPercentString ...
export class ST_TextFontScalePercentOrPercentString {
	ST_Percentage: string;
}

// CT_TextNormalAutofit ...
export class CT_TextNormalAutofit {
	FontScaleAttr: ST_TextFontScalePercentOrPercentString | null;
	LnSpcReductionAttr: ST_TextSpacingPercentOrPercentString | null;
}

// CT_TextShapeAutofit ...
export class CT_TextShapeAutofit {
}

// CT_TextNoAutofit ...
export class CT_TextNoAutofit {
}

// EG_TextAutofit ...
export class EG_TextAutofit {
	NoAutofit: CT_TextNoAutofit;
	NormAutofit: CT_TextNormalAutofit;
	SpAutoFit: CT_TextShapeAutofit;
}

// CT_TextBodyProperties ...
export class CT_TextBodyProperties {
	RotAttr: number | null;
	SpcFirstLastParaAttr: boolean | null;
	VertOverflowAttr: string | null;
	HorzOverflowAttr: string | null;
	VertAttr: string | null;
	WrapAttr: string | null;
	LInsAttr: ST_Coordinate32 | null;
	TInsAttr: ST_Coordinate32 | null;
	RInsAttr: ST_Coordinate32 | null;
	BInsAttr: ST_Coordinate32 | null;
	NumColAttr: number | null;
	SpcColAttr: number | null;
	RtlColAttr: boolean | null;
	FromWordArtAttr: boolean | null;
	AnchorAttr: string | null;
	AnchorCtrAttr: boolean | null;
	ForceAAAttr: boolean | null;
	UprightAttr: boolean | null;
	CompatLnSpcAttr: boolean | null;
	EG_TextAutofit: Array<EG_TextAutofit>;
	EG_Text3D: Array<EG_Text3D>;
	PrstTxWarp: Array<CT_PresetTextShape>;
	Scene3d: Array<CT_Scene3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TextBody ...
export class CT_TextBody {
	BodyPr: Array<CT_TextBodyProperties>;
	LstStyle: Array<CT_TextListStyle>;
	P: Array<CT_TextParagraph>;
}

// ST_TextBulletStartAtNum ...
export type ST_TextBulletStartAtNum = number;

// ST_TextAutonumberScheme ...
export enum ST_TextAutonumberScheme {
	alphaLcParenBoth = 'alphaLcParenBoth',
	alphaUcParenBoth = 'alphaUcParenBoth',
	alphaLcParenR = 'alphaLcParenR',
	alphaUcParenR = 'alphaUcParenR',
	alphaLcPeriod = 'alphaLcPeriod',
	alphaUcPeriod = 'alphaUcPeriod',
	arabicParenBoth = 'arabicParenBoth',
	arabicParenR = 'arabicParenR',
	arabicPeriod = 'arabicPeriod',
	arabicPlain = 'arabicPlain',
	romanLcParenBoth = 'romanLcParenBoth',
	romanUcParenBoth = 'romanUcParenBoth',
	romanLcParenR = 'romanLcParenR',
	romanUcParenR = 'romanUcParenR',
	romanLcPeriod = 'romanLcPeriod',
	romanUcPeriod = 'romanUcPeriod',
	circleNumDbPlain = 'circleNumDbPlain',
	circleNumWdBlackPlain = 'circleNumWdBlackPlain',
	circleNumWdWhitePlain = 'circleNumWdWhitePlain',
	arabicDbPeriod = 'arabicDbPeriod',
	arabicDbPlain = 'arabicDbPlain',
	ea1ChsPeriod = 'ea1ChsPeriod',
	ea1ChsPlain = 'ea1ChsPlain',
	ea1ChtPeriod = 'ea1ChtPeriod',
	ea1ChtPlain = 'ea1ChtPlain',
	ea1JpnChsDbPeriod = 'ea1JpnChsDbPeriod',
	ea1JpnKorPlain = 'ea1JpnKorPlain',
	ea1JpnKorPeriod = 'ea1JpnKorPeriod',
	arabic1Minus = 'arabic1Minus',
	arabic2Minus = 'arabic2Minus',
	hebrew2Minus = 'hebrew2Minus',
	thaiAlphaPeriod = 'thaiAlphaPeriod',
	thaiAlphaParenR = 'thaiAlphaParenR',
	thaiAlphaParenBoth = 'thaiAlphaParenBoth',
	thaiNumPeriod = 'thaiNumPeriod',
	thaiNumParenR = 'thaiNumParenR',
	thaiNumParenBoth = 'thaiNumParenBoth',
	hindiAlphaPeriod = 'hindiAlphaPeriod',
	hindiNumPeriod = 'hindiNumPeriod',
	hindiNumParenR = 'hindiNumParenR',
	hindiAlpha1Period = 'hindiAlpha1Period',
}

// CT_TextBulletColorFollowText ...
export class CT_TextBulletColorFollowText {
}

// EG_TextBulletColor ...
export class EG_TextBulletColor {
	BuClrTx: Array<CT_TextBulletColorFollowText>;
	BuClr: Array<CT_Color>;
}

// ST_TextBulletSize ...
export class ST_TextBulletSize {
	ST_TextBulletSizePercent: ST_TextBulletSizePercent;
}

// ST_TextBulletSizePercent ...
export type ST_TextBulletSizePercent = string;

// CT_TextBulletSizeFollowText ...
export class CT_TextBulletSizeFollowText {
}

// CT_TextBulletSizePercent ...
export class CT_TextBulletSizePercent {
	ValAttr: string;
}

// CT_TextBulletSizePoint ...
export class CT_TextBulletSizePoint {
	ValAttr: number;
}

// EG_TextBulletSize ...
export class EG_TextBulletSize {
	BuSzTx: CT_TextBulletSizeFollowText;
	BuSzPct: CT_TextBulletSizePercent;
	BuSzPts: CT_TextBulletSizePoint;
}

// CT_TextBulletTypefaceFollowText ...
export class CT_TextBulletTypefaceFollowText {
}

// EG_TextBulletTypeface ...
export class EG_TextBulletTypeface {
	BuFontTx: CT_TextBulletTypefaceFollowText;
	BuFont: CT_TextFont;
}

// CT_TextAutonumberBullet ...
export class CT_TextAutonumberBullet {
	TypeAttr: string;
	StartAtAttr: number | null;
}

// CT_TextCharBullet ...
export class CT_TextCharBullet {
	CharAttr: string;
}

// CT_TextBlipBullet ...
export class CT_TextBlipBullet {
	Blip: Array<CT_Blip>;
}

// CT_TextNoBullet ...
export class CT_TextNoBullet {
}

// EG_TextBullet ...
export class EG_TextBullet {
	BuNone: CT_TextNoBullet;
	BuAutoNum: CT_TextAutonumberBullet;
	BuChar: CT_TextCharBullet;
	BuBlip: CT_TextBlipBullet;
}

// ST_TextPoint ...
export class ST_TextPoint {
	ST_TextPointUnqualified: ST_TextPointUnqualified;
	ST_UniversalMeasure: string;
}

// ST_TextPointUnqualified ...
export type ST_TextPointUnqualified = number;

// ST_TextNonNegativePoint ...
export type ST_TextNonNegativePoint = number;

// ST_TextFontSize ...
export type ST_TextFontSize = number;

// ST_TextTypeface ...
export type ST_TextTypeface = string;

// ST_PitchFamily ...
export enum ST_PitchFamily {
	Enum00 = '00',
	Enum01 = '01',
	Enum02 = '02',
	Enum16 = '16',
	Enum17 = '17',
	Enum18 = '18',
	Enum32 = '32',
	Enum33 = '33',
	Enum34 = '34',
	Enum48 = '48',
	Enum49 = '49',
	Enum50 = '50',
	Enum64 = '64',
	Enum65 = '65',
	Enum66 = '66',
	Enum80 = '80',
	Enum81 = '81',
	Enum82 = '82',
}

// CT_TextFont ...
export class CT_TextFont {
	TypefaceAttr: string;
	PanoseAttr: Uint8Array | null;
	PitchFamilyAttr: any | null;
	CharsetAttr: any | null;
}

// ST_TextUnderlineType ...
export enum ST_TextUnderlineType {
	none = 'none',
	words = 'words',
	sng = 'sng',
	dbl = 'dbl',
	heavy = 'heavy',
	dotted = 'dotted',
	dottedHeavy = 'dottedHeavy',
	dash = 'dash',
	dashHeavy = 'dashHeavy',
	dashLong = 'dashLong',
	dashLongHeavy = 'dashLongHeavy',
	dotDash = 'dotDash',
	dotDashHeavy = 'dotDashHeavy',
	dotDotDash = 'dotDotDash',
	dotDotDashHeavy = 'dotDotDashHeavy',
	wavy = 'wavy',
	wavyHeavy = 'wavyHeavy',
	wavyDbl = 'wavyDbl',
}

// CT_TextUnderlineLineFollowText ...
export class CT_TextUnderlineLineFollowText {
}

// CT_TextUnderlineFillFollowText ...
export class CT_TextUnderlineFillFollowText {
}

// CT_TextUnderlineFillGroupWrapper ...
export class CT_TextUnderlineFillGroupWrapper {
	EG_FillProperties: Array<EG_FillProperties>;
}

// EG_TextUnderlineLine ...
export class EG_TextUnderlineLine {
	ULnTx: CT_TextUnderlineLineFollowText;
	ULn: Array<CT_LineProperties>;
}

// EG_TextUnderlineFill ...
export class EG_TextUnderlineFill {
	UFillTx: CT_TextUnderlineFillFollowText;
	UFill: CT_TextUnderlineFillGroupWrapper;
}

// ST_TextStrikeType ...
export enum ST_TextStrikeType {
	noStrike = 'noStrike',
	sngStrike = 'sngStrike',
	dblStrike = 'dblStrike',
}

// ST_TextCapsType ...
export enum ST_TextCapsType {
	none = 'none',
	small = 'small',
	all = 'all',
}

// CT_TextCharacterProperties ...
export class CT_TextCharacterProperties {
	KumimojiAttr: boolean | null;
	LangAttr: string | null;
	AltLangAttr: string | null;
	SzAttr: number | null;
	BAttr: boolean | null;
	IAttr: boolean | null;
	UAttr: string | null;
	StrikeAttr: string | null;
	KernAttr: number | null;
	CapAttr: string | null;
	SpcAttr: ST_TextPoint | null;
	NormalizeHAttr: boolean | null;
	BaselineAttr: ST_Percentage | null;
	NoProofAttr: boolean | null;
	DirtyAttr: boolean | null;
	ErrAttr: boolean | null;
	SmtCleanAttr: boolean | null;
	SmtIdAttr: number | null;
	BmkAttr: string | null;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	EG_TextUnderlineLine: Array<EG_TextUnderlineLine>;
	EG_TextUnderlineFill: Array<EG_TextUnderlineFill>;
	Ln: Array<CT_LineProperties>;
	Highlight: Array<CT_Color>;
	Latin: Array<CT_TextFont>;
	Ea: Array<CT_TextFont>;
	Cs: Array<CT_TextFont>;
	Sym: Array<CT_TextFont>;
	HlinkClick: Array<CT_Hyperlink>;
	HlinkMouseOver: Array<CT_Hyperlink>;
	Rtl: CT_Boolean;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_Boolean ...
export class CT_Boolean {
	ValAttr: ST_OnOff | null;
}

// ST_TextSpacingPoint ...
export type ST_TextSpacingPoint = number;

// ST_TextSpacingPercentOrPercentString ...
export class ST_TextSpacingPercentOrPercentString {
	ST_Percentage: string;
}

// CT_TextSpacingPercent ...
export class CT_TextSpacingPercent {
	ValAttr: ST_TextSpacingPercentOrPercentString;
}

// CT_TextSpacingPoint ...
export class CT_TextSpacingPoint {
	ValAttr: number;
}

// ST_TextMargin ...
export type ST_TextMargin = number;

// ST_TextIndent ...
export type ST_TextIndent = number;

// ST_TextTabAlignType ...
export enum ST_TextTabAlignType {
	l = 'l',
	ctr = 'ctr',
	r = 'r',
	dec = 'dec',
}

// CT_TextTabStop ...
export class CT_TextTabStop {
	PosAttr: ST_Coordinate32 | null;
	AlgnAttr: string | null;
}

// CT_TextTabStopList ...
export class CT_TextTabStopList {
	Tab: Array<CT_TextTabStop>;
}

// CT_TextLineBreak ...
export class CT_TextLineBreak {
	RPr: Array<CT_TextCharacterProperties>;
}

// CT_TextSpacing ...
export class CT_TextSpacing {
	SpcPct: CT_TextSpacingPercent;
	SpcPts: CT_TextSpacingPoint;
}

// ST_TextAlignType ...
export enum ST_TextAlignType {
	l = 'l',
	ctr = 'ctr',
	r = 'r',
	just = 'just',
	justLow = 'justLow',
	dist = 'dist',
	thaiDist = 'thaiDist',
}

// ST_TextFontAlignType ...
export enum ST_TextFontAlignType {
	auto = 'auto',
	t = 't',
	ctr = 'ctr',
	base = 'base',
	b = 'b',
}

// ST_TextIndentLevelType ...
export type ST_TextIndentLevelType = number;

// CT_TextParagraphProperties ...
export class CT_TextParagraphProperties {
	MarLAttr: number | null;
	MarRAttr: number | null;
	LvlAttr: number | null;
	IndentAttr: number | null;
	AlgnAttr: string | null;
	DefTabSzAttr: ST_Coordinate32 | null;
	RtlAttr: boolean | null;
	EaLnBrkAttr: boolean | null;
	FontAlgnAttr: string | null;
	LatinLnBrkAttr: boolean | null;
	HangingPunctAttr: boolean | null;
	EG_TextBulletColor: Array<EG_TextBulletColor>;
	EG_TextBulletSize: Array<EG_TextBulletSize>;
	EG_TextBulletTypeface: Array<EG_TextBulletTypeface>;
	EG_TextBullet: Array<EG_TextBullet>;
	LnSpc: Array<CT_TextSpacing>;
	SpcBef: Array<CT_TextSpacing>;
	SpcAft: Array<CT_TextSpacing>;
	TabLst: Array<CT_TextTabStopList>;
	DefRPr: Array<CT_TextCharacterProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

// CT_TextField ...
export class CT_TextField {
	IdAttr: string;
	TypeAttr: string | null;
	RPr: Array<CT_TextCharacterProperties>;
	PPr: Array<CT_TextParagraphProperties>;
	T: string;
}

// EG_TextRun ...
export class EG_TextRun {
	R: CT_RegularTextRun;
	Br: CT_TextLineBreak;
	Fld: CT_TextField;
}

// CT_RegularTextRun ...
export class CT_RegularTextRun {
	RPr: Array<CT_TextCharacterProperties>;
	T: string;
}
