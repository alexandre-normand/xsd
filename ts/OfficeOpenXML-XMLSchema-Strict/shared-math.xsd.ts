// Code generated by xgen. DO NOT EDIT.

export type ST_Integer255 = number;

export class CT_Integer255 {
	ValAttr: number;
}

export type ST_Integer2 = number;

export class CT_Integer2 {
	ValAttr: number;
}

export type ST_SpacingRule = number;

export class CT_SpacingRule {
	ValAttr: number;
}

export type ST_UnSignedInteger = number;

export class CT_UnSignedInteger {
	ValAttr: number;
}

export type ST_Char = string;

export class CT_Char {
	ValAttr: string;
}

export class CT_OnOff {
	ValAttr: ST_OnOff | null;
}

export class CT_String {
	ValAttr: string | null;
}

export class CT_XAlign {
	ValAttr: string;
}

export class CT_YAlign {
	ValAttr: string;
}

export enum ST_Shp {
	centered = 'centered',
	match = 'match',
}

export class CT_Shp {
	ValAttr: string;
}

export enum ST_FType {
	bar = 'bar',
	skw = 'skw',
	lin = 'lin',
	noBar = 'noBar',
}

export class CT_FType {
	ValAttr: string;
}

export enum ST_LimLoc {
	undOvr = 'undOvr',
	subSup = 'subSup',
}

export class CT_LimLoc {
	ValAttr: string;
}

export enum ST_TopBot {
	top = 'top',
	bot = 'bot',
}

export class CT_TopBot {
	ValAttr: string;
}

export enum ST_Script {
	roman = 'roman',
	script = 'script',
	fraktur = 'fraktur',
	double-struck = 'double-struck',
	sans-serif = 'sans-serif',
	monospace = 'monospace',
}

export class CT_Script {
	ValAttr: string | null;
}

export enum ST_Style {
	p = 'p',
	b = 'b',
	i = 'i',
	bi = 'bi',
}

export class CT_Style {
	ValAttr: string | null;
}

export class CT_ManualBreak {
	AlnAtAttr: number | null;
}

export class EG_ScriptStyle {
	Scr: CT_Script;
	Sty: CT_Style;
}

export class CT_RPR {
	EG_ScriptStyle: EG_ScriptStyle;
	Lit: CT_OnOff;
	Nor: CT_OnOff;
	Brk: CT_ManualBreak;
	Aln: CT_OnOff;
}

export class CT_Text {
	XmlSpaceAttr: Space | null;
}

export class CT_R {
	WEG_RPr: EG_RPr;
	WEG_RunInnerContent: EG_RunInnerContent;
	RPr: CT_RPR;
	T: CT_Text;
}

export class CT_CtrlPr {
	WEG_RPrMath: EG_RPrMath;
}

export class CT_AccPr {
	Chr: CT_Char;
	CtrlPr: CT_CtrlPr;
}

export class CT_Acc {
	AccPr: CT_AccPr;
	E: CT_OMathArg;
}

export class CT_BarPr {
	Pos: CT_TopBot;
	CtrlPr: CT_CtrlPr;
}

export class CT_Bar {
	BarPr: CT_BarPr;
	E: CT_OMathArg;
}

export class CT_BoxPr {
	OpEmu: CT_OnOff;
	NoBreak: CT_OnOff;
	Diff: CT_OnOff;
	Brk: CT_ManualBreak;
	Aln: CT_OnOff;
	CtrlPr: CT_CtrlPr;
}

export class CT_Box {
	BoxPr: CT_BoxPr;
	E: CT_OMathArg;
}

export class CT_BorderBoxPr {
	HideTop: CT_OnOff;
	HideBot: CT_OnOff;
	HideLeft: CT_OnOff;
	HideRight: CT_OnOff;
	StrikeH: CT_OnOff;
	StrikeV: CT_OnOff;
	StrikeBLTR: CT_OnOff;
	StrikeTLBR: CT_OnOff;
	CtrlPr: CT_CtrlPr;
}

export class CT_BorderBox {
	BorderBoxPr: CT_BorderBoxPr;
	E: CT_OMathArg;
}

export class CT_DPr {
	BegChr: CT_Char;
	SepChr: CT_Char;
	EndChr: CT_Char;
	Grow: CT_OnOff;
	Shp: CT_Shp;
	CtrlPr: CT_CtrlPr;
}

export class CT_D {
	DPr: CT_DPr;
	E: Array<CT_OMathArg>;
}

export class CT_EqArrPr {
	BaseJc: CT_YAlign;
	MaxDist: CT_OnOff;
	ObjDist: CT_OnOff;
	RSpRule: CT_SpacingRule;
	RSp: CT_UnSignedInteger;
	CtrlPr: CT_CtrlPr;
}

export class CT_EqArr {
	EqArrPr: CT_EqArrPr;
	E: Array<CT_OMathArg>;
}

export class CT_FPr {
	Type: CT_FType;
	CtrlPr: CT_CtrlPr;
}

export class CT_F {
	FPr: CT_FPr;
	Num: CT_OMathArg;
	Den: CT_OMathArg;
}

export class CT_FuncPr {
	CtrlPr: CT_CtrlPr;
}

export class CT_Func {
	FuncPr: CT_FuncPr;
	FName: CT_OMathArg;
	E: CT_OMathArg;
}

export class CT_GroupChrPr {
	Chr: CT_Char;
	Pos: CT_TopBot;
	VertJc: CT_TopBot;
	CtrlPr: CT_CtrlPr;
}

export class CT_GroupChr {
	GroupChrPr: CT_GroupChrPr;
	E: CT_OMathArg;
}

export class CT_LimLowPr {
	CtrlPr: CT_CtrlPr;
}

export class CT_LimLow {
	LimLowPr: CT_LimLowPr;
	E: CT_OMathArg;
	Lim: CT_OMathArg;
}

export class CT_LimUppPr {
	CtrlPr: CT_CtrlPr;
}

export class CT_LimUpp {
	LimUppPr: CT_LimUppPr;
	E: CT_OMathArg;
	Lim: CT_OMathArg;
}

export class CT_MCPr {
	Count: CT_Integer255;
	McJc: CT_XAlign;
}

export class CT_MC {
	McPr: CT_MCPr;
}

export class CT_MCS {
	Mc: Array<CT_MC>;
}

export class CT_MPr {
	BaseJc: CT_YAlign;
	PlcHide: CT_OnOff;
	RSpRule: CT_SpacingRule;
	CGpRule: CT_SpacingRule;
	RSp: CT_UnSignedInteger;
	CSp: CT_UnSignedInteger;
	CGp: CT_UnSignedInteger;
	Mcs: CT_MCS;
	CtrlPr: CT_CtrlPr;
}

export class CT_MR {
	E: Array<CT_OMathArg>;
}

export class CT_M {
	MPr: CT_MPr;
	Mr: Array<CT_MR>;
}

export class CT_NaryPr {
	Chr: CT_Char;
	LimLoc: CT_LimLoc;
	Grow: CT_OnOff;
	SubHide: CT_OnOff;
	SupHide: CT_OnOff;
	CtrlPr: CT_CtrlPr;
}

export class CT_Nary {
	NaryPr: CT_NaryPr;
	Sub: CT_OMathArg;
	Sup: CT_OMathArg;
	E: CT_OMathArg;
}

export class CT_PhantPr {
	Show: CT_OnOff;
	ZeroWid: CT_OnOff;
	ZeroAsc: CT_OnOff;
	ZeroDesc: CT_OnOff;
	Transp: CT_OnOff;
	CtrlPr: CT_CtrlPr;
}

export class CT_Phant {
	PhantPr: CT_PhantPr;
	E: CT_OMathArg;
}

export class CT_RadPr {
	DegHide: CT_OnOff;
	CtrlPr: CT_CtrlPr;
}

export class CT_Rad {
	RadPr: CT_RadPr;
	Deg: CT_OMathArg;
	E: CT_OMathArg;
}

export class CT_SPrePr {
	CtrlPr: CT_CtrlPr;
}

export class CT_SPre {
	SPrePr: CT_SPrePr;
	Sub: CT_OMathArg;
	Sup: CT_OMathArg;
	E: CT_OMathArg;
}

export class CT_SSubPr {
	CtrlPr: CT_CtrlPr;
}

export class CT_SSub {
	SSubPr: CT_SSubPr;
	E: CT_OMathArg;
	Sub: CT_OMathArg;
}

export class CT_SSubSupPr {
	AlnScr: CT_OnOff;
	CtrlPr: CT_CtrlPr;
}

export class CT_SSubSup {
	SSubSupPr: CT_SSubSupPr;
	E: CT_OMathArg;
	Sub: CT_OMathArg;
	Sup: CT_OMathArg;
}

export class CT_SSupPr {
	CtrlPr: CT_CtrlPr;
}

export class CT_SSup {
	SSupPr: CT_SSupPr;
	E: CT_OMathArg;
	Sup: CT_OMathArg;
}

export class EG_OMathMathElements {
	Acc: CT_Acc;
	Bar: CT_Bar;
	Box: CT_Box;
	BorderBox: CT_BorderBox;
	D: CT_D;
	EqArr: CT_EqArr;
	F: CT_F;
	Func: CT_Func;
	GroupChr: CT_GroupChr;
	LimLow: CT_LimLow;
	LimUpp: CT_LimUpp;
	M: CT_M;
	Nary: CT_Nary;
	Phant: CT_Phant;
	Rad: CT_Rad;
	SPre: CT_SPre;
	SSub: CT_SSub;
	SSubSup: CT_SSubSup;
	SSup: CT_SSup;
	R: CT_R;
}

export class EG_OMathElements {
	EG_OMathMathElements: EG_OMathMathElements;
	WEG_PContentMath: EG_PContentMath;
}

export class CT_OMathArgPr {
	ArgSz: CT_Integer2;
}

export class CT_OMathArg {
	EG_OMathElements: Array<EG_OMathElements>;
	ArgPr: CT_OMathArgPr;
	CtrlPr: CT_CtrlPr;
}

export enum ST_Jc {
	left = 'left',
	right = 'right',
	center = 'center',
	centerGroup = 'centerGroup',
}

export class CT_OMathJc {
	ValAttr: string | null;
}

export class CT_OMathParaPr {
	Jc: CT_OMathJc;
}

export class CT_TwipsMeasure {
	ValAttr: ST_TwipsMeasure;
}

export enum ST_BreakBin {
	before = 'before',
	after = 'after',
	repeat = 'repeat',
}

export class CT_BreakBin {
	ValAttr: string | null;
}

export enum ST_BreakBinSub {
	-- = '--',
	-+ = '-+',
	+- = '+-',
}

export class CT_BreakBinSub {
	ValAttr: string | null;
}

export class CT_MathPr {
	MathFont: CT_String;
	BrkBin: CT_BreakBin;
	BrkBinSub: CT_BreakBinSub;
	SmallFrac: CT_OnOff;
	DispDef: CT_OnOff;
	LMargin: CT_TwipsMeasure;
	RMargin: CT_TwipsMeasure;
	DefJc: CT_OMathJc;
	PreSp: CT_TwipsMeasure;
	PostSp: CT_TwipsMeasure;
	InterSp: CT_TwipsMeasure;
	IntraSp: CT_TwipsMeasure;
	WrapIndent: CT_TwipsMeasure;
	WrapRight: CT_OnOff;
	IntLim: CT_LimLoc;
	NaryLim: CT_LimLoc;
}

export type MathPr = CT_MathPr;

export class CT_OMathPara {
	OMathParaPr: CT_OMathParaPr;
	OMath: Array<CT_OMath>;
}

export class CT_OMath {
	EG_OMathElements: Array<EG_OMathElements>;
}

export type OMathPara = CT_OMathPara;

export type OMath = CT_OMath;
