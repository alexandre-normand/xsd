// Code generated by xgen. DO NOT EDIT.

// Project is The <code>&lt;project&gt;</code> element is the root of the descriptor.
//         The following table lists all of the possible child elements.
export type Project = Model;

// Licenses ...
export class Licenses {
	License: Array<License>;
}

// Developers ...
export class Developers {
	Developer: Array<Developer>;
}

// Contributors ...
export class Contributors {
	Contributor: Array<Contributor>;
}

// MailingLists ...
export class MailingLists {
	MailingList: Array<MailingList>;
}

// Modules ...
export class Modules {
	Module: string;
}

// Properties ...
export class Properties {
}

// Dependencies ...
export class Dependencies {
	Dependency: Array<Dependency>;
}

// Repositories ...
export class Repositories {
	Repository: Array<Repository>;
}

// PluginRepositories ...
export class PluginRepositories {
	PluginRepository: Array<Repository>;
}

// Reports ...
export class Reports {
}

// Profiles ...
export class Profiles {
	Profile: Array<Profile>;
}

// Model is This element describes various attributes of the organization to which the
//             project belongs. These attributes are utilized when documentation is created (for
//             copyright notices and links).
export class Model {
	ChildProjectUrlInheritAppendPathAttr: string | null;
	ModelVersion: string;
	Parent: Parent;
	GroupId: string;
	ArtifactId: string;
	Version: string;
	Packaging: string;
	Name: string;
	Description: string;
	Url: string;
	InceptionYear: string;
	Organization: Organization;
	Licenses: Licenses;
	Developers: Developers;
	Contributors: Contributors;
	MailingLists: MailingLists;
	Prerequisites: Prerequisites;
	Modules: Modules;
	Scm: Scm;
	IssueManagement: IssueManagement;
	CiManagement: CiManagement;
	DistributionManagement: DistributionManagement;
	Properties: Properties;
	DependencyManagement: DependencyManagement;
	Dependencies: Dependencies;
	Repositories: Repositories;
	PluginRepositories: PluginRepositories;
	Build: Build;
	Reports: Reports;
	Reporting: Reporting;
	Profiles: Profiles;
}

// License is Addendum information pertaining to this license.
export class License {
	Name: string;
	Url: string;
	Distribution: string;
	Comments: string;
}

// Notifiers ...
export class Notifiers {
	Notifier: Array<Notifier>;
}

// CiManagement is URL for the continuous integration system used by the project if it has a web
//             interface.
export class CiManagement {
	System: string;
	Url: string;
	Notifiers: Notifiers;
}

// Configuration ...
export class Configuration {
}

// Notifier is <b>Deprecated</b>. Where to send the notification to - eg email address.
export class Notifier {
	Type: string;
	SendOnError: boolean;
	SendOnFailure: boolean;
	SendOnSuccess: boolean;
	SendOnWarning: boolean;
	Address: string;
	Configuration: Configuration;
}

// Scm is The URL to the project's browsable SCM repository, such as ViewVC or Fisheye.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             scm's <code>child.scm.url.inherit.append.path="false"</code>
export class Scm {
	ChildScmConnectionInheritAppendPathAttr: string | null;
	ChildScmDeveloperConnectionInheritAppendPathAttr: string | null;
	ChildScmUrlInheritAppendPathAttr: string | null;
	Connection: string;
	DeveloperConnection: string;
	Tag: string;
	Url: string;
}

// IssueManagement is URL for the issue management system used by the project.
export class IssueManagement {
	System: string;
	Url: string;
}

// DependencyManagement is Section for management of default dependency information for use in a group of
//         POMs.
export class DependencyManagement {
	Dependencies: Dependencies;
}

// Exclusions ...
export class Exclusions {
	Exclusion: Array<Exclusion>;
}

// Dependency is FOR SYSTEM SCOPE ONLY. Note that use of this property is <b>discouraged</b>
//             and may be replaced in later versions. This specifies the path on the filesystem
//             for this dependency.
//             Requires an absolute path for the value, not relative.
//             Use a property that gives the machine specific absolute path,
//             e.g. <code>${java.home}</code>.
export class Dependency {
	GroupId: string;
	ArtifactId: string;
	Version: string;
	Type: string;
	Classifier: string;
	Scope: string;
	SystemPath: string;
	Exclusions: Exclusions;
	Optional: string;
}

// Exclusion is The group ID of the project to exclude.
export class Exclusion {
	ArtifactId: string;
	GroupId: string;
}

// Parent is The relative path of the parent <code>pom.xml</code> file within the check out.
//             If not specified, it defaults to <code>../pom.xml</code>.
//             Maven looks for the parent POM first in this location on
//             the filesystem, then the local repository, and lastly in the remote repo.
//             <code>relativePath</code> allows you to select a different location,
//             for example when your structure is flat, or deeper without an intermediate parent POM.
//             However, the group ID, artifact ID and version are still required,
//             and must match the file in the location given or it will revert to the repository for the POM.
//             This feature is only for enhancing the development in a local checkout of that project.
//             Set the value to an empty string in case you want to disable the feature and always resolve
//             the parent POM from the repositories.
export class Parent {
	GroupId: string;
	ArtifactId: string;
	Version: string;
	RelativePath: string;
}

// Roles ...
export class Roles {
	Role: string;
}

// Developer is The URL of the organization.
export class Developer {
	Id: string;
	Name: string;
	Email: string;
	Url: string;
	Organization: string;
	OrganizationUrl: string;
	Roles: Roles;
	Timezone: string;
	Properties: Properties;
}

// OtherArchives ...
export class OtherArchives {
	OtherArchive: string;
}

// MailingList is The link to a URL where you can browse the mailing list archive.
export class MailingList {
	Name: string;
	Subscribe: string;
	Unsubscribe: string;
	Post: string;
	Archive: string;
	OtherArchives: OtherArchives;
}

// Contributor is The URL of the organization.
export class Contributor {
	Name: string;
	Email: string;
	Url: string;
	Organization: string;
	OrganizationUrl: string;
	Roles: Roles;
	Timezone: string;
	Properties: Properties;
}

// Organization is The URL to the organization's home page.
export class Organization {
	Name: string;
	Url: string;
}

// DistributionManagement is Gives the status of this artifact in the remote repository.
//             This must not be set in your local project, as it is updated by
//             tools placing it in the reposiory. Valid values are: <code>none</code> (default),
//             <code>converted</code> (repository manager converted this from an Maven 1 POM),
//             <code>partner</code>
//             (directly synced from a partner Maven 2 repository), <code>deployed</code> (was deployed from a Maven 2
//             instance), <code>verified</code> (has been hand verified as correct and final).
export class DistributionManagement {
	Repository: DeploymentRepository;
	SnapshotRepository: DeploymentRepository;
	Site: Site;
	DownloadUrl: string;
	Relocation: Relocation;
	Status: string;
}

// DeploymentRepository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
export class DeploymentRepository {
	UniqueVersion: boolean;
	Releases: RepositoryPolicy;
	Snapshots: RepositoryPolicy;
	Id: string;
	Name: string;
	Url: string;
	Layout: string;
}

// RepositoryPolicy is What to do when verification of an artifact checksum fails. Valid values are
//             <code>ignore</code>
//             ,
//             <code>fail</code>
//             or
//             <code>warn</code>
//             (the default).
export class RepositoryPolicy {
	Enabled: string;
	UpdatePolicy: string;
	ChecksumPolicy: string;
}

// Relocation is An additional message to show the user about the move, such as the reason.
export class Relocation {
	GroupId: string;
	ArtifactId: string;
	Version: string;
	Message: string;
}

// Site is The url of the location where website is deployed, in the form <code>protocol://hostname/path</code>.
//             <br><b>Default value is</b>: parent value [+ path adjustment] + (artifactId or project.directory property), or just parent value if
//             site's <code>child.site.url.inherit.append.path="false"</code>
export class Site {
	ChildSiteUrlInheritAppendPathAttr: string | null;
	Id: string;
	Name: string;
	Url: string;
}

// Plugins ...
export class Plugins {
	Plugin: Array<ReportPlugin>;
}

// Reporting is Where to store all of the generated reports. The default is
//             <code>${project.build.directory}/site</code>.
export class Reporting {
	ExcludeDefaults: string;
	OutputDirectory: string;
	Plugins: Plugins;
}

// ReportSets ...
export class ReportSets {
	ReportSet: Array<ReportSet>;
}

// ReportPlugin is The version of the reporting plugin to be used.
export class ReportPlugin {
	GroupId: string;
	ArtifactId: string;
	Version: string;
	ReportSets: ReportSets;
	Inherited: string;
	Configuration: Configuration;
}

// ReportSet is The unique id for this report set, to be used during POM inheritance and profile injection
//             for merging of report sets.
export class ReportSet {
	Id: string;
	Reports: Reports;
	Inherited: string;
	Configuration: Configuration;
}

// Profile is Information required to build the project.
export class Profile {
	Id: string;
	Activation: Activation;
	Build: BuildBase;
	Modules: Modules;
	DistributionManagement: DistributionManagement;
	Properties: Properties;
	DependencyManagement: DependencyManagement;
	Dependencies: Dependencies;
	Repositories: Repositories;
	PluginRepositories: PluginRepositories;
	Reports: Reports;
	Reporting: Reporting;
}

// Activation is Specifies that this profile will be activated based on existence of a file.
export class Activation {
	ActiveByDefault: boolean;
	Jdk: string;
	Os: ActivationOS;
	Property: ActivationProperty;
	File: ActivationFile;
}

// ActivationProperty is The value of the property required to activate a profile.
export class ActivationProperty {
	Name: string;
	Value: string;
}

// ActivationFile is The name of the file that must exist to activate the profile.
export class ActivationFile {
	Missing: string;
	Exists: string;
}

// ActivationOS is The version of the operating system to be used to activate the
//           profile.
export class ActivationOS {
	Name: string;
	Family: string;
	Arch: string;
	Version: string;
}

// Repository is The type of layout this repository uses for locating and storing artifacts -
//             can be <code>legacy</code> or <code>default</code>.
export class Repository {
	Releases: RepositoryPolicy;
	Snapshots: RepositoryPolicy;
	Id: string;
	Name: string;
	Url: string;
	Layout: string;
}

// Resources ...
export class Resources {
	Resource: Array<Resource>;
}

// TestResources ...
export class TestResources {
	TestResource: Array<Resource>;
}

// Filters ...
export class Filters {
	Filter: string;
}

// BuildBase is The default goal (or phase in Maven 2) to execute when none is specified for
//             the project. Note that in case of a multi-module build, only the default goal of the top-level
//             project is relevant, i.e. the default goals of child modules are ignored. Since Maven 3,
//             multiple goals/phases can be separated by whitespace.
export class BuildBase {
	DefaultGoal: string;
	Resources: Resources;
	TestResources: TestResources;
	Directory: string;
	FinalName: string;
	Filters: Filters;
	PluginManagement: PluginManagement;
	Plugins: Plugins;
}

// Executions ...
export class Executions {
	Execution: Array<PluginExecution>;
}

// Goals ...
export class Goals {
}

// Plugin is Whether to load Maven extensions (such as packaging and type handlers) from
//             this plugin. For performance reasons, this should only be enabled when necessary. Note: While the type
//             of this field is <code>String</code> for technical reasons, the semantic type is actually
//             <code>Boolean</code>. Default value is <code>false</code>.
export class Plugin {
	GroupId: string;
	ArtifactId: string;
	Version: string;
	Extensions: string;
	Executions: Executions;
	Dependencies: Dependencies;
	Goals: Goals;
	Inherited: string;
	Configuration: Configuration;
}

// PluginExecution is The build lifecycle phase to bind the goals in this execution to. If omitted,
//             the goals will be bound to the default phase specified by the plugin.
export class PluginExecution {
	Id: string;
	Phase: string;
	Goals: Goals;
	Inherited: string;
	Configuration: Configuration;
}

// Includes ...
export class Includes {
	Include: string;
}

// Excludes ...
export class Excludes {
	Exclude: string;
}

// Resource is Describe the directory where the resources are stored. The path is relative
//             to the POM.
export class Resource {
	TargetPath: string;
	Filtering: string;
	Directory: string;
	Includes: Includes;
	Excludes: Excludes;
}

// PluginManagement is Section for management of default plugin information for use in a group of POMs.
export class PluginManagement {
	Plugins: Plugins;
}

// Prerequisites is For a plugin project (packaging is <code>maven-plugin</code>), the minimum version of
//             Maven required to use the resulting plugin.<br>
export class Prerequisites {
	Maven: string;
}

// Extensions ...
export class Extensions {
	Extension: Array<Extension>;
}

// Build is The directory where compiled test classes are placed.
//             The default value is <code>target/test-classes</code>.
export class Build {
	SourceDirectory: string;
	ScriptSourceDirectory: string;
	TestSourceDirectory: string;
	OutputDirectory: string;
	TestOutputDirectory: string;
	Extensions: Extensions;
	DefaultGoal: string;
	Resources: Resources;
	TestResources: TestResources;
	Directory: string;
	FinalName: string;
	Filters: Filters;
	PluginManagement: PluginManagement;
	Plugins: Plugins;
}

// Extension is The version of the extension.
export class Extension {
	GroupId: string;
	ArtifactId: string;
	Version: string;
}
