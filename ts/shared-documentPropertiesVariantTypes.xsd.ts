// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

export type ST_VectorBaseType = string;

export type ST_ArrayBaseType = string;

export type ST_Cy = string;

export type ST_Error = string;

export class CT_Empty {
}

export class CT_Null {
}

export class CT_Vector {
	BaseTypeAttr: string;
	SizeAttr: number;
	Variant: Array<CT_Variant>;
	I1: Array<Any>;
	I2: Array<number>;
	I4: Array<number>;
	I8: Array<number>;
	Ui1: Array<Any>;
	Ui2: Array<number>;
	Ui4: Array<number>;
	Ui8: Array<number>;
	R4: Array<number>;
	R8: Array<number>;
	Lpstr: Array<string>;
	Lpwstr: Array<string>;
	Bstr: Array<string>;
	Date: Array<string>;
	Filetime: Array<string>;
	Bool: Array<boolean>;
	Cy: Array<string>;
	Error: Array<string>;
	Clsid: Array<string>;
}

export class CT_Array {
	LBoundsAttr: number;
	UBoundsAttr: number;
	BaseTypeAttr: string;
	Variant: Array<CT_Variant>;
	I1: Array<Any>;
	I2: Array<number>;
	I4: Array<number>;
	Int: Array<number>;
	Ui1: Array<Any>;
	Ui2: Array<number>;
	Ui4: Array<number>;
	Uint: Array<number>;
	R4: Array<number>;
	R8: Array<number>;
	Decimal: Array<number>;
	Bstr: Array<string>;
	Date: Array<string>;
	Bool: Array<boolean>;
	Error: Array<string>;
	Cy: Array<string>;
}

export class CT_Variant {
	Variant: Array<CT_Variant>;
	Vector: Array<CT_Vector>;
	Array: Array<CT_Array>;
	Blob: Array<Array<any>>;
	Oblob: Array<Array<any>>;
	Empty: Array<CT_Empty>;
	Null: Array<CT_Null>;
	I1: Array<Any>;
	I2: Array<number>;
	I4: Array<number>;
	I8: Array<number>;
	Int: Array<number>;
	Ui1: Array<Any>;
	Ui2: Array<number>;
	Ui4: Array<number>;
	Ui8: Array<number>;
	Uint: Array<number>;
	R4: Array<number>;
	R8: Array<number>;
	Decimal: Array<number>;
	Lpstr: Array<string>;
	Lpwstr: Array<string>;
	Bstr: Array<string>;
	Date: Array<string>;
	Filetime: Array<string>;
	Bool: Array<boolean>;
	Cy: Array<string>;
	Error: Array<string>;
	Stream: Array<Array<any>>;
	Ostream: Array<Array<any>>;
	Storage: Array<Array<any>>;
	Ostorage: Array<Array<any>>;
	Vstream: Array<CT_Vstream>;
	Clsid: Array<string>;
}

export class CT_Vstream {
	VersionAttr: string | null;
}

export type Variant = CT_Variant;

export type Vector = CT_Vector;

export type Array = CT_Array;

export type Blob = Array<any>;

export type Oblob = Array<any>;

export type Empty = CT_Empty;

export type Null = CT_Null;

export type I1 = Any;

export type I2 = number;

export type I4 = number;

export type I8 = number;

export type Int = number;

export type Ui1 = Any;

export type Ui2 = number;

export type Ui4 = number;

export type Ui8 = number;

export type Uint = number;

export type R4 = number;

export type R8 = number;

export type Decimal = number;

export type Lpstr = string;

export type Lpwstr = string;

export type Bstr = string;

export type Date = string;

export type Filetime = string;

export type Bool = boolean;

export type Cy = string;

export type Error = string;

export type Stream = Array<any>;

export type Ostream = Array<any>;

export type Storage = Array<any>;

export type Ostorage = Array<any>;

export type Vstream = CT_Vstream;

export type Clsid = string;
