// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

export class CT_Empty {
}

export class CT_OnOff {
	ValAttr: ST_OnOff | null;
}

export type ST_LongHexNumber = Array<any>;

export class CT_LongHexNumber {
	ValAttr: Array<any>;
}

export type ST_ShortHexNumber = Array<any>;

export type ST_UcharHexNumber = Array<any>;

export class CT_Charset {
	CharacterSetAttr: string | null;
}

export class ST_DecimalNumberOrPercent {
	ST_Percentage: string;
}

export type ST_DecimalNumber = number;

export class CT_DecimalNumber {
	ValAttr: number;
}

export class CT_UnsignedDecimalNumber {
	ValAttr: number;
}

export class CT_DecimalNumberOrPrecent {
	ValAttr: ST_DecimalNumberOrPercent;
}

export class CT_TwipsMeasure {
	ValAttr: ST_TwipsMeasure;
}

export class ST_SignedTwipsMeasure {
	Integer: number;
	ST_UniversalMeasure: string;
}

export class CT_SignedTwipsMeasure {
	ValAttr: ST_SignedTwipsMeasure;
}

export type ST_PixelsMeasure = number;

export class CT_PixelsMeasure {
	ValAttr: number;
}

export class ST_HpsMeasure {
	ST_UnsignedDecimalNumber: number;
	ST_PositiveUniversalMeasure: string;
}

export class CT_HpsMeasure {
	ValAttr: ST_HpsMeasure;
}

export class ST_SignedHpsMeasure {
	ST_UniversalMeasure: string;
	Integer: number;
}

export class CT_SignedHpsMeasure {
	ValAttr: ST_SignedHpsMeasure;
}

export type ST_DateTime = string;

export type ST_MacroName = string;

export class CT_MacroName {
	ValAttr: string;
}

export type ST_EighthPointMeasure = number;

export type ST_PointMeasure = number;

export class CT_String {
	ValAttr: string;
}

export class ST_TextScale {
	ST_TextScalePercent: ST_TextScalePercent;
}

export type ST_TextScalePercent = string;

export class CT_TextScale {
	ValAttr: ST_TextScale | null;
}

export type ST_HighlightColor = string;

export class CT_Highlight {
	ValAttr: string;
}

export type ST_HexColorAuto = string;

export class ST_HexColor {
	ST_HexColorAuto: string;
	ST_HexColorRGB: Array<any>;
}

export class CT_Color {
	ValAttr: ST_HexColor;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Array<any> | null;
	ThemeShadeAttr: Array<any> | null;
}

export class CT_Lang {
	ValAttr: string;
}

export class CT_Guid {
	ValAttr: string | null;
}

export type ST_Underline = string;

export class CT_Underline {
	ValAttr: string | null;
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Array<any> | null;
	ThemeShadeAttr: Array<any> | null;
}

export type ST_TextEffect = string;

export class CT_TextEffect {
	ValAttr: string;
}

export type ST_Border = string;

export class CT_Border {
	ValAttr: string;
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Array<any> | null;
	ThemeShadeAttr: Array<any> | null;
	SzAttr: number | null;
	SpaceAttr: number | null;
	ShadowAttr: ST_OnOff | null;
	FrameAttr: ST_OnOff | null;
}

export type ST_Shd = string;

export class CT_Shd {
	ValAttr: string;
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Array<any> | null;
	ThemeShadeAttr: Array<any> | null;
	FillAttr: ST_HexColor | null;
	ThemeFillAttr: string | null;
	ThemeFillTintAttr: Array<any> | null;
	ThemeFillShadeAttr: Array<any> | null;
}

export class CT_VerticalAlignRun {
	ValAttr: string;
}

export class CT_FitText {
	ValAttr: ST_TwipsMeasure;
	IdAttr: number | null;
}

export type ST_Em = string;

export class CT_Em {
	ValAttr: string;
}

export class CT_Language {
	ValAttr: string | null;
	EastAsiaAttr: string | null;
	BidiAttr: string | null;
}

export type ST_CombineBrackets = string;

export class CT_EastAsianLayout {
	IdAttr: number | null;
	CombineAttr: ST_OnOff | null;
	CombineBracketsAttr: string | null;
	VertAttr: ST_OnOff | null;
	VertCompressAttr: ST_OnOff | null;
}

export type ST_HeightRule = string;

export type ST_Wrap = string;

export type ST_VAnchor = string;

export type ST_HAnchor = string;

export type ST_DropCap = string;

export class CT_FramePr {
	DropCapAttr: string | null;
	LinesAttr: number | null;
	WAttr: ST_TwipsMeasure | null;
	HAttr: ST_TwipsMeasure | null;
	VSpaceAttr: ST_TwipsMeasure | null;
	HSpaceAttr: ST_TwipsMeasure | null;
	WrapAttr: string | null;
	HAnchorAttr: string | null;
	VAnchorAttr: string | null;
	XAttr: ST_SignedTwipsMeasure | null;
	XAlignAttr: string | null;
	YAttr: ST_SignedTwipsMeasure | null;
	YAlignAttr: string | null;
	HRuleAttr: string | null;
	AnchorLockAttr: ST_OnOff | null;
}

export type ST_TabJc = string;

export type ST_TabTlc = string;

export class CT_TabStop {
	ValAttr: string;
	LeaderAttr: string | null;
	PosAttr: ST_SignedTwipsMeasure;
}

export type ST_LineSpacingRule = string;

export class CT_Spacing {
	BeforeAttr: ST_TwipsMeasure | null;
	BeforeLinesAttr: number | null;
	BeforeAutospacingAttr: ST_OnOff | null;
	AfterAttr: ST_TwipsMeasure | null;
	AfterLinesAttr: number | null;
	AfterAutospacingAttr: ST_OnOff | null;
	LineAttr: ST_SignedTwipsMeasure | null;
	LineRuleAttr: string | null;
}

export class CT_Ind {
	StartAttr: ST_SignedTwipsMeasure | null;
	StartCharsAttr: number | null;
	EndAttr: ST_SignedTwipsMeasure | null;
	EndCharsAttr: number | null;
	HangingAttr: ST_TwipsMeasure | null;
	HangingCharsAttr: number | null;
	FirstLineAttr: ST_TwipsMeasure | null;
	FirstLineCharsAttr: number | null;
}

export type ST_Jc = string;

export type ST_JcTable = string;

export class CT_Jc {
	ValAttr: string;
}

export class CT_JcTable {
	ValAttr: string;
}

export type ST_View = string;

export class CT_View {
	ValAttr: string;
}

export type ST_Zoom = string;

export class CT_Zoom {
	ValAttr: string | null;
	PercentAttr: ST_DecimalNumberOrPercent;
}

export class CT_WritingStyle {
	LangAttr: string;
	VendorIDAttr: string;
	DllVersionAttr: string;
	NlCheckAttr: ST_OnOff | null;
	CheckStyleAttr: ST_OnOff;
	AppNameAttr: string;
}

export type ST_Proof = string;

export class CT_Proof {
	SpellingAttr: string | null;
	GrammarAttr: string | null;
}

export type ST_DocType = string;

export class CT_DocType {
	ValAttr: string;
}

export type ST_DocProtect = string;

export class AG_Password {
	AlgorithmNameAttr: string | null;
	HashValueAttr: Array<any> | null;
	SaltValueAttr: Array<any> | null;
	SpinCountAttr: number | null;
}

export class CT_DocProtect {
	AG_Password: AG_Password;
	EditAttr: string | null;
	FormattingAttr: ST_OnOff | null;
	EnforcementAttr: ST_OnOff | null;
}

export type ST_MailMergeDocType = string;

export class CT_MailMergeDocType {
	ValAttr: string;
}

export type ST_MailMergeDataType = string;

export class CT_MailMergeDataType {
	ValAttr: string;
}

export type ST_MailMergeDest = string;

export class CT_MailMergeDest {
	ValAttr: string;
}

export type ST_MailMergeOdsoFMDFieldType = string;

export class CT_MailMergeOdsoFMDFieldType {
	ValAttr: string;
}

export class CT_TrackChangesView {
	MarkupAttr: ST_OnOff | null;
	CommentsAttr: ST_OnOff | null;
	InsDelAttr: ST_OnOff | null;
	FormattingAttr: ST_OnOff | null;
	InkAnnotationsAttr: ST_OnOff | null;
}

export class CT_Kinsoku {
	LangAttr: string;
	ValAttr: string;
}

export type ST_TextDirection = string;

export class CT_TextDirection {
	ValAttr: string;
}

export type ST_TextAlignment = string;

export class CT_TextAlignment {
	ValAttr: string;
}

export type ST_DisplacedByCustomXml = string;

export type ST_AnnotationVMerge = string;

export class CT_Markup {
	IdAttr: number;
}

export class CT_TrackChange {
	AuthorAttr: string;
	DateAttr: string | null;
}

export class CT_CellMergeTrackChange {
	VMergeAttr: string | null;
	VMergeOrigAttr: string | null;
}

export class CT_TrackChangeRange {
	DisplacedByCustomXmlAttr: string | null;
}

export class CT_MarkupRange {
	DisplacedByCustomXmlAttr: string | null;
}

export class CT_BookmarkRange {
	ColFirstAttr: number | null;
	ColLastAttr: number | null;
}

export class CT_Bookmark {
	NameAttr: string;
}

export class CT_MoveBookmark {
	AuthorAttr: string;
	DateAttr: string;
}

export class CT_Comment {
	InitialsAttr: string | null;
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

export class CT_TblPrExChange {
	TblPrEx: Array<CT_TblPrExBase>;
}

export class CT_TcPrChange {
	TcPr: Array<CT_TcPrInner>;
}

export class CT_TrPrChange {
	TrPr: Array<CT_TrPrBase>;
}

export class CT_TblGridChange {
	TblGrid: Array<CT_TblGridBase>;
}

export class CT_TblPrChange {
	TblPr: Array<CT_TblPrBase>;
}

export class CT_SectPrChange {
	SectPr: Array<CT_SectPrBase>;
}

export class CT_PPrChange {
	PPr: Array<CT_PPrBase>;
}

export class CT_RPrChange {
	RPr: Array<CT_RPrOriginal>;
}

export class CT_ParaRPrChange {
	RPr: Array<CT_ParaRPrOriginal>;
}

export class CT_RunTrackChange {
	EG_ContentRunContent: EG_ContentRunContent;
	MEG_OMathMathElements: EG_OMathMathElements;
}

export class EG_PContentMath {
	EG_PContentBase: Array<EG_PContentBase>;
	EG_ContentRunContentBase: Array<EG_ContentRunContentBase>;
}

export class EG_PContentBase {
	CustomXml: CT_CustomXmlRun;
	FldSimple: Array<CT_SimpleField>;
	Hyperlink: CT_Hyperlink;
}

export class EG_ContentRunContentBase {
	SmartTag: CT_SmartTagRun;
	Sdt: CT_SdtRun;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

export class EG_CellMarkupElements {
	CellIns: CT_TrackChange;
	CellDel: CT_TrackChange;
	CellMerge: CT_CellMergeTrackChange;
}

export class EG_RangeMarkupElements {
	BookmarkStart: CT_Bookmark;
	BookmarkEnd: CT_MarkupRange;
	MoveFromRangeStart: CT_MoveBookmark;
	MoveFromRangeEnd: CT_MarkupRange;
	MoveToRangeStart: CT_MoveBookmark;
	MoveToRangeEnd: CT_MarkupRange;
	CommentRangeStart: CT_MarkupRange;
	CommentRangeEnd: CT_MarkupRange;
	CustomXmlInsRangeStart: CT_TrackChange;
	CustomXmlInsRangeEnd: CT_Markup;
	CustomXmlDelRangeStart: CT_TrackChange;
	CustomXmlDelRangeEnd: CT_Markup;
	CustomXmlMoveFromRangeStart: CT_TrackChange;
	CustomXmlMoveFromRangeEnd: CT_Markup;
	CustomXmlMoveToRangeStart: CT_TrackChange;
	CustomXmlMoveToRangeEnd: CT_Markup;
}

export class CT_NumPr {
	Ilvl: Array<CT_DecimalNumber>;
	NumId: Array<CT_DecimalNumber>;
	Ins: Array<CT_TrackChange>;
}

export class CT_PBdr {
	Top: Array<CT_Border>;
	Left: Array<CT_Border>;
	Bottom: Array<CT_Border>;
	Right: Array<CT_Border>;
	Between: Array<CT_Border>;
	Bar: Array<CT_Border>;
}

export class CT_Tabs {
	Tab: Array<CT_TabStop>;
}

export type ST_TextboxTightWrap = string;

export class CT_TextboxTightWrap {
	ValAttr: string;
}

export class CT_PPr {
	RPr: Array<CT_ParaRPr>;
	SectPr: Array<CT_SectPr>;
	PPrChange: Array<CT_PPrChange>;
}

export class CT_PPrBase {
	PStyle: Array<CT_String>;
	KeepNext: Array<CT_OnOff>;
	KeepLines: Array<CT_OnOff>;
	PageBreakBefore: Array<CT_OnOff>;
	FramePr: Array<CT_FramePr>;
	WidowControl: Array<CT_OnOff>;
	NumPr: Array<CT_NumPr>;
	SuppressLineNumbers: Array<CT_OnOff>;
	PBdr: Array<CT_PBdr>;
	Shd: Array<CT_Shd>;
	Tabs: Array<CT_Tabs>;
	SuppressAutoHyphens: Array<CT_OnOff>;
	Kinsoku: Array<CT_OnOff>;
	WordWrap: Array<CT_OnOff>;
	OverflowPunct: Array<CT_OnOff>;
	TopLinePunct: Array<CT_OnOff>;
	AutoSpaceDE: Array<CT_OnOff>;
	AutoSpaceDN: Array<CT_OnOff>;
	Bidi: Array<CT_OnOff>;
	AdjustRightInd: Array<CT_OnOff>;
	SnapToGrid: Array<CT_OnOff>;
	Spacing: Array<CT_Spacing>;
	Ind: Array<CT_Ind>;
	ContextualSpacing: Array<CT_OnOff>;
	MirrorIndents: Array<CT_OnOff>;
	SuppressOverlap: Array<CT_OnOff>;
	Jc: Array<CT_Jc>;
	TextDirection: Array<CT_TextDirection>;
	TextAlignment: Array<CT_TextAlignment>;
	TextboxTightWrap: Array<CT_TextboxTightWrap>;
	OutlineLvl: Array<CT_DecimalNumber>;
	DivId: Array<CT_DecimalNumber>;
	CnfStyle: Array<CT_Cnf>;
}

export class CT_PPrGeneral {
	PPrChange: Array<CT_PPrChange>;
}

export class CT_Control {
	NameAttr: string | null;
	ShapeidAttr: string | null;
	RIdAttr: string | null;
}

export class CT_Background {
	ColorAttr: ST_HexColor | null;
	ThemeColorAttr: string | null;
	ThemeTintAttr: Array<any> | null;
	ThemeShadeAttr: Array<any> | null;
	Drawing: Array<CT_Drawing>;
}

export class CT_Rel {
	RIdAttr: string;
}

export class CT_Object {
	DxaOrigAttr: ST_TwipsMeasure | null;
	DyaOrigAttr: ST_TwipsMeasure | null;
	Drawing: Array<CT_Drawing>;
	Control: Array<CT_Control>;
	ObjectLink: Array<CT_ObjectLink>;
	ObjectEmbed: Array<CT_ObjectEmbed>;
	Movie: Array<CT_Rel>;
}

export class CT_ObjectEmbed {
	DrawAspectAttr: string | null;
	RIdAttr: string;
	ProgIdAttr: string | null;
	ShapeIdAttr: string | null;
	FieldCodesAttr: string | null;
}

export type ST_ObjectDrawAspect = string;

export class CT_ObjectLink {
	UpdateModeAttr: string;
	LockedFieldAttr: ST_OnOff | null;
}

export type ST_ObjectUpdateMode = string;

export class CT_Drawing {
	WpAnchor: Array<CT_Anchor>;
	WpInline: Array<CT_Inline>;
}

export class CT_SimpleField {
	InstrAttr: string;
	FldLockAttr: ST_OnOff | null;
	DirtyAttr: ST_OnOff | null;
	EG_PContent: Array<EG_PContent>;
}

export type ST_FldCharType = string;

export type ST_InfoTextType = string;

export type ST_FFHelpTextVal = string;

export type ST_FFStatusTextVal = string;

export type ST_FFName = string;

export type ST_FFTextType = string;

export class CT_FFTextType {
	ValAttr: string;
}

export class CT_FFName {
	ValAttr: string | null;
}

export class CT_FldChar {
	FldCharTypeAttr: string;
	FldLockAttr: ST_OnOff | null;
	DirtyAttr: ST_OnOff | null;
	FfData: Array<CT_FFData>;
}

export class CT_Hyperlink {
	TgtFrameAttr: string | null;
	TooltipAttr: string | null;
	DocLocationAttr: string | null;
	HistoryAttr: ST_OnOff | null;
	AnchorAttr: string | null;
	RIdAttr: string | null;
	EG_PContent: Array<EG_PContent>;
}

export class CT_FFData {
	Name: Array<CT_FFName>;
	Label: Array<CT_DecimalNumber>;
	TabIndex: Array<CT_UnsignedDecimalNumber>;
	Enabled: Array<CT_OnOff>;
	CalcOnExit: Array<CT_OnOff>;
	EntryMacro: Array<CT_MacroName>;
	ExitMacro: Array<CT_MacroName>;
	HelpText: Array<CT_FFHelpText>;
	StatusText: Array<CT_FFStatusText>;
	CheckBox: Array<CT_FFCheckBox>;
	DdList: Array<CT_FFDDList>;
	TextInput: Array<CT_FFTextInput>;
}

export class CT_FFHelpText {
	TypeAttr: string | null;
	ValAttr: string | null;
}

export class CT_FFStatusText {
	TypeAttr: string | null;
	ValAttr: string | null;
}

export class CT_FFCheckBox {
	Size: Array<CT_HpsMeasure>;
	SizeAuto: Array<CT_OnOff>;
	Default: Array<CT_OnOff>;
	Checked: Array<CT_OnOff>;
}

export class CT_FFDDList {
	Result: Array<CT_DecimalNumber>;
	Default: Array<CT_DecimalNumber>;
	ListEntry: Array<CT_String>;
}

export class CT_FFTextInput {
	Type: Array<CT_FFTextType>;
	Default: Array<CT_String>;
	MaxLength: Array<CT_DecimalNumber>;
	Format: Array<CT_String>;
}

export type ST_SectionMark = string;

export class CT_SectType {
	ValAttr: string | null;
}

export class CT_PaperSource {
	FirstAttr: number | null;
	OtherAttr: number | null;
}

export type ST_NumberFormat = string;

export type ST_PageOrientation = string;

export class CT_PageSz {
	WAttr: ST_TwipsMeasure | null;
	HAttr: ST_TwipsMeasure | null;
	OrientAttr: string | null;
	CodeAttr: number | null;
}

export class CT_PageMar {
	TopAttr: ST_SignedTwipsMeasure;
	RightAttr: ST_TwipsMeasure;
	BottomAttr: ST_SignedTwipsMeasure;
	LeftAttr: ST_TwipsMeasure;
	HeaderAttr: ST_TwipsMeasure;
	FooterAttr: ST_TwipsMeasure;
	GutterAttr: ST_TwipsMeasure;
}

export type ST_PageBorderZOrder = string;

export type ST_PageBorderDisplay = string;

export type ST_PageBorderOffset = string;

export class CT_PageBorders {
	ZOrderAttr: string | null;
	DisplayAttr: string | null;
	OffsetFromAttr: string | null;
	Top: Array<CT_TopPageBorder>;
	Left: Array<CT_PageBorder>;
	Bottom: Array<CT_BottomPageBorder>;
	Right: Array<CT_PageBorder>;
}

export class CT_PageBorder {
	RIdAttr: string | null;
}

export class CT_BottomPageBorder {
	RBottomLeftAttr: string | null;
	RBottomRightAttr: string | null;
}

export class CT_TopPageBorder {
	RTopLeftAttr: string | null;
	RTopRightAttr: string | null;
}

export type ST_ChapterSep = string;

export type ST_LineNumberRestart = string;

export class CT_LineNumber {
	CountByAttr: number | null;
	StartAttr: number | null;
	DistanceAttr: ST_TwipsMeasure | null;
	RestartAttr: string | null;
}

export class CT_PageNumber {
	FmtAttr: string | null;
	StartAttr: number | null;
	ChapStyleAttr: number | null;
	ChapSepAttr: string | null;
}

export class CT_Column {
	WAttr: ST_TwipsMeasure | null;
	SpaceAttr: ST_TwipsMeasure | null;
}

export class CT_Columns {
	EqualWidthAttr: ST_OnOff | null;
	SpaceAttr: ST_TwipsMeasure | null;
	NumAttr: number | null;
	SepAttr: ST_OnOff | null;
	Col: Array<CT_Column>;
}

export type ST_VerticalJc = string;

export class CT_VerticalJc {
	ValAttr: string;
}

export type ST_DocGrid = string;

export class CT_DocGrid {
	TypeAttr: string | null;
	LinePitchAttr: number | null;
	CharSpaceAttr: number | null;
}

export type ST_HdrFtr = string;

export type ST_FtnEdn = string;

export class CT_HdrFtrRef {
	TypeAttr: string;
}

export class EG_HdrFtrReferences {
	HeaderReference: CT_HdrFtrRef;
	FooterReference: CT_HdrFtrRef;
}

export class CT_HdrFtr {
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

export class EG_SectPrContents {
	FootnotePr: CT_FtnProps;
	EndnotePr: CT_EdnProps;
	Type: CT_SectType;
	PgSz: CT_PageSz;
	PgMar: CT_PageMar;
	PaperSrc: CT_PaperSource;
	PgBorders: CT_PageBorders;
	LnNumType: CT_LineNumber;
	PgNumType: CT_PageNumber;
	Cols: CT_Columns;
	FormProt: CT_OnOff;
	VAlign: CT_VerticalJc;
	NoEndnote: CT_OnOff;
	TitlePg: CT_OnOff;
	TextDirection: CT_TextDirection;
	Bidi: CT_OnOff;
	RtlGutter: CT_OnOff;
	DocGrid: CT_DocGrid;
	PrinterSettings: CT_Rel;
}

export class AG_SectPrAttributes {
	RsidRPrAttr: Array<any> | null;
	RsidDelAttr: Array<any> | null;
	RsidRAttr: Array<any> | null;
	RsidSectAttr: Array<any> | null;
}

export class CT_SectPrBase {
	AG_SectPrAttributes: AG_SectPrAttributes;
	EG_SectPrContents: EG_SectPrContents;
}

export class CT_SectPr {
	AG_SectPrAttributes: AG_SectPrAttributes;
	EG_HdrFtrReferences: Array<EG_HdrFtrReferences>;
	EG_SectPrContents: EG_SectPrContents;
	SectPrChange: Array<CT_SectPrChange>;
}

export type ST_BrType = string;

export type ST_BrClear = string;

export class CT_Br {
	TypeAttr: string | null;
	ClearAttr: string | null;
}

export type ST_PTabAlignment = string;

export type ST_PTabRelativeTo = string;

export type ST_PTabLeader = string;

export class CT_PTab {
	AlignmentAttr: string;
	RelativeToAttr: string;
	LeaderAttr: string;
}

export class CT_Sym {
	FontAttr: string | null;
	CharAttr: Array<any> | null;
}

export type ST_ProofErr = string;

export class CT_ProofErr {
	TypeAttr: string;
}

export type ST_EdGrp = string;

export class CT_Perm {
	IdAttr: string;
	DisplacedByCustomXmlAttr: string | null;
}

export class CT_PermStart {
	EdGrpAttr: string | null;
	EdAttr: string | null;
	ColFirstAttr: number | null;
	ColLastAttr: number | null;
}

export class CT_Text {
	XmlSpaceAttr: Space | null;
}

export class EG_RunInnerContent {
	Br: CT_Br;
	T: CT_Text;
	ContentPart: CT_Rel;
	DelText: CT_Text;
	InstrText: CT_Text;
	DelInstrText: CT_Text;
	NoBreakHyphen: CT_Empty;
	SoftHyphen: CT_Empty;
	DayShort: CT_Empty;
	MonthShort: CT_Empty;
	YearShort: CT_Empty;
	DayLong: CT_Empty;
	MonthLong: CT_Empty;
	YearLong: CT_Empty;
	AnnotationRef: CT_Empty;
	FootnoteRef: CT_Empty;
	EndnoteRef: CT_Empty;
	Separator: CT_Empty;
	ContinuationSeparator: CT_Empty;
	Sym: CT_Sym;
	PgNum: CT_Empty;
	Cr: CT_Empty;
	Tab: CT_Empty;
	Object: CT_Object;
	FldChar: CT_FldChar;
	Ruby: CT_Ruby;
	FootnoteReference: CT_FtnEdnRef;
	EndnoteReference: CT_FtnEdnRef;
	CommentReference: CT_Markup;
	Drawing: CT_Drawing;
	Ptab: CT_PTab;
	LastRenderedPageBreak: Array<CT_Empty>;
}

export class CT_R {
	RsidRPrAttr: Array<any> | null;
	RsidDelAttr: Array<any> | null;
	RsidRAttr: Array<any> | null;
	EG_RPr: EG_RPr;
	EG_RunInnerContent: Array<EG_RunInnerContent>;
}

export type ST_Hint = string;

export type ST_Theme = string;

export class CT_Fonts {
	HintAttr: string | null;
	AsciiAttr: string | null;
	HAnsiAttr: string | null;
	EastAsiaAttr: string | null;
	CsAttr: string | null;
	AsciiThemeAttr: string | null;
	HAnsiThemeAttr: string | null;
	EastAsiaThemeAttr: string | null;
	CsthemeAttr: string | null;
}

export class EG_RPrBase {
	RStyle: CT_String;
	RFonts: CT_Fonts;
	B: CT_OnOff;
	BCs: CT_OnOff;
	I: CT_OnOff;
	ICs: CT_OnOff;
	Caps: CT_OnOff;
	SmallCaps: CT_OnOff;
	Strike: CT_OnOff;
	Dstrike: CT_OnOff;
	Outline: CT_OnOff;
	Shadow: CT_OnOff;
	Emboss: CT_OnOff;
	Imprint: CT_OnOff;
	NoProof: CT_OnOff;
	SnapToGrid: CT_OnOff;
	Vanish: CT_OnOff;
	WebHidden: CT_OnOff;
	Color: CT_Color;
	Spacing: CT_SignedTwipsMeasure;
	W: CT_TextScale;
	Kern: CT_HpsMeasure;
	Position: CT_SignedHpsMeasure;
	Sz: CT_HpsMeasure;
	SzCs: CT_HpsMeasure;
	Highlight: CT_Highlight;
	U: CT_Underline;
	Effect: CT_TextEffect;
	Bdr: CT_Border;
	Shd: CT_Shd;
	FitText: CT_FitText;
	VertAlign: CT_VerticalAlignRun;
	Rtl: CT_OnOff;
	Cs: CT_OnOff;
	Em: CT_Em;
	Lang: CT_Language;
	EastAsianLayout: CT_EastAsianLayout;
	SpecVanish: CT_OnOff;
	OMath: CT_OnOff;
}

export class EG_RPrContent {
	RPrChange: CT_RPrChange;
	EG_RPrBase: Array<EG_RPrBase>;
}

export class CT_RPr {
	EG_RPrContent: EG_RPrContent;
}

export class EG_RPr {
	RPr: CT_RPr;
}

export class EG_RPrMath {
	Ins: CT_MathCtrlIns;
	Del: CT_MathCtrlDel;
	EG_RPr: EG_RPr;
}

export class CT_MathCtrlIns {
	Del: Array<CT_RPrChange>;
	RPr: Array<CT_RPr>;
}

export class CT_MathCtrlDel {
	RPr: Array<CT_RPr>;
}

export class CT_RPrOriginal {
	EG_RPrBase: Array<EG_RPrBase>;
}

export class CT_ParaRPrOriginal {
	EG_ParaRPrTrackChanges: EG_ParaRPrTrackChanges;
	EG_RPrBase: Array<EG_RPrBase>;
}

export class CT_ParaRPr {
	EG_ParaRPrTrackChanges: EG_ParaRPrTrackChanges;
	EG_RPrBase: Array<EG_RPrBase>;
	RPrChange: Array<CT_ParaRPrChange>;
}

export class EG_ParaRPrTrackChanges {
	Ins: CT_TrackChange;
	Del: CT_TrackChange;
	MoveFrom: CT_TrackChange;
	MoveTo: CT_TrackChange;
}

export class CT_AltChunk {
	RIdAttr: string | null;
	AltChunkPr: Array<CT_AltChunkPr>;
}

export class CT_AltChunkPr {
	MatchSrc: Array<CT_OnOff>;
}

export type ST_RubyAlign = string;

export class CT_RubyAlign {
	ValAttr: string;
}

export class CT_RubyPr {
	RubyAlign: Array<CT_RubyAlign>;
	Hps: Array<CT_HpsMeasure>;
	HpsRaise: Array<CT_HpsMeasure>;
	HpsBaseText: Array<CT_HpsMeasure>;
	Lid: Array<CT_Lang>;
	Dirty: Array<CT_OnOff>;
}

export class EG_RubyContent {
	R: CT_R;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

export class CT_RubyContent {
	EG_RubyContent: Array<EG_RubyContent>;
}

export class CT_Ruby {
	RubyPr: Array<CT_RubyPr>;
	Rt: Array<CT_RubyContent>;
	RubyBase: Array<CT_RubyContent>;
}

export type ST_Lock = string;

export class CT_Lock {
	ValAttr: string | null;
}

export class CT_SdtListItem {
	DisplayTextAttr: string | null;
	ValueAttr: string | null;
}

export type ST_SdtDateMappingType = string;

export class CT_SdtDateMappingType {
	ValAttr: string | null;
}

export class CT_CalendarType {
	ValAttr: string | null;
}

export class CT_SdtDate {
	FullDateAttr: string | null;
	DateFormat: Array<CT_String>;
	Lid: Array<CT_Lang>;
	StoreMappedDataAs: Array<CT_SdtDateMappingType>;
	Calendar: Array<CT_CalendarType>;
}

export class CT_SdtComboBox {
	LastValueAttr: string | null;
	ListItem: Array<CT_SdtListItem>;
}

export class CT_SdtDocPart {
	DocPartGallery: Array<CT_String>;
	DocPartCategory: Array<CT_String>;
	DocPartUnique: Array<CT_OnOff>;
}

export class CT_SdtDropDownList {
	LastValueAttr: string | null;
	ListItem: Array<CT_SdtListItem>;
}

export class CT_Placeholder {
	DocPart: Array<CT_String>;
}

export class CT_SdtText {
	MultiLineAttr: ST_OnOff | null;
}

export class CT_DataBinding {
	PrefixMappingsAttr: string | null;
	XpathAttr: string;
	StoreItemIDAttr: string;
}

export class CT_SdtPr {
	RPr: Array<CT_RPr>;
	Alias: Array<CT_String>;
	Tag: Array<CT_String>;
	Id: Array<CT_DecimalNumber>;
	Lock: Array<CT_Lock>;
	Placeholder: Array<CT_Placeholder>;
	Temporary: Array<CT_OnOff>;
	ShowingPlcHdr: Array<CT_OnOff>;
	DataBinding: Array<CT_DataBinding>;
	Label: Array<CT_DecimalNumber>;
	TabIndex: Array<CT_UnsignedDecimalNumber>;
	Equation: Array<CT_Empty>;
	ComboBox: Array<CT_SdtComboBox>;
	Date: Array<CT_SdtDate>;
	DocPartObj: Array<CT_SdtDocPart>;
	DocPartList: Array<CT_SdtDocPart>;
	DropDownList: Array<CT_SdtDropDownList>;
	Picture: Array<CT_Empty>;
	RichText: Array<CT_Empty>;
	Text: Array<CT_SdtText>;
	Citation: Array<CT_Empty>;
	Group: Array<CT_Empty>;
	Bibliography: Array<CT_Empty>;
}

export class CT_SdtEndPr {
	RPr: Array<CT_RPr>;
}

export class EG_ContentRunContent {
	CustomXml: CT_CustomXmlRun;
	SmartTag: CT_SmartTagRun;
	Sdt: CT_SdtRun;
	Dir: CT_DirContentRun;
	Bdo: CT_BdoContentRun;
	R: CT_R;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

export class CT_DirContentRun {
	ValAttr: string | null;
	EG_PContent: Array<EG_PContent>;
}

export class CT_BdoContentRun {
	ValAttr: string | null;
	EG_PContent: Array<EG_PContent>;
}

export type ST_Direction = string;

export class CT_SdtContentRun {
	EG_PContent: Array<EG_PContent>;
}

export class EG_ContentBlockContent {
	CustomXml: CT_CustomXmlBlock;
	Sdt: CT_SdtBlock;
	P: Array<CT_P>;
	Tbl: Array<CT_Tbl>;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

export class CT_SdtContentBlock {
	EG_ContentBlockContent: Array<EG_ContentBlockContent>;
}

export class EG_ContentRowContent {
	Tr: Array<CT_Row>;
	CustomXml: CT_CustomXmlRow;
	Sdt: CT_SdtRow;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

export class CT_SdtContentRow {
	EG_ContentRowContent: Array<EG_ContentRowContent>;
}

export class EG_ContentCellContent {
	Tc: Array<CT_Tc>;
	CustomXml: CT_CustomXmlCell;
	Sdt: CT_SdtCell;
	EG_RunLevelElts: Array<EG_RunLevelElts>;
}

export class CT_SdtContentCell {
	EG_ContentCellContent: Array<EG_ContentCellContent>;
}

export class CT_SdtBlock {
	SdtPr: Array<CT_SdtPr>;
	SdtEndPr: Array<CT_SdtEndPr>;
	SdtContent: Array<CT_SdtContentBlock>;
}

export class CT_SdtRun {
	SdtPr: Array<CT_SdtPr>;
	SdtEndPr: Array<CT_SdtEndPr>;
	SdtContent: Array<CT_SdtContentRun>;
}

export class CT_SdtCell {
	SdtPr: Array<CT_SdtPr>;
	SdtEndPr: Array<CT_SdtEndPr>;
	SdtContent: Array<CT_SdtContentCell>;
}

export class CT_SdtRow {
	SdtPr: Array<CT_SdtPr>;
	SdtEndPr: Array<CT_SdtEndPr>;
	SdtContent: Array<CT_SdtContentRow>;
}

export class CT_Attr {
	UriAttr: string | null;
	NameAttr: string;
	ValAttr: string;
}

export class CT_CustomXmlRun {
	UriAttr: string | null;
	ElementAttr: string;
	EG_PContent: Array<EG_PContent>;
	CustomXmlPr: Array<CT_CustomXmlPr>;
}

export class CT_SmartTagRun {
	UriAttr: string | null;
	ElementAttr: string;
	EG_PContent: Array<EG_PContent>;
	SmartTagPr: Array<CT_SmartTagPr>;
}

export class CT_CustomXmlBlock {
	UriAttr: string | null;
	ElementAttr: string;
	EG_ContentBlockContent: Array<EG_ContentBlockContent>;
	CustomXmlPr: Array<CT_CustomXmlPr>;
}

export class CT_CustomXmlPr {
	Placeholder: Array<CT_String>;
	Attr: Array<CT_Attr>;
}

export class CT_CustomXmlRow {
	UriAttr: string | null;
	ElementAttr: string;
	EG_ContentRowContent: Array<EG_ContentRowContent>;
	CustomXmlPr: Array<CT_CustomXmlPr>;
}

export class CT_CustomXmlCell {
	UriAttr: string | null;
	ElementAttr: string;
	EG_ContentCellContent: Array<EG_ContentCellContent>;
	CustomXmlPr: Array<CT_CustomXmlPr>;
}

export class CT_SmartTagPr {
	Attr: Array<CT_Attr>;
}

export class EG_PContent {
	FldSimple: Array<CT_SimpleField>;
	Hyperlink: CT_Hyperlink;
	SubDoc: CT_Rel;
	EG_ContentRunContent: Array<EG_ContentRunContent>;
}

export class CT_P {
	RsidRPrAttr: Array<any> | null;
	RsidRAttr: Array<any> | null;
	RsidDelAttr: Array<any> | null;
	RsidPAttr: Array<any> | null;
	RsidRDefaultAttr: Array<any> | null;
	EG_PContent: Array<EG_PContent>;
	PPr: Array<CT_PPr>;
}

export type ST_TblWidth = string;

export class CT_Height {
	ValAttr: ST_TwipsMeasure | null;
	HRuleAttr: string | null;
}

export class ST_MeasurementOrPercent {
	ST_DecimalNumberOrPercent: ST_DecimalNumberOrPercent;
	ST_UniversalMeasure: string;
}

export class CT_TblWidth {
	WAttr: ST_MeasurementOrPercent | null;
	TypeAttr: string | null;
}

export class CT_TblGridCol {
	WAttr: ST_TwipsMeasure | null;
}

export class CT_TblGridBase {
	GridCol: Array<CT_TblGridCol>;
}

export class CT_TblGrid {
	TblGridChange: Array<CT_TblGridChange>;
}

export class CT_TcBorders {
	Top: Array<CT_Border>;
	Start: Array<CT_Border>;
	Bottom: Array<CT_Border>;
	End: Array<CT_Border>;
	InsideH: Array<CT_Border>;
	InsideV: Array<CT_Border>;
	Tl2br: Array<CT_Border>;
	Tr2bl: Array<CT_Border>;
}

export class CT_TcMar {
	Top: Array<CT_TblWidth>;
	Start: Array<CT_TblWidth>;
	Bottom: Array<CT_TblWidth>;
	End: Array<CT_TblWidth>;
}

export type ST_Merge = string;

export class CT_VMerge {
	ValAttr: string | null;
}

export class CT_TcPrBase {
	CnfStyle: Array<CT_Cnf>;
	TcW: Array<CT_TblWidth>;
	GridSpan: Array<CT_DecimalNumber>;
	VMerge: Array<CT_VMerge>;
	TcBorders: Array<CT_TcBorders>;
	Shd: Array<CT_Shd>;
	NoWrap: Array<CT_OnOff>;
	TcMar: Array<CT_TcMar>;
	TextDirection: Array<CT_TextDirection>;
	TcFitText: Array<CT_OnOff>;
	VAlign: Array<CT_VerticalJc>;
	HideMark: Array<CT_OnOff>;
	Headers: Array<CT_Headers>;
}

export class CT_TcPr {
	TcPrChange: Array<CT_TcPrChange>;
}

export class CT_TcPrInner {
	EG_CellMarkupElements: Array<EG_CellMarkupElements>;
}

export class CT_Tc {
	IdAttr: string | null;
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
	TcPr: Array<CT_TcPr>;
}

export class CT_Cnf {
	FirstRowAttr: ST_OnOff | null;
	LastRowAttr: ST_OnOff | null;
	FirstColumnAttr: ST_OnOff | null;
	LastColumnAttr: ST_OnOff | null;
	OddVBandAttr: ST_OnOff | null;
	EvenVBandAttr: ST_OnOff | null;
	OddHBandAttr: ST_OnOff | null;
	EvenHBandAttr: ST_OnOff | null;
	FirstRowFirstColumnAttr: ST_OnOff | null;
	FirstRowLastColumnAttr: ST_OnOff | null;
	LastRowFirstColumnAttr: ST_OnOff | null;
	LastRowLastColumnAttr: ST_OnOff | null;
}

export class CT_Headers {
	Header: Array<CT_String>;
}

export class CT_TrPrBase {
	CnfStyle: Array<CT_Cnf>;
	DivId: Array<CT_DecimalNumber>;
	GridBefore: Array<CT_DecimalNumber>;
	GridAfter: Array<CT_DecimalNumber>;
	WBefore: Array<CT_TblWidth>;
	WAfter: Array<CT_TblWidth>;
	CantSplit: Array<CT_OnOff>;
	TrHeight: Array<CT_Height>;
	TblHeader: Array<CT_OnOff>;
	TblCellSpacing: Array<CT_TblWidth>;
	Jc: Array<CT_JcTable>;
	Hidden: Array<CT_OnOff>;
}

export class CT_TrPr {
	Ins: Array<CT_TrackChange>;
	Del: Array<CT_TrackChange>;
	TrPrChange: Array<CT_TrPrChange>;
}

export class CT_Row {
	RsidRPrAttr: Array<any> | null;
	RsidRAttr: Array<any> | null;
	RsidDelAttr: Array<any> | null;
	RsidTrAttr: Array<any> | null;
	EG_ContentCellContent: Array<EG_ContentCellContent>;
	TblPrEx: Array<CT_TblPrEx>;
	TrPr: Array<CT_TrPr>;
}

export type ST_TblLayoutType = string;

export class CT_TblLayoutType {
	TypeAttr: string | null;
}

export type ST_TblOverlap = string;

export class CT_TblOverlap {
	ValAttr: string;
}

export class CT_TblPPr {
	LeftFromTextAttr: ST_TwipsMeasure | null;
	RightFromTextAttr: ST_TwipsMeasure | null;
	TopFromTextAttr: ST_TwipsMeasure | null;
	BottomFromTextAttr: ST_TwipsMeasure | null;
	VertAnchorAttr: string | null;
	HorzAnchorAttr: string | null;
	TblpXSpecAttr: string | null;
	TblpXAttr: ST_SignedTwipsMeasure | null;
	TblpYSpecAttr: string | null;
	TblpYAttr: ST_SignedTwipsMeasure | null;
}

export class CT_TblCellMar {
	Top: Array<CT_TblWidth>;
	Start: Array<CT_TblWidth>;
	Bottom: Array<CT_TblWidth>;
	End: Array<CT_TblWidth>;
}

export class CT_TblBorders {
	Top: Array<CT_Border>;
	Start: Array<CT_Border>;
	Bottom: Array<CT_Border>;
	End: Array<CT_Border>;
	InsideH: Array<CT_Border>;
	InsideV: Array<CT_Border>;
}

export class CT_TblPrBase {
	TblStyle: Array<CT_String>;
	TblpPr: Array<CT_TblPPr>;
	TblOverlap: Array<CT_TblOverlap>;
	BidiVisual: Array<CT_OnOff>;
	TblStyleRowBandSize: Array<CT_DecimalNumber>;
	TblStyleColBandSize: Array<CT_DecimalNumber>;
	TblW: Array<CT_TblWidth>;
	Jc: Array<CT_JcTable>;
	TblCellSpacing: Array<CT_TblWidth>;
	TblInd: Array<CT_TblWidth>;
	TblBorders: Array<CT_TblBorders>;
	Shd: Array<CT_Shd>;
	TblLayout: Array<CT_TblLayoutType>;
	TblCellMar: Array<CT_TblCellMar>;
	TblLook: Array<CT_TblLook>;
	TblCaption: Array<CT_String>;
	TblDescription: Array<CT_String>;
}

export class CT_TblPr {
	TblPrChange: Array<CT_TblPrChange>;
}

export class CT_TblPrExBase {
	TblW: Array<CT_TblWidth>;
	Jc: Array<CT_JcTable>;
	TblCellSpacing: Array<CT_TblWidth>;
	TblInd: Array<CT_TblWidth>;
	TblBorders: Array<CT_TblBorders>;
	Shd: Array<CT_Shd>;
	TblLayout: Array<CT_TblLayoutType>;
	TblCellMar: Array<CT_TblCellMar>;
	TblLook: Array<CT_TblLook>;
}

export class CT_TblPrEx {
	TblPrExChange: Array<CT_TblPrExChange>;
}

export class CT_Tbl {
	EG_RangeMarkupElements: Array<EG_RangeMarkupElements>;
	EG_ContentRowContent: Array<EG_ContentRowContent>;
	TblPr: Array<CT_TblPr>;
	TblGrid: Array<CT_TblGrid>;
}

export class CT_TblLook {
	FirstRowAttr: ST_OnOff | null;
	LastRowAttr: ST_OnOff | null;
	FirstColumnAttr: ST_OnOff | null;
	LastColumnAttr: ST_OnOff | null;
	NoHBandAttr: ST_OnOff | null;
	NoVBandAttr: ST_OnOff | null;
}

export type ST_FtnPos = string;

export class CT_FtnPos {
	ValAttr: string;
}

export type ST_EdnPos = string;

export class CT_EdnPos {
	ValAttr: string;
}

export class CT_NumFmt {
	ValAttr: string;
	FormatAttr: string | null;
}

export type ST_RestartNumber = string;

export class CT_NumRestart {
	ValAttr: string;
}

export class CT_FtnEdnRef {
	CustomMarkFollowsAttr: ST_OnOff | null;
	IdAttr: number;
}

export class CT_FtnEdnSepRef {
	IdAttr: number;
}

export class CT_FtnEdn {
	TypeAttr: string | null;
	IdAttr: number;
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
}

export class EG_FtnEdnNumProps {
	NumStart: CT_DecimalNumber;
	NumRestart: CT_NumRestart;
}

export class CT_FtnProps {
	EG_FtnEdnNumProps: EG_FtnEdnNumProps;
	Pos: Array<CT_FtnPos>;
	NumFmt: Array<CT_NumFmt>;
}

export class CT_EdnProps {
	EG_FtnEdnNumProps: EG_FtnEdnNumProps;
	Pos: Array<CT_EdnPos>;
	NumFmt: Array<CT_NumFmt>;
}

export class CT_FtnDocProps {
	Footnote: Array<CT_FtnEdnSepRef>;
}

export class CT_EdnDocProps {
	Endnote: Array<CT_FtnEdnSepRef>;
}

export class CT_RecipientData {
	Active: Array<CT_OnOff>;
	Column: Array<CT_DecimalNumber>;
	UniqueTag: Array<CT_Base64Binary>;
}

export class CT_Base64Binary {
	ValAttr: Array<any>;
}

export class CT_Recipients {
	RecipientData: Array<CT_RecipientData>;
}

export type Recipients = CT_Recipients;

export class CT_OdsoFieldMapData {
	Type: Array<CT_MailMergeOdsoFMDFieldType>;
	Name: Array<CT_String>;
	MappedName: Array<CT_String>;
	Column: Array<CT_DecimalNumber>;
	Lid: Array<CT_Lang>;
	DynamicAddress: Array<CT_OnOff>;
}

export type ST_MailMergeSourceType = string;

export class CT_MailMergeSourceType {
	ValAttr: string;
}

export class CT_Odso {
	Udl: Array<CT_String>;
	Table: Array<CT_String>;
	Src: Array<CT_Rel>;
	ColDelim: Array<CT_DecimalNumber>;
	Type: Array<CT_MailMergeSourceType>;
	FHdr: Array<CT_OnOff>;
	FieldMapData: Array<CT_OdsoFieldMapData>;
	RecipientData: Array<CT_Rel>;
}

export class CT_MailMerge {
	MainDocumentType: Array<CT_MailMergeDocType>;
	LinkToQuery: Array<CT_OnOff>;
	DataType: Array<CT_MailMergeDataType>;
	ConnectString: Array<CT_String>;
	Query: Array<CT_String>;
	DataSource: Array<CT_Rel>;
	HeaderSource: Array<CT_Rel>;
	DoNotSuppressBlankLines: Array<CT_OnOff>;
	Destination: Array<CT_MailMergeDest>;
	AddressFieldName: Array<CT_String>;
	MailSubject: Array<CT_String>;
	MailAsAttachment: Array<CT_OnOff>;
	ViewMergedData: Array<CT_OnOff>;
	ActiveRecord: Array<CT_DecimalNumber>;
	CheckErrors: Array<CT_DecimalNumber>;
	Odso: Array<CT_Odso>;
}

export type ST_TargetScreenSz = string;

export class CT_TargetScreenSz {
	ValAttr: string;
}

export class CT_Compat {
	SpaceForUL: Array<CT_OnOff>;
	BalanceSingleByteDoubleByteWidth: Array<CT_OnOff>;
	DoNotLeaveBackslashAlone: Array<CT_OnOff>;
	UlTrailSpace: Array<CT_OnOff>;
	DoNotExpandShiftReturn: Array<CT_OnOff>;
	AdjustLineHeightInTable: Array<CT_OnOff>;
	ApplyBreakingRules: Array<CT_OnOff>;
	CompatSetting: Array<CT_CompatSetting>;
}

export class CT_CompatSetting {
	NameAttr: string | null;
	UriAttr: string | null;
	ValAttr: string | null;
}

export class CT_DocVar {
	NameAttr: string;
	ValAttr: string;
}

export class CT_DocVars {
	DocVar: Array<CT_DocVar>;
}

export class CT_DocRsids {
	RsidRoot: Array<CT_LongHexNumber>;
	Rsid: Array<CT_LongHexNumber>;
}

export type ST_CharacterSpacing = string;

export class CT_CharacterSpacing {
	ValAttr: string;
}

export class CT_SaveThroughXslt {
	RIdAttr: string | null;
	SolutionIDAttr: string | null;
}

export class CT_RPrDefault {
	RPr: Array<CT_RPr>;
}

export class CT_PPrDefault {
	PPr: Array<CT_PPrGeneral>;
}

export class CT_DocDefaults {
	RPrDefault: Array<CT_RPrDefault>;
	PPrDefault: Array<CT_PPrDefault>;
}

export type ST_WmlColorSchemeIndex = string;

export class CT_ColorSchemeMapping {
	Bg1Attr: string | null;
	T1Attr: string | null;
	Bg2Attr: string | null;
	T2Attr: string | null;
	Accent1Attr: string | null;
	Accent2Attr: string | null;
	Accent3Attr: string | null;
	Accent4Attr: string | null;
	Accent5Attr: string | null;
	Accent6Attr: string | null;
	HyperlinkAttr: string | null;
	FollowedHyperlinkAttr: string | null;
}

export class CT_ReadingModeInkLockDown {
	ActualPgAttr: ST_OnOff;
	WAttr: number;
	HAttr: number;
	FontSzAttr: ST_DecimalNumberOrPercent;
}

export class CT_WriteProtection {
	AG_Password: AG_Password;
	RecommendedAttr: ST_OnOff | null;
}

export class CT_Settings {
	WriteProtection: Array<CT_WriteProtection>;
	View: Array<CT_View>;
	Zoom: Array<CT_Zoom>;
	RemovePersonalInformation: Array<CT_OnOff>;
	RemoveDateAndTime: Array<CT_OnOff>;
	DoNotDisplayPageBoundaries: Array<CT_OnOff>;
	DisplayBackgroundShape: Array<CT_OnOff>;
	PrintPostScriptOverText: Array<CT_OnOff>;
	PrintFractionalCharacterWidth: Array<CT_OnOff>;
	PrintFormsData: Array<CT_OnOff>;
	EmbedTrueTypeFonts: Array<CT_OnOff>;
	EmbedSystemFonts: Array<CT_OnOff>;
	SaveSubsetFonts: Array<CT_OnOff>;
	SaveFormsData: Array<CT_OnOff>;
	MirrorMargins: Array<CT_OnOff>;
	AlignBordersAndEdges: Array<CT_OnOff>;
	BordersDoNotSurroundHeader: Array<CT_OnOff>;
	BordersDoNotSurroundFooter: Array<CT_OnOff>;
	GutterAtTop: Array<CT_OnOff>;
	HideSpellingErrors: Array<CT_OnOff>;
	HideGrammaticalErrors: Array<CT_OnOff>;
	ActiveWritingStyle: Array<CT_WritingStyle>;
	ProofState: Array<CT_Proof>;
	FormsDesign: Array<CT_OnOff>;
	AttachedTemplate: Array<CT_Rel>;
	LinkStyles: Array<CT_OnOff>;
	StylePaneFormatFilter: Array<CT_StylePaneFilter>;
	StylePaneSortMethod: Array<CT_StyleSort>;
	DocumentType: Array<CT_DocType>;
	MailMerge: Array<CT_MailMerge>;
	RevisionView: Array<CT_TrackChangesView>;
	TrackRevisions: Array<CT_OnOff>;
	DoNotTrackMoves: Array<CT_OnOff>;
	DoNotTrackFormatting: Array<CT_OnOff>;
	DocumentProtection: Array<CT_DocProtect>;
	AutoFormatOverride: Array<CT_OnOff>;
	StyleLockTheme: Array<CT_OnOff>;
	StyleLockQFSet: Array<CT_OnOff>;
	DefaultTabStop: Array<CT_TwipsMeasure>;
	AutoHyphenation: Array<CT_OnOff>;
	ConsecutiveHyphenLimit: Array<CT_DecimalNumber>;
	HyphenationZone: Array<CT_TwipsMeasure>;
	DoNotHyphenateCaps: Array<CT_OnOff>;
	ShowEnvelope: Array<CT_OnOff>;
	SummaryLength: Array<CT_DecimalNumberOrPrecent>;
	ClickAndTypeStyle: Array<CT_String>;
	DefaultTableStyle: Array<CT_String>;
	EvenAndOddHeaders: Array<CT_OnOff>;
	BookFoldRevPrinting: Array<CT_OnOff>;
	BookFoldPrinting: Array<CT_OnOff>;
	BookFoldPrintingSheets: Array<CT_DecimalNumber>;
	DrawingGridHorizontalSpacing: Array<CT_TwipsMeasure>;
	DrawingGridVerticalSpacing: Array<CT_TwipsMeasure>;
	DisplayHorizontalDrawingGridEvery: Array<CT_DecimalNumber>;
	DisplayVerticalDrawingGridEvery: Array<CT_DecimalNumber>;
	DoNotUseMarginsForDrawingGridOrigin: Array<CT_OnOff>;
	DrawingGridHorizontalOrigin: Array<CT_TwipsMeasure>;
	DrawingGridVerticalOrigin: Array<CT_TwipsMeasure>;
	DoNotShadeFormData: Array<CT_OnOff>;
	NoPunctuationKerning: Array<CT_OnOff>;
	CharacterSpacingControl: Array<CT_CharacterSpacing>;
	PrintTwoOnOne: Array<CT_OnOff>;
	StrictFirstAndLastChars: Array<CT_OnOff>;
	NoLineBreaksAfter: Array<CT_Kinsoku>;
	NoLineBreaksBefore: Array<CT_Kinsoku>;
	SavePreviewPicture: Array<CT_OnOff>;
	DoNotValidateAgainstSchema: Array<CT_OnOff>;
	SaveInvalidXml: Array<CT_OnOff>;
	IgnoreMixedContent: Array<CT_OnOff>;
	AlwaysShowPlaceholderText: Array<CT_OnOff>;
	DoNotDemarcateInvalidXml: Array<CT_OnOff>;
	SaveXmlDataOnly: Array<CT_OnOff>;
	UseXSLTWhenSaving: Array<CT_OnOff>;
	SaveThroughXslt: Array<CT_SaveThroughXslt>;
	ShowXMLTags: Array<CT_OnOff>;
	AlwaysMergeEmptyNamespace: Array<CT_OnOff>;
	UpdateFields: Array<CT_OnOff>;
	FootnotePr: Array<CT_FtnDocProps>;
	EndnotePr: Array<CT_EdnDocProps>;
	Compat: Array<CT_Compat>;
	DocVars: Array<CT_DocVars>;
	Rsids: Array<CT_DocRsids>;
	MMathPr: Array<CT_MathPr>;
	AttachedSchema: Array<CT_String>;
	ThemeFontLang: Array<CT_Language>;
	ClrSchemeMapping: Array<CT_ColorSchemeMapping>;
	DoNotIncludeSubdocsInStats: Array<CT_OnOff>;
	DoNotAutoCompressPictures: Array<CT_OnOff>;
	ForceUpgrade: Array<CT_Empty>;
	Captions: Array<CT_Captions>;
	ReadModeInkLockDown: Array<CT_ReadingModeInkLockDown>;
	SmartTagType: Array<CT_SmartTagType>;
	SlSchemaLibrary: Array<CT_SchemaLibrary>;
	DoNotEmbedSmartTags: Array<CT_OnOff>;
	DecimalSymbol: Array<CT_String>;
	ListSeparator: Array<CT_String>;
}

export class CT_StyleSort {
	ValAttr: string;
}

export class CT_StylePaneFilter {
	AllStylesAttr: ST_OnOff | null;
	CustomStylesAttr: ST_OnOff | null;
	LatentStylesAttr: ST_OnOff | null;
	StylesInUseAttr: ST_OnOff | null;
	HeadingStylesAttr: ST_OnOff | null;
	NumberingStylesAttr: ST_OnOff | null;
	TableStylesAttr: ST_OnOff | null;
	DirectFormattingOnRunsAttr: ST_OnOff | null;
	DirectFormattingOnParagraphsAttr: ST_OnOff | null;
	DirectFormattingOnNumberingAttr: ST_OnOff | null;
	DirectFormattingOnTablesAttr: ST_OnOff | null;
	ClearFormattingAttr: ST_OnOff | null;
	Top3HeadingStylesAttr: ST_OnOff | null;
	VisibleStylesAttr: ST_OnOff | null;
	AlternateStyleNamesAttr: ST_OnOff | null;
}

export type ST_StyleSort = string;

export class CT_WebSettings {
	Frameset: Array<CT_Frameset>;
	Divs: Array<CT_Divs>;
	Encoding: Array<CT_String>;
	OptimizeForBrowser: Array<CT_OptimizeForBrowser>;
	AllowPNG: Array<CT_OnOff>;
	DoNotRelyOnCSS: Array<CT_OnOff>;
	DoNotSaveAsSingleFile: Array<CT_OnOff>;
	DoNotOrganizeInFolder: Array<CT_OnOff>;
	DoNotUseLongFileNames: Array<CT_OnOff>;
	PixelsPerInch: Array<CT_DecimalNumber>;
	TargetScreenSz: Array<CT_TargetScreenSz>;
	SaveSmartTagsAsXml: Array<CT_OnOff>;
}

export type ST_FrameScrollbar = string;

export class CT_FrameScrollbar {
	ValAttr: string;
}

export class CT_OptimizeForBrowser {
	TargetAttr: string | null;
}

export class CT_Frame {
	Sz: Array<CT_String>;
	Name: Array<CT_String>;
	Title: Array<CT_String>;
	LongDesc: Array<CT_Rel>;
	SourceFileName: Array<CT_Rel>;
	MarW: Array<CT_PixelsMeasure>;
	MarH: Array<CT_PixelsMeasure>;
	Scrollbar: Array<CT_FrameScrollbar>;
	NoResizeAllowed: Array<CT_OnOff>;
	LinkedToFile: Array<CT_OnOff>;
}

export type ST_FrameLayout = string;

export class CT_FrameLayout {
	ValAttr: string;
}

export class CT_FramesetSplitbar {
	W: Array<CT_TwipsMeasure>;
	Color: Array<CT_Color>;
	NoBorder: Array<CT_OnOff>;
	FlatBorders: Array<CT_OnOff>;
}

export class CT_Frameset {
	Sz: Array<CT_String>;
	FramesetSplitbar: Array<CT_FramesetSplitbar>;
	FrameLayout: Array<CT_FrameLayout>;
	Title: Array<CT_String>;
	Frameset: Array<CT_Frameset>;
	Frame: Array<CT_Frame>;
}

export class CT_NumPicBullet {
	NumPicBulletIdAttr: number;
	Drawing: Array<CT_Drawing>;
}

export type ST_LevelSuffix = string;

export class CT_LevelSuffix {
	ValAttr: string;
}

export class CT_LevelText {
	ValAttr: string | null;
	NullAttr: ST_OnOff | null;
}

export class CT_Lvl {
	IlvlAttr: number;
	TplcAttr: Array<any> | null;
	TentativeAttr: ST_OnOff | null;
	Start: Array<CT_DecimalNumber>;
	NumFmt: Array<CT_NumFmt>;
	LvlRestart: Array<CT_DecimalNumber>;
	PStyle: Array<CT_String>;
	IsLgl: Array<CT_OnOff>;
	Suff: Array<CT_LevelSuffix>;
	LvlText: Array<CT_LevelText>;
	LvlPicBulletId: Array<CT_DecimalNumber>;
	LvlJc: Array<CT_Jc>;
	PPr: Array<CT_PPrGeneral>;
	RPr: Array<CT_RPr>;
}

export type ST_MultiLevelType = string;

export class CT_MultiLevelType {
	ValAttr: string;
}

export class CT_AbstractNum {
	AbstractNumIdAttr: number;
	Nsid: Array<CT_LongHexNumber>;
	MultiLevelType: Array<CT_MultiLevelType>;
	Tmpl: Array<CT_LongHexNumber>;
	Name: Array<CT_String>;
	StyleLink: Array<CT_String>;
	NumStyleLink: Array<CT_String>;
	Lvl: Array<CT_Lvl>;
}

export class CT_NumLvl {
	IlvlAttr: number;
	StartOverride: Array<CT_DecimalNumber>;
	Lvl: Array<CT_Lvl>;
}

export class CT_Num {
	NumIdAttr: number;
	AbstractNumId: Array<CT_DecimalNumber>;
	LvlOverride: Array<CT_NumLvl>;
}

export class CT_Numbering {
	NumPicBullet: Array<CT_NumPicBullet>;
	AbstractNum: Array<CT_AbstractNum>;
	Num: Array<CT_Num>;
	NumIdMacAtCleanup: Array<CT_DecimalNumber>;
}

export type ST_TblStyleOverrideType = string;

export class CT_TblStylePr {
	TypeAttr: string;
	PPr: Array<CT_PPrGeneral>;
	RPr: Array<CT_RPr>;
	TblPr: Array<CT_TblPrBase>;
	TrPr: Array<CT_TrPr>;
	TcPr: Array<CT_TcPr>;
}

export type ST_StyleType = string;

export class CT_Style {
	TypeAttr: string | null;
	StyleIdAttr: string | null;
	DefaultAttr: ST_OnOff | null;
	CustomStyleAttr: ST_OnOff | null;
	Name: Array<CT_String>;
	Aliases: Array<CT_String>;
	BasedOn: Array<CT_String>;
	Next: Array<CT_String>;
	Link: Array<CT_String>;
	AutoRedefine: Array<CT_OnOff>;
	Hidden: Array<CT_OnOff>;
	UiPriority: Array<CT_DecimalNumber>;
	SemiHidden: Array<CT_OnOff>;
	UnhideWhenUsed: Array<CT_OnOff>;
	QFormat: Array<CT_OnOff>;
	Locked: Array<CT_OnOff>;
	Personal: Array<CT_OnOff>;
	PersonalCompose: Array<CT_OnOff>;
	PersonalReply: Array<CT_OnOff>;
	Rsid: Array<CT_LongHexNumber>;
	PPr: Array<CT_PPrGeneral>;
	RPr: Array<CT_RPr>;
	TblPr: Array<CT_TblPrBase>;
	TrPr: Array<CT_TrPr>;
	TcPr: Array<CT_TcPr>;
	TblStylePr: Array<CT_TblStylePr>;
}

export class CT_LsdException {
	NameAttr: string;
	LockedAttr: ST_OnOff | null;
	UiPriorityAttr: number | null;
	SemiHiddenAttr: ST_OnOff | null;
	UnhideWhenUsedAttr: ST_OnOff | null;
	QFormatAttr: ST_OnOff | null;
}

export class CT_LatentStyles {
	DefLockedStateAttr: ST_OnOff | null;
	DefUIPriorityAttr: number | null;
	DefSemiHiddenAttr: ST_OnOff | null;
	DefUnhideWhenUsedAttr: ST_OnOff | null;
	DefQFormatAttr: ST_OnOff | null;
	CountAttr: number | null;
	LsdException: Array<CT_LsdException>;
}

export class CT_Styles {
	DocDefaults: Array<CT_DocDefaults>;
	LatentStyles: Array<CT_LatentStyles>;
	Style: Array<CT_Style>;
}

export class CT_Panose {
	ValAttr: Array<any>;
}

export type ST_FontFamily = string;

export class CT_FontFamily {
	ValAttr: string;
}

export type ST_Pitch = string;

export class CT_Pitch {
	ValAttr: string;
}

export class CT_FontSig {
	Usb0Attr: Array<any>;
	Usb1Attr: Array<any>;
	Usb2Attr: Array<any>;
	Usb3Attr: Array<any>;
	Csb0Attr: Array<any>;
	Csb1Attr: Array<any>;
}

export class CT_FontRel {
	FontKeyAttr: string | null;
	SubsettedAttr: ST_OnOff | null;
}

export class CT_Font {
	NameAttr: string;
	AltName: Array<CT_String>;
	Panose1: Array<CT_Panose>;
	Charset: Array<CT_Charset>;
	Family: Array<CT_FontFamily>;
	NotTrueType: Array<CT_OnOff>;
	Pitch: Array<CT_Pitch>;
	Sig: Array<CT_FontSig>;
	EmbedRegular: Array<CT_FontRel>;
	EmbedBold: Array<CT_FontRel>;
	EmbedItalic: Array<CT_FontRel>;
	EmbedBoldItalic: Array<CT_FontRel>;
}

export class CT_FontsList {
	Font: Array<CT_Font>;
}

export class CT_DivBdr {
	Top: Array<CT_Border>;
	Left: Array<CT_Border>;
	Bottom: Array<CT_Border>;
	Right: Array<CT_Border>;
}

export class CT_Div {
	IdAttr: number;
	BlockQuote: Array<CT_OnOff>;
	BodyDiv: Array<CT_OnOff>;
	MarLeft: Array<CT_SignedTwipsMeasure>;
	MarRight: Array<CT_SignedTwipsMeasure>;
	MarTop: Array<CT_SignedTwipsMeasure>;
	MarBottom: Array<CT_SignedTwipsMeasure>;
	DivBdr: Array<CT_DivBdr>;
	DivsChild: Array<CT_Divs>;
}

export class CT_Divs {
	Div: Array<CT_Div>;
}

export class EG_MathContent {
	MOMathPara: CT_OMathPara;
	MOMath: CT_OMath;
}

export class EG_BlockLevelChunkElts {
	EG_ContentBlockContent: Array<EG_ContentBlockContent>;
}

export class EG_BlockLevelElts {
	AltChunk: Array<CT_AltChunk>;
	EG_BlockLevelChunkElts: Array<EG_BlockLevelChunkElts>;
}

export class EG_RunLevelElts {
	ProofErr: CT_ProofErr;
	PermStart: CT_PermStart;
	PermEnd: CT_Perm;
	Ins: CT_RunTrackChange;
	Del: CT_RunTrackChange;
	MoveFrom: CT_RunTrackChange;
	MoveTo: CT_RunTrackChange;
	EG_RangeMarkupElements: Array<EG_RangeMarkupElements>;
	EG_MathContent: Array<EG_MathContent>;
}

export class CT_Body {
	EG_BlockLevelElts: Array<EG_BlockLevelElts>;
	SectPr: Array<CT_SectPr>;
}

export class CT_Comments {
	Comment: Array<CT_Comment>;
}

export type Comments = CT_Comments;

export class CT_Footnotes {
	Footnote: Array<CT_FtnEdn>;
}

export type Footnotes = CT_Footnotes;

export class CT_Endnotes {
	Endnote: Array<CT_FtnEdn>;
}

export type Endnotes = CT_Endnotes;

export type Hdr = CT_HdrFtr;

export type Ftr = CT_HdrFtr;

export class CT_SmartTagType {
	NamespaceuriAttr: string | null;
	NameAttr: string | null;
	UrlAttr: string | null;
}

export type ST_ThemeColor = string;

export type ST_DocPartBehavior = string;

export class CT_DocPartBehavior {
	ValAttr: string;
}

export class CT_DocPartBehaviors {
	Behavior: Array<CT_DocPartBehavior>;
}

export type ST_DocPartType = string;

export class CT_DocPartType {
	ValAttr: string;
}

export class CT_DocPartTypes {
	AllAttr: ST_OnOff | null;
	Type: Array<CT_DocPartType>;
}

export type ST_DocPartGallery = string;

export class CT_DocPartGallery {
	ValAttr: string;
}

export class CT_DocPartCategory {
	Name: Array<CT_String>;
	Gallery: Array<CT_DocPartGallery>;
}

export class CT_DocPartName {
	ValAttr: string;
	DecoratedAttr: ST_OnOff | null;
}

export class CT_DocPartPr {
	Name: Array<CT_DocPartName>;
	Style: Array<CT_String>;
	Category: Array<CT_DocPartCategory>;
	Types: Array<CT_DocPartTypes>;
	Behaviors: Array<CT_DocPartBehaviors>;
	Description: Array<CT_String>;
	Guid: Array<CT_Guid>;
}

export class CT_DocPart {
	DocPartPr: Array<CT_DocPartPr>;
	DocPartBody: Array<CT_Body>;
}

export class CT_DocParts {
	DocPart: Array<CT_DocPart>;
}

export type Settings = CT_Settings;

export type WebSettings = CT_WebSettings;

export type Fonts = CT_FontsList;

export type Numbering = CT_Numbering;

export type Styles = CT_Styles;

export type ST_CaptionPos = string;

export class CT_Caption {
	NameAttr: string;
	PosAttr: string | null;
	ChapNumAttr: ST_OnOff | null;
	HeadingAttr: number | null;
	NoLabelAttr: ST_OnOff | null;
	NumFmtAttr: string | null;
	SepAttr: string | null;
}

export class CT_AutoCaption {
	NameAttr: string;
	CaptionAttr: string;
}

export class CT_AutoCaptions {
	AutoCaption: Array<CT_AutoCaption>;
}

export class CT_Captions {
	Caption: Array<CT_Caption>;
	AutoCaptions: Array<CT_AutoCaptions>;
}

export class CT_DocumentBase {
	Background: Array<CT_Background>;
}

export class CT_Document {
	ConformanceAttr: string | null;
	Body: Array<CT_Body>;
}

export class CT_GlossaryDocument {
	DocParts: Array<CT_DocParts>;
}

export type Document = CT_Document;

export type GlossaryDocument = CT_GlossaryDocument;
