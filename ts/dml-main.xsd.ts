// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

export class CT_AudioFile {
	RLinkAttr: string;
	ContentTypeAttr: string | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_VideoFile {
	RLinkAttr: string;
	ContentTypeAttr: string | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_QuickTimeFile {
	RLinkAttr: string;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_AudioCDTime {
	TrackAttr: Any;
	TimeAttr: number | null;
}

export class CT_AudioCD {
	St: Array<CT_AudioCDTime>;
	End: Array<CT_AudioCDTime>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class EG_Media {
	AudioCd: CT_AudioCD;
	WavAudioFile: CT_EmbeddedWAVAudioFile;
	AudioFile: CT_AudioFile;
	VideoFile: CT_VideoFile;
	QuickTimeFile: CT_QuickTimeFile;
}

export type VideoFile = CT_VideoFile;

export type ST_StyleMatrixColumnIndex = number;

export type ST_FontCollectionIndex = string;

export type ST_ColorSchemeIndex = string;

export class CT_ColorScheme {
	NameAttr: string;
	Dk1: Array<CT_Color>;
	Lt1: Array<CT_Color>;
	Dk2: Array<CT_Color>;
	Lt2: Array<CT_Color>;
	Accent1: Array<CT_Color>;
	Accent2: Array<CT_Color>;
	Accent3: Array<CT_Color>;
	Accent4: Array<CT_Color>;
	Accent5: Array<CT_Color>;
	Accent6: Array<CT_Color>;
	Hlink: Array<CT_Color>;
	FolHlink: Array<CT_Color>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_CustomColor {
	NameAttr: string | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_SupplementalFont {
	ScriptAttr: string;
	TypefaceAttr: string;
}

export class CT_CustomColorList {
	CustClr: Array<CT_CustomColor>;
}

export class CT_FontCollection {
	Latin: Array<CT_TextFont>;
	Ea: Array<CT_TextFont>;
	Cs: Array<CT_TextFont>;
	Font: Array<CT_SupplementalFont>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_EffectStyleItem {
	EG_EffectProperties: Array<EG_EffectProperties>;
	Scene3d: Array<CT_Scene3D>;
	Sp3d: Array<CT_Shape3D>;
}

export class CT_FontScheme {
	NameAttr: string;
	MajorFont: Array<CT_FontCollection>;
	MinorFont: Array<CT_FontCollection>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_FillStyleList {
	EG_FillProperties: Array<EG_FillProperties>;
}

export class CT_LineStyleList {
	Ln: Array<CT_LineProperties>;
}

export class CT_EffectStyleList {
	EffectStyle: Array<CT_EffectStyleItem>;
}

export class CT_BackgroundFillStyleList {
	EG_FillProperties: Array<EG_FillProperties>;
}

export class CT_StyleMatrix {
	NameAttr: string | null;
	FillStyleLst: Array<CT_FillStyleList>;
	LnStyleLst: Array<CT_LineStyleList>;
	EffectStyleLst: Array<CT_EffectStyleList>;
	BgFillStyleLst: Array<CT_BackgroundFillStyleList>;
}

export class CT_BaseStyles {
	ClrScheme: Array<CT_ColorScheme>;
	FontScheme: Array<CT_FontScheme>;
	FmtScheme: Array<CT_StyleMatrix>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_OfficeArtExtension {
	UriAttr: string;
}

export class ST_Coordinate {
	ST_CoordinateUnqualified: ST_CoordinateUnqualified;
	ST_UniversalMeasure: string;
}

export type ST_CoordinateUnqualified = number;

export class ST_Coordinate32 {
	ST_UniversalMeasure: string;
	ST_Coordinate32Unqualified: ST_Coordinate32Unqualified;
}

export type ST_Coordinate32Unqualified = number;

export type ST_PositiveCoordinate = number;

export type ST_PositiveCoordinate32 = number;

export type ST_Angle = number;

export class CT_Angle {
	ValAttr: number;
}

export type ST_FixedAngle = number;

export type ST_PositiveFixedAngle = number;

export class CT_PositiveFixedAngle {
	ValAttr: number;
}

export class ST_Percentage {
	ST_Percentage: string;
}

export class CT_Percentage {
	ValAttr: ST_Percentage;
}

export class ST_PositivePercentage {
	ST_PositivePercentage: string;
}

export class CT_PositivePercentage {
	ValAttr: ST_PositivePercentage;
}

export class ST_FixedPercentage {
	ST_FixedPercentage: string;
}

export class CT_FixedPercentage {
	ValAttr: ST_FixedPercentage;
}

export class ST_PositiveFixedPercentage {
	ST_PositiveFixedPercentage: string;
}

export class CT_PositiveFixedPercentage {
	ValAttr: ST_PositiveFixedPercentage;
}

export class CT_Ratio {
	NAttr: number;
	DAttr: number;
}

export class CT_Point2D {
	XAttr: ST_Coordinate;
	YAttr: ST_Coordinate;
}

export class CT_PositiveSize2D {
	CxAttr: number;
	CyAttr: number;
}

export class CT_ComplementTransform {
}

export class CT_InverseTransform {
}

export class CT_GrayscaleTransform {
}

export class CT_GammaTransform {
}

export class CT_InverseGammaTransform {
}

export class EG_ColorTransform {
	Tint: Array<CT_PositiveFixedPercentage>;
	Shade: Array<CT_PositiveFixedPercentage>;
	Comp: Array<CT_ComplementTransform>;
	Inv: Array<CT_InverseTransform>;
	Gray: Array<CT_GrayscaleTransform>;
	Alpha: Array<CT_PositiveFixedPercentage>;
	AlphaOff: Array<CT_FixedPercentage>;
	AlphaMod: Array<CT_PositivePercentage>;
	Hue: Array<CT_PositiveFixedAngle>;
	HueOff: Array<CT_Angle>;
	HueMod: Array<CT_PositivePercentage>;
	Sat: Array<CT_Percentage>;
	SatOff: Array<CT_Percentage>;
	SatMod: Array<CT_Percentage>;
	Lum: Array<CT_Percentage>;
	LumOff: Array<CT_Percentage>;
	LumMod: Array<CT_Percentage>;
	Red: Array<CT_Percentage>;
	RedOff: Array<CT_Percentage>;
	RedMod: Array<CT_Percentage>;
	Green: Array<CT_Percentage>;
	GreenOff: Array<CT_Percentage>;
	GreenMod: Array<CT_Percentage>;
	Blue: Array<CT_Percentage>;
	BlueOff: Array<CT_Percentage>;
	BlueMod: Array<CT_Percentage>;
	Gamma: Array<CT_GammaTransform>;
	InvGamma: Array<CT_InverseGammaTransform>;
}

export class CT_ScRgbColor {
	RAttr: ST_Percentage;
	GAttr: ST_Percentage;
	BAttr: ST_Percentage;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

export class CT_SRgbColor {
	ValAttr: Array<any>;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

export class CT_HslColor {
	HueAttr: number;
	SatAttr: ST_Percentage;
	LumAttr: ST_Percentage;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

export type ST_SystemColorVal = string;

export class CT_SystemColor {
	ValAttr: string;
	LastClrAttr: Array<any> | null;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

export type ST_SchemeColorVal = string;

export class CT_SchemeColor {
	ValAttr: string;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

export type ST_PresetColorVal = string;

export class CT_PresetColor {
	ValAttr: string;
	EG_ColorTransform: Array<EG_ColorTransform>;
}

export class EG_OfficeArtExtensionList {
	Ext: Array<CT_OfficeArtExtension>;
}

export class CT_OfficeArtExtensionList {
	EG_OfficeArtExtensionList: Array<EG_OfficeArtExtensionList>;
}

export class CT_Scale2D {
	Sx: Array<CT_Ratio>;
	Sy: Array<CT_Ratio>;
}

export class CT_Transform2D {
	RotAttr: number | null;
	FlipHAttr: boolean | null;
	FlipVAttr: boolean | null;
	Off: Array<CT_Point2D>;
	Ext: Array<CT_PositiveSize2D>;
}

export class CT_GroupTransform2D {
	RotAttr: number | null;
	FlipHAttr: boolean | null;
	FlipVAttr: boolean | null;
	Off: Array<CT_Point2D>;
	Ext: Array<CT_PositiveSize2D>;
	ChOff: Array<CT_Point2D>;
	ChExt: Array<CT_PositiveSize2D>;
}

export class CT_Point3D {
	XAttr: ST_Coordinate;
	YAttr: ST_Coordinate;
	ZAttr: ST_Coordinate;
}

export class CT_Vector3D {
	DxAttr: ST_Coordinate;
	DyAttr: ST_Coordinate;
	DzAttr: ST_Coordinate;
}

export class CT_SphereCoords {
	LatAttr: number;
	LonAttr: number;
	RevAttr: number;
}

export class CT_RelativeRect {
	LAttr: ST_Percentage | null;
	TAttr: ST_Percentage | null;
	RAttr: ST_Percentage | null;
	BAttr: ST_Percentage | null;
}

export type ST_RectAlignment = string;

export class EG_ColorChoice {
	ScrgbClr: Array<CT_ScRgbColor>;
	SrgbClr: Array<CT_SRgbColor>;
	HslClr: Array<CT_HslColor>;
	SysClr: Array<CT_SystemColor>;
	SchemeClr: Array<CT_SchemeColor>;
	PrstClr: Array<CT_PresetColor>;
}

export class CT_Color {
	EG_ColorChoice: EG_ColorChoice;
}

export class CT_ColorMRU {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export type ST_BlackWhiteMode = string;

export class AG_Blob {
	REmbedAttr: string | null;
	RLinkAttr: string | null;
}

export class CT_EmbeddedWAVAudioFile {
	REmbedAttr: string;
	NameAttr: string | null;
}

export class CT_Hyperlink {
	RIdAttr: string | null;
	InvalidUrlAttr: string | null;
	ActionAttr: string | null;
	TgtFrameAttr: string | null;
	TooltipAttr: string | null;
	HistoryAttr: boolean | null;
	HighlightClickAttr: boolean | null;
	EndSndAttr: boolean | null;
	Snd: Array<CT_EmbeddedWAVAudioFile>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export type ST_DrawingElementId = number;

export class AG_Locking {
	NoGrpAttr: boolean | null;
	NoSelectAttr: boolean | null;
	NoRotAttr: boolean | null;
	NoChangeAspectAttr: boolean | null;
	NoMoveAttr: boolean | null;
	NoResizeAttr: boolean | null;
	NoEditPointsAttr: boolean | null;
	NoAdjustHandlesAttr: boolean | null;
	NoChangeArrowheadsAttr: boolean | null;
	NoChangeShapeTypeAttr: boolean | null;
}

export class CT_ConnectorLocking {
	AG_Locking: AG_Locking;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_ShapeLocking {
	AG_Locking: AG_Locking;
	NoTextEditAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_PictureLocking {
	AG_Locking: AG_Locking;
	NoCropAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GroupLocking {
	NoGrpAttr: boolean | null;
	NoUngrpAttr: boolean | null;
	NoSelectAttr: boolean | null;
	NoRotAttr: boolean | null;
	NoChangeAspectAttr: boolean | null;
	NoMoveAttr: boolean | null;
	NoResizeAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GraphicalObjectFrameLocking {
	NoGrpAttr: boolean | null;
	NoDrilldownAttr: boolean | null;
	NoSelectAttr: boolean | null;
	NoChangeAspectAttr: boolean | null;
	NoMoveAttr: boolean | null;
	NoResizeAttr: boolean | null;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_ContentPartLocking {
	AG_Locking: AG_Locking;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualDrawingProps {
	IdAttr: number;
	NameAttr: string;
	DescrAttr: string | null;
	HiddenAttr: boolean | null;
	TitleAttr: string | null;
	HlinkClick: Array<CT_Hyperlink>;
	HlinkHover: Array<CT_Hyperlink>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualDrawingShapeProps {
	TxBoxAttr: boolean | null;
	SpLocks: Array<CT_ShapeLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualConnectorProperties {
	CxnSpLocks: Array<CT_ConnectorLocking>;
	StCxn: Array<CT_Connection>;
	EndCxn: Array<CT_Connection>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualPictureProperties {
	PreferRelativeResizeAttr: boolean | null;
	PicLocks: Array<CT_PictureLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualGroupDrawingShapeProps {
	GrpSpLocks: Array<CT_GroupLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualGraphicFrameProperties {
	GraphicFrameLocks: Array<CT_GraphicalObjectFrameLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_NonVisualContentPartProperties {
	IsCommentAttr: boolean | null;
	CpLocks: Array<CT_ContentPartLocking>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GraphicalObjectData {
	UriAttr: string;
}

export class CT_GraphicalObject {
	GraphicData: Array<CT_GraphicalObjectData>;
}

export type Graphic = CT_GraphicalObject;

export type ST_ChartBuildStep = string;

export type ST_DgmBuildStep = string;

export class CT_AnimationDgmElement {
	IdAttr: string | null;
	BldStepAttr: string | null;
}

export class CT_AnimationChartElement {
	SeriesIdxAttr: number | null;
	CategoryIdxAttr: number | null;
	BldStepAttr: string;
}

export class CT_AnimationElementChoice {
	Dgm: Array<CT_AnimationDgmElement>;
	Chart: Array<CT_AnimationChartElement>;
}

export type ST_AnimationBuildType = string;

export type ST_AnimationDgmOnlyBuildType = string;

export class ST_AnimationDgmBuildType {
	ST_AnimationBuildType: string;
	ST_AnimationDgmOnlyBuildType: string;
}

export class CT_AnimationDgmBuildProperties {
	BldAttr: ST_AnimationDgmBuildType | null;
	RevAttr: boolean | null;
}

export type ST_AnimationChartOnlyBuildType = string;

export class ST_AnimationChartBuildType {
	ST_AnimationBuildType: string;
	ST_AnimationChartOnlyBuildType: string;
}

export class CT_AnimationChartBuildProperties {
	BldAttr: ST_AnimationChartBuildType | null;
	AnimBgAttr: boolean | null;
}

export class CT_AnimationGraphicalObjectBuildProperties {
	BldDgm: Array<CT_AnimationDgmBuildProperties>;
	BldChart: Array<CT_AnimationChartBuildProperties>;
}

export class CT_BackgroundFormatting {
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
}

export class CT_WholeE2oFormatting {
	EG_EffectProperties: Array<EG_EffectProperties>;
	Ln: Array<CT_LineProperties>;
}

export class CT_GvmlUseShapeRectangle {
}

export class CT_GvmlTextShape {
	TxBody: Array<CT_TextBody>;
	UseSpRect: Array<CT_GvmlUseShapeRectangle>;
	Xfrm: Array<CT_Transform2D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GvmlShapeNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvSpPr: Array<CT_NonVisualDrawingShapeProps>;
}

export class CT_GvmlShape {
	NvSpPr: Array<CT_GvmlShapeNonVisual>;
	SpPr: Array<CT_ShapeProperties>;
	TxSp: Array<CT_GvmlTextShape>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GvmlConnectorNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvCxnSpPr: Array<CT_NonVisualConnectorProperties>;
}

export class CT_GvmlConnector {
	NvCxnSpPr: Array<CT_GvmlConnectorNonVisual>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GvmlPictureNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvPicPr: Array<CT_NonVisualPictureProperties>;
}

export class CT_GvmlPicture {
	NvPicPr: Array<CT_GvmlPictureNonVisual>;
	BlipFill: Array<CT_BlipFillProperties>;
	SpPr: Array<CT_ShapeProperties>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GvmlGraphicFrameNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvGraphicFramePr: Array<CT_NonVisualGraphicFrameProperties>;
}

export class CT_GvmlGraphicalObjectFrame {
	NvGraphicFramePr: Array<CT_GvmlGraphicFrameNonVisual>;
	Graphic: Array<CT_GraphicalObject>;
	Xfrm: Array<CT_Transform2D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GvmlGroupShapeNonVisual {
	CNvPr: Array<CT_NonVisualDrawingProps>;
	CNvGrpSpPr: Array<CT_NonVisualGroupDrawingShapeProps>;
}

export class CT_GvmlGroupShape {
	NvGrpSpPr: Array<CT_GvmlGroupShapeNonVisual>;
	GrpSpPr: Array<CT_GroupShapeProperties>;
	TxSp: Array<CT_GvmlTextShape>;
	Sp: Array<CT_GvmlShape>;
	CxnSp: Array<CT_GvmlConnector>;
	Pic: Array<CT_GvmlPicture>;
	GraphicFrame: Array<CT_GvmlGraphicalObjectFrame>;
	GrpSp: Array<CT_GvmlGroupShape>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export type ST_PresetCameraType = string;

export type ST_FOVAngle = number;

export class CT_Camera {
	PrstAttr: string;
	FovAttr: number | null;
	ZoomAttr: ST_PositivePercentage | null;
	Rot: Array<CT_SphereCoords>;
}

export type ST_LightRigDirection = string;

export type ST_LightRigType = string;

export class CT_LightRig {
	RigAttr: string;
	DirAttr: string;
	Rot: Array<CT_SphereCoords>;
}

export class CT_Scene3D {
	Camera: Array<CT_Camera>;
	LightRig: Array<CT_LightRig>;
	Backdrop: Array<CT_Backdrop>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_Backdrop {
	Anchor: Array<CT_Point3D>;
	Norm: Array<CT_Vector3D>;
	Up: Array<CT_Vector3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export type ST_BevelPresetType = string;

export class CT_Bevel {
	WAttr: number | null;
	HAttr: number | null;
	PrstAttr: string | null;
}

export type ST_PresetMaterialType = string;

export class CT_Shape3D {
	ZAttr: ST_Coordinate | null;
	ExtrusionHAttr: number | null;
	ContourWAttr: number | null;
	PrstMaterialAttr: string | null;
	BevelT: Array<CT_Bevel>;
	BevelB: Array<CT_Bevel>;
	ExtrusionClr: Array<CT_Color>;
	ContourClr: Array<CT_Color>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_FlatText {
	ZAttr: ST_Coordinate | null;
}

export class EG_Text3D {
	Sp3d: Array<CT_Shape3D>;
	FlatTx: Array<CT_FlatText>;
}

export class CT_AlphaBiLevelEffect {
	ThreshAttr: ST_PositiveFixedPercentage;
}

export class CT_AlphaCeilingEffect {
}

export class CT_AlphaFloorEffect {
}

export class CT_AlphaInverseEffect {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_AlphaModulateFixedEffect {
	AmtAttr: ST_PositivePercentage | null;
}

export class CT_AlphaOutsetEffect {
	RadAttr: ST_Coordinate | null;
}

export class CT_AlphaReplaceEffect {
	AAttr: ST_PositiveFixedPercentage;
}

export class CT_BiLevelEffect {
	ThreshAttr: ST_PositiveFixedPercentage;
}

export class CT_BlurEffect {
	RadAttr: number | null;
	GrowAttr: boolean | null;
}

export class CT_ColorChangeEffect {
	UseAAttr: boolean | null;
	ClrFrom: Array<CT_Color>;
	ClrTo: Array<CT_Color>;
}

export class CT_ColorReplaceEffect {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_DuotoneEffect {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_GlowEffect {
	RadAttr: number | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_GrayscaleEffect {
}

export class CT_HSLEffect {
	HueAttr: number | null;
	SatAttr: ST_FixedPercentage | null;
	LumAttr: ST_FixedPercentage | null;
}

export class CT_InnerShadowEffect {
	BlurRadAttr: number | null;
	DistAttr: number | null;
	DirAttr: number | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_LuminanceEffect {
	BrightAttr: ST_FixedPercentage | null;
	ContrastAttr: ST_FixedPercentage | null;
}

export class CT_OuterShadowEffect {
	BlurRadAttr: number | null;
	DistAttr: number | null;
	DirAttr: number | null;
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	KxAttr: number | null;
	KyAttr: number | null;
	AlgnAttr: string | null;
	RotWithShapeAttr: boolean | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export type ST_PresetShadowVal = string;

export class CT_PresetShadowEffect {
	PrstAttr: string;
	DistAttr: number | null;
	DirAttr: number | null;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_ReflectionEffect {
	BlurRadAttr: number | null;
	StAAttr: ST_PositiveFixedPercentage | null;
	StPosAttr: ST_PositiveFixedPercentage | null;
	EndAAttr: ST_PositiveFixedPercentage | null;
	EndPosAttr: ST_PositiveFixedPercentage | null;
	DistAttr: number | null;
	DirAttr: number | null;
	FadeDirAttr: number | null;
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	KxAttr: number | null;
	KyAttr: number | null;
	AlgnAttr: string | null;
	RotWithShapeAttr: boolean | null;
}

export class CT_RelativeOffsetEffect {
	TxAttr: ST_Percentage | null;
	TyAttr: ST_Percentage | null;
}

export class CT_SoftEdgesEffect {
	RadAttr: number;
}

export class CT_TintEffect {
	HueAttr: number | null;
	AmtAttr: ST_FixedPercentage | null;
}

export class CT_TransformEffect {
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	KxAttr: number | null;
	KyAttr: number | null;
	TxAttr: ST_Coordinate | null;
	TyAttr: ST_Coordinate | null;
}

export class CT_NoFillProperties {
}

export class CT_SolidColorFillProperties {
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_LinearShadeProperties {
	AngAttr: number | null;
	ScaledAttr: boolean | null;
}

export type ST_PathShadeType = string;

export class CT_PathShadeProperties {
	PathAttr: string | null;
	FillToRect: Array<CT_RelativeRect>;
}

export class EG_ShadeProperties {
	Lin: Array<CT_LinearShadeProperties>;
	Path: Array<CT_PathShadeProperties>;
}

export type ST_TileFlipMode = string;

export class CT_GradientStop {
	PosAttr: ST_PositiveFixedPercentage;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_GradientStopList {
	Gs: Array<CT_GradientStop>;
}

export class CT_GradientFillProperties {
	FlipAttr: string | null;
	RotWithShapeAttr: boolean | null;
	EG_ShadeProperties: Array<EG_ShadeProperties>;
	GsLst: Array<CT_GradientStopList>;
	TileRect: Array<CT_RelativeRect>;
}

export class CT_TileInfoProperties {
	TxAttr: ST_Coordinate | null;
	TyAttr: ST_Coordinate | null;
	SxAttr: ST_Percentage | null;
	SyAttr: ST_Percentage | null;
	FlipAttr: string | null;
	AlgnAttr: string | null;
}

export class CT_StretchInfoProperties {
	FillRect: Array<CT_RelativeRect>;
}

export class EG_FillModeProperties {
	Tile: Array<CT_TileInfoProperties>;
	Stretch: Array<CT_StretchInfoProperties>;
}

export type ST_BlipCompression = string;

export class CT_Blip {
	AG_Blob: AG_Blob;
	CstateAttr: string | null;
	AlphaBiLevel: Array<CT_AlphaBiLevelEffect>;
	AlphaCeiling: Array<CT_AlphaCeilingEffect>;
	AlphaFloor: Array<CT_AlphaFloorEffect>;
	AlphaInv: Array<CT_AlphaInverseEffect>;
	AlphaMod: Array<CT_AlphaModulateEffect>;
	AlphaModFix: Array<CT_AlphaModulateFixedEffect>;
	AlphaRepl: Array<CT_AlphaReplaceEffect>;
	BiLevel: Array<CT_BiLevelEffect>;
	Blur: Array<CT_BlurEffect>;
	ClrChange: Array<CT_ColorChangeEffect>;
	ClrRepl: Array<CT_ColorReplaceEffect>;
	Duotone: Array<CT_DuotoneEffect>;
	FillOverlay: Array<CT_FillOverlayEffect>;
	Grayscl: Array<CT_GrayscaleEffect>;
	Hsl: Array<CT_HSLEffect>;
	Lum: Array<CT_LuminanceEffect>;
	Tint: Array<CT_TintEffect>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_BlipFillProperties {
	DpiAttr: number | null;
	RotWithShapeAttr: boolean | null;
	EG_FillModeProperties: Array<EG_FillModeProperties>;
	Blip: Array<CT_Blip>;
	SrcRect: Array<CT_RelativeRect>;
}

export type ST_PresetPatternVal = string;

export class CT_PatternFillProperties {
	PrstAttr: string | null;
	FgClr: Array<CT_Color>;
	BgClr: Array<CT_Color>;
}

export class CT_GroupFillProperties {
}

export class EG_FillProperties {
	NoFill: Array<CT_NoFillProperties>;
	SolidFill: Array<CT_SolidColorFillProperties>;
	GradFill: Array<CT_GradientFillProperties>;
	BlipFill: Array<CT_BlipFillProperties>;
	PattFill: Array<CT_PatternFillProperties>;
	GrpFill: Array<CT_GroupFillProperties>;
}

export class CT_FillProperties {
	EG_FillProperties: Array<EG_FillProperties>;
}

export class CT_FillEffect {
	EG_FillProperties: Array<EG_FillProperties>;
}

export type ST_BlendMode = string;

export class CT_FillOverlayEffect {
	BlendAttr: string;
	EG_FillProperties: Array<EG_FillProperties>;
}

export class CT_EffectReference {
	RefAttr: string;
}

export class EG_Effect {
	Cont: Array<CT_EffectContainer>;
	Effect: Array<CT_EffectReference>;
	AlphaBiLevel: Array<CT_AlphaBiLevelEffect>;
	AlphaCeiling: Array<CT_AlphaCeilingEffect>;
	AlphaFloor: Array<CT_AlphaFloorEffect>;
	AlphaInv: Array<CT_AlphaInverseEffect>;
	AlphaMod: Array<CT_AlphaModulateEffect>;
	AlphaModFix: Array<CT_AlphaModulateFixedEffect>;
	AlphaOutset: Array<CT_AlphaOutsetEffect>;
	AlphaRepl: Array<CT_AlphaReplaceEffect>;
	BiLevel: Array<CT_BiLevelEffect>;
	Blend: Array<CT_BlendEffect>;
	Blur: Array<CT_BlurEffect>;
	ClrChange: Array<CT_ColorChangeEffect>;
	ClrRepl: Array<CT_ColorReplaceEffect>;
	Duotone: Array<CT_DuotoneEffect>;
	Fill: Array<CT_FillEffect>;
	FillOverlay: Array<CT_FillOverlayEffect>;
	Glow: Array<CT_GlowEffect>;
	Grayscl: Array<CT_GrayscaleEffect>;
	Hsl: Array<CT_HSLEffect>;
	InnerShdw: Array<CT_InnerShadowEffect>;
	Lum: Array<CT_LuminanceEffect>;
	OuterShdw: Array<CT_OuterShadowEffect>;
	PrstShdw: Array<CT_PresetShadowEffect>;
	Reflection: Array<CT_ReflectionEffect>;
	RelOff: Array<CT_RelativeOffsetEffect>;
	SoftEdge: Array<CT_SoftEdgesEffect>;
	Tint: Array<CT_TintEffect>;
	Xfrm: Array<CT_TransformEffect>;
}

export type ST_EffectContainerType = string;

export class CT_EffectContainer {
	TypeAttr: string | null;
	NameAttr: string | null;
	EG_Effect: Array<EG_Effect>;
}

export class CT_AlphaModulateEffect {
	Cont: Array<CT_EffectContainer>;
}

export class CT_BlendEffect {
	BlendAttr: string;
	Cont: Array<CT_EffectContainer>;
}

export class CT_EffectList {
	Blur: Array<CT_BlurEffect>;
	FillOverlay: Array<CT_FillOverlayEffect>;
	Glow: Array<CT_GlowEffect>;
	InnerShdw: Array<CT_InnerShadowEffect>;
	OuterShdw: Array<CT_OuterShadowEffect>;
	PrstShdw: Array<CT_PresetShadowEffect>;
	Reflection: Array<CT_ReflectionEffect>;
	SoftEdge: Array<CT_SoftEdgesEffect>;
}

export class EG_EffectProperties {
	EffectLst: Array<CT_EffectList>;
	EffectDag: Array<CT_EffectContainer>;
}

export class CT_EffectProperties {
	EG_EffectProperties: Array<EG_EffectProperties>;
}

export type Blip = CT_Blip;

export type ST_ShapeType = string;

export type ST_TextShapeType = string;

export type ST_GeomGuideName = string;

export type ST_GeomGuideFormula = string;

export class CT_GeomGuide {
	NameAttr: string;
	FmlaAttr: string;
}

export class CT_GeomGuideList {
	Gd: Array<CT_GeomGuide>;
}

export class ST_AdjCoordinate {
	ST_Coordinate: ST_Coordinate;
	ST_GeomGuideName: string;
}

export class ST_AdjAngle {
	ST_Angle: number;
	ST_GeomGuideName: string;
}

export class CT_AdjPoint2D {
	XAttr: ST_AdjCoordinate;
	YAttr: ST_AdjCoordinate;
}

export class CT_GeomRect {
	LAttr: ST_AdjCoordinate;
	TAttr: ST_AdjCoordinate;
	RAttr: ST_AdjCoordinate;
	BAttr: ST_AdjCoordinate;
}

export class CT_XYAdjustHandle {
	GdRefXAttr: string | null;
	MinXAttr: ST_AdjCoordinate | null;
	MaxXAttr: ST_AdjCoordinate | null;
	GdRefYAttr: string | null;
	MinYAttr: ST_AdjCoordinate | null;
	MaxYAttr: ST_AdjCoordinate | null;
	Pos: Array<CT_AdjPoint2D>;
}

export class CT_PolarAdjustHandle {
	GdRefRAttr: string | null;
	MinRAttr: ST_AdjCoordinate | null;
	MaxRAttr: ST_AdjCoordinate | null;
	GdRefAngAttr: string | null;
	MinAngAttr: ST_AdjAngle | null;
	MaxAngAttr: ST_AdjAngle | null;
	Pos: Array<CT_AdjPoint2D>;
}

export class CT_ConnectionSite {
	AngAttr: ST_AdjAngle;
	Pos: Array<CT_AdjPoint2D>;
}

export class CT_AdjustHandleList {
	AhXY: Array<CT_XYAdjustHandle>;
	AhPolar: Array<CT_PolarAdjustHandle>;
}

export class CT_ConnectionSiteList {
	Cxn: Array<CT_ConnectionSite>;
}

export class CT_Connection {
	IdAttr: number;
	IdxAttr: number;
}

export class CT_Path2DMoveTo {
	Pt: Array<CT_AdjPoint2D>;
}

export class CT_Path2DLineTo {
	Pt: Array<CT_AdjPoint2D>;
}

export class CT_Path2DArcTo {
	WRAttr: ST_AdjCoordinate;
	HRAttr: ST_AdjCoordinate;
	StAngAttr: ST_AdjAngle;
	SwAngAttr: ST_AdjAngle;
}

export class CT_Path2DQuadBezierTo {
	Pt: Array<CT_AdjPoint2D>;
}

export class CT_Path2DCubicBezierTo {
	Pt: Array<CT_AdjPoint2D>;
}

export class CT_Path2DClose {
}

export type ST_PathFillMode = string;

export class CT_Path2D {
	WAttr: number | null;
	HAttr: number | null;
	FillAttr: string | null;
	StrokeAttr: boolean | null;
	ExtrusionOkAttr: boolean | null;
	Close: Array<CT_Path2DClose>;
	MoveTo: Array<CT_Path2DMoveTo>;
	LnTo: Array<CT_Path2DLineTo>;
	ArcTo: Array<CT_Path2DArcTo>;
	QuadBezTo: Array<CT_Path2DQuadBezierTo>;
	CubicBezTo: Array<CT_Path2DCubicBezierTo>;
}

export class CT_Path2DList {
	Path: Array<CT_Path2D>;
}

export class CT_PresetGeometry2D {
	PrstAttr: string;
	AvLst: Array<CT_GeomGuideList>;
}

export class CT_PresetTextShape {
	PrstAttr: string;
	AvLst: Array<CT_GeomGuideList>;
}

export class CT_CustomGeometry2D {
	AvLst: Array<CT_GeomGuideList>;
	GdLst: Array<CT_GeomGuideList>;
	AhLst: Array<CT_AdjustHandleList>;
	CxnLst: Array<CT_ConnectionSiteList>;
	Rect: Array<CT_GeomRect>;
	PathLst: Array<CT_Path2DList>;
}

export class EG_Geometry {
	CustGeom: Array<CT_CustomGeometry2D>;
	PrstGeom: Array<CT_PresetGeometry2D>;
}

export class EG_TextGeometry {
	CustGeom: Array<CT_CustomGeometry2D>;
	PrstTxWarp: Array<CT_PresetTextShape>;
}

export type ST_LineEndType = string;

export type ST_LineEndWidth = string;

export type ST_LineEndLength = string;

export class CT_LineEndProperties {
	TypeAttr: string | null;
	WAttr: string | null;
	LenAttr: string | null;
}

export class EG_LineFillProperties {
	NoFill: Array<CT_NoFillProperties>;
	SolidFill: Array<CT_SolidColorFillProperties>;
	GradFill: Array<CT_GradientFillProperties>;
	PattFill: Array<CT_PatternFillProperties>;
}

export class CT_LineJoinBevel {
}

export class CT_LineJoinRound {
}

export class CT_LineJoinMiterProperties {
	LimAttr: ST_PositivePercentage | null;
}

export class EG_LineJoinProperties {
	Round: Array<CT_LineJoinRound>;
	Bevel: Array<CT_LineJoinBevel>;
	Miter: Array<CT_LineJoinMiterProperties>;
}

export type ST_PresetLineDashVal = string;

export class CT_PresetLineDashProperties {
	ValAttr: string | null;
}

export class CT_DashStop {
	DAttr: ST_PositivePercentage;
	SpAttr: ST_PositivePercentage;
}

export class CT_DashStopList {
	Ds: Array<CT_DashStop>;
}

export class EG_LineDashProperties {
	PrstDash: Array<CT_PresetLineDashProperties>;
	CustDash: Array<CT_DashStopList>;
}

export type ST_LineCap = string;

export type ST_LineWidth = number;

export type ST_PenAlignment = string;

export type ST_CompoundLine = string;

export class CT_LineProperties {
	WAttr: number | null;
	CapAttr: string | null;
	CmpdAttr: string | null;
	AlgnAttr: string | null;
	EG_LineFillProperties: Array<EG_LineFillProperties>;
	EG_LineDashProperties: Array<EG_LineDashProperties>;
	EG_LineJoinProperties: Array<EG_LineJoinProperties>;
	HeadEnd: Array<CT_LineEndProperties>;
	TailEnd: Array<CT_LineEndProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export type ST_ShapeID = string;

export class CT_ShapeProperties {
	BwModeAttr: string | null;
	EG_Geometry: Array<EG_Geometry>;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	Xfrm: Array<CT_Transform2D>;
	Ln: Array<CT_LineProperties>;
	Scene3d: Array<CT_Scene3D>;
	Sp3d: Array<CT_Shape3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_GroupShapeProperties {
	BwModeAttr: string | null;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	Xfrm: Array<CT_GroupTransform2D>;
	Scene3d: Array<CT_Scene3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_StyleMatrixReference {
	IdxAttr: number;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_FontReference {
	IdxAttr: string;
	EG_ColorChoice: Array<EG_ColorChoice>;
}

export class CT_ShapeStyle {
	LnRef: Array<CT_StyleMatrixReference>;
	FillRef: Array<CT_StyleMatrixReference>;
	EffectRef: Array<CT_StyleMatrixReference>;
	FontRef: Array<CT_FontReference>;
}

export class CT_DefaultShapeDefinition {
	SpPr: Array<CT_ShapeProperties>;
	BodyPr: Array<CT_TextBodyProperties>;
	LstStyle: Array<CT_TextListStyle>;
	Style: Array<CT_ShapeStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_ObjectStyleDefaults {
	SpDef: Array<CT_DefaultShapeDefinition>;
	LnDef: Array<CT_DefaultShapeDefinition>;
	TxDef: Array<CT_DefaultShapeDefinition>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_EmptyElement {
}

export class CT_ColorMapping {
	Bg1Attr: string;
	Tx1Attr: string;
	Bg2Attr: string;
	Tx2Attr: string;
	Accent1Attr: string;
	Accent2Attr: string;
	Accent3Attr: string;
	Accent4Attr: string;
	Accent5Attr: string;
	Accent6Attr: string;
	HlinkAttr: string;
	FolHlinkAttr: string;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_ColorMappingOverride {
	MasterClrMapping: Array<CT_EmptyElement>;
	OverrideClrMapping: Array<CT_ColorMapping>;
}

export class CT_ColorSchemeAndMapping {
	ClrScheme: Array<CT_ColorScheme>;
	ClrMap: Array<CT_ColorMapping>;
}

export class CT_ColorSchemeList {
	ExtraClrScheme: Array<CT_ColorSchemeAndMapping>;
}

export class CT_OfficeStyleSheet {
	NameAttr: string | null;
	ThemeElements: Array<CT_BaseStyles>;
	ObjectDefaults: Array<CT_ObjectStyleDefaults>;
	ExtraClrSchemeLst: Array<CT_ColorSchemeList>;
	CustClrLst: Array<CT_CustomColorList>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_BaseStylesOverride {
	ClrScheme: Array<CT_ColorScheme>;
	FontScheme: Array<CT_FontScheme>;
	FmtScheme: Array<CT_StyleMatrix>;
}

export class CT_ClipboardStyleSheet {
	ThemeElements: Array<CT_BaseStyles>;
	ClrMap: Array<CT_ColorMapping>;
}

export type Theme = CT_OfficeStyleSheet;

export type ThemeOverride = CT_BaseStylesOverride;

export type ThemeManager = CT_EmptyElement;

export class CT_TableCellProperties {
	MarLAttr: ST_Coordinate32 | null;
	MarRAttr: ST_Coordinate32 | null;
	MarTAttr: ST_Coordinate32 | null;
	MarBAttr: ST_Coordinate32 | null;
	VertAttr: string | null;
	AnchorAttr: string | null;
	AnchorCtrAttr: boolean | null;
	HorzOverflowAttr: string | null;
	EG_FillProperties: Array<EG_FillProperties>;
	LnL: Array<CT_LineProperties>;
	LnR: Array<CT_LineProperties>;
	LnT: Array<CT_LineProperties>;
	LnB: Array<CT_LineProperties>;
	LnTlToBr: Array<CT_LineProperties>;
	LnBlToTr: Array<CT_LineProperties>;
	Cell3D: Array<CT_Cell3D>;
	Headers: Array<CT_Headers>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_Headers {
	Header: Array<string>;
}

export class CT_TableCol {
	WAttr: ST_Coordinate;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TableGrid {
	GridCol: Array<CT_TableCol>;
}

export class CT_TableCell {
	RowSpanAttr: number | null;
	GridSpanAttr: number | null;
	HMergeAttr: boolean | null;
	VMergeAttr: boolean | null;
	IdAttr: string | null;
	TxBody: Array<CT_TextBody>;
	TcPr: Array<CT_TableCellProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TableRow {
	HAttr: ST_Coordinate;
	Tc: Array<CT_TableCell>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TableProperties {
	RtlAttr: boolean | null;
	FirstRowAttr: boolean | null;
	FirstColAttr: boolean | null;
	LastRowAttr: boolean | null;
	LastColAttr: boolean | null;
	BandRowAttr: boolean | null;
	BandColAttr: boolean | null;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	TableStyle: Array<CT_TableStyle>;
	TableStyleId: Array<string>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_Table {
	TblPr: Array<CT_TableProperties>;
	TblGrid: Array<CT_TableGrid>;
	Tr: Array<CT_TableRow>;
}

export type Tbl = CT_Table;

export class CT_Cell3D {
	PrstMaterialAttr: string | null;
	Bevel: Array<CT_Bevel>;
	LightRig: Array<CT_LightRig>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class EG_ThemeableFillStyle {
	Fill: Array<CT_FillProperties>;
	FillRef: Array<CT_StyleMatrixReference>;
}

export class CT_ThemeableLineStyle {
	Ln: Array<CT_LineProperties>;
	LnRef: Array<CT_StyleMatrixReference>;
}

export class EG_ThemeableEffectStyle {
	Effect: Array<CT_EffectProperties>;
	EffectRef: Array<CT_StyleMatrixReference>;
}

export class EG_ThemeableFontStyles {
	Font: Array<CT_FontCollection>;
	FontRef: Array<CT_FontReference>;
}

export type ST_OnOffStyleType = string;

export class CT_TableStyleTextStyle {
	BAttr: string | null;
	IAttr: string | null;
	EG_ThemeableFontStyles: Array<EG_ThemeableFontStyles>;
	EG_ColorChoice: Array<EG_ColorChoice>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TableCellBorderStyle {
	Left: Array<CT_ThemeableLineStyle>;
	Right: Array<CT_ThemeableLineStyle>;
	Top: Array<CT_ThemeableLineStyle>;
	Bottom: Array<CT_ThemeableLineStyle>;
	InsideH: Array<CT_ThemeableLineStyle>;
	InsideV: Array<CT_ThemeableLineStyle>;
	Tl2br: Array<CT_ThemeableLineStyle>;
	Tr2bl: Array<CT_ThemeableLineStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TableBackgroundStyle {
	EG_ThemeableFillStyle: Array<EG_ThemeableFillStyle>;
	EG_ThemeableEffectStyle: Array<EG_ThemeableEffectStyle>;
}

export class CT_TableStyleCellStyle {
	EG_ThemeableFillStyle: Array<EG_ThemeableFillStyle>;
	TcBdr: Array<CT_TableCellBorderStyle>;
	Cell3D: Array<CT_Cell3D>;
}

export class CT_TablePartStyle {
	TcTxStyle: Array<CT_TableStyleTextStyle>;
	TcStyle: Array<CT_TableStyleCellStyle>;
}

export class CT_TableStyle {
	StyleIdAttr: string;
	StyleNameAttr: string;
	TblBg: Array<CT_TableBackgroundStyle>;
	WholeTbl: Array<CT_TablePartStyle>;
	Band1H: Array<CT_TablePartStyle>;
	Band2H: Array<CT_TablePartStyle>;
	Band1V: Array<CT_TablePartStyle>;
	Band2V: Array<CT_TablePartStyle>;
	LastCol: Array<CT_TablePartStyle>;
	FirstCol: Array<CT_TablePartStyle>;
	LastRow: Array<CT_TablePartStyle>;
	SeCell: Array<CT_TablePartStyle>;
	SwCell: Array<CT_TablePartStyle>;
	FirstRow: Array<CT_TablePartStyle>;
	NeCell: Array<CT_TablePartStyle>;
	NwCell: Array<CT_TablePartStyle>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TableStyleList {
	DefAttr: string;
	TblStyle: Array<CT_TableStyle>;
}

export type TblStyleLst = CT_TableStyleList;

export class CT_TextParagraph {
	EG_TextRun: Array<EG_TextRun>;
	PPr: Array<CT_TextParagraphProperties>;
	EndParaRPr: Array<CT_TextCharacterProperties>;
}

export type ST_TextAnchoringType = string;

export type ST_TextVertOverflowType = string;

export type ST_TextHorzOverflowType = string;

export type ST_TextVerticalType = string;

export type ST_TextWrappingType = string;

export type ST_TextColumnCount = number;

export class CT_TextListStyle {
	DefPPr: Array<CT_TextParagraphProperties>;
	Lvl1pPr: Array<CT_TextParagraphProperties>;
	Lvl2pPr: Array<CT_TextParagraphProperties>;
	Lvl3pPr: Array<CT_TextParagraphProperties>;
	Lvl4pPr: Array<CT_TextParagraphProperties>;
	Lvl5pPr: Array<CT_TextParagraphProperties>;
	Lvl6pPr: Array<CT_TextParagraphProperties>;
	Lvl7pPr: Array<CT_TextParagraphProperties>;
	Lvl8pPr: Array<CT_TextParagraphProperties>;
	Lvl9pPr: Array<CT_TextParagraphProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class ST_TextFontScalePercentOrPercentString {
	ST_Percentage: string;
}

export class CT_TextNormalAutofit {
	FontScaleAttr: ST_TextFontScalePercentOrPercentString | null;
	LnSpcReductionAttr: ST_TextSpacingPercentOrPercentString | null;
}

export class CT_TextShapeAutofit {
}

export class CT_TextNoAutofit {
}

export class EG_TextAutofit {
	NoAutofit: CT_TextNoAutofit;
	NormAutofit: CT_TextNormalAutofit;
	SpAutoFit: CT_TextShapeAutofit;
}

export class CT_TextBodyProperties {
	RotAttr: number | null;
	SpcFirstLastParaAttr: boolean | null;
	VertOverflowAttr: string | null;
	HorzOverflowAttr: string | null;
	VertAttr: string | null;
	WrapAttr: string | null;
	LInsAttr: ST_Coordinate32 | null;
	TInsAttr: ST_Coordinate32 | null;
	RInsAttr: ST_Coordinate32 | null;
	BInsAttr: ST_Coordinate32 | null;
	NumColAttr: number | null;
	SpcColAttr: number | null;
	RtlColAttr: boolean | null;
	FromWordArtAttr: boolean | null;
	AnchorAttr: string | null;
	AnchorCtrAttr: boolean | null;
	ForceAAAttr: boolean | null;
	UprightAttr: boolean | null;
	CompatLnSpcAttr: boolean | null;
	EG_TextAutofit: Array<EG_TextAutofit>;
	EG_Text3D: Array<EG_Text3D>;
	PrstTxWarp: Array<CT_PresetTextShape>;
	Scene3d: Array<CT_Scene3D>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TextBody {
	BodyPr: Array<CT_TextBodyProperties>;
	LstStyle: Array<CT_TextListStyle>;
	P: Array<CT_TextParagraph>;
}

export type ST_TextBulletStartAtNum = number;

export type ST_TextAutonumberScheme = string;

export class CT_TextBulletColorFollowText {
}

export class EG_TextBulletColor {
	BuClrTx: Array<CT_TextBulletColorFollowText>;
	BuClr: Array<CT_Color>;
}

export class ST_TextBulletSize {
	ST_TextBulletSizePercent: ST_TextBulletSizePercent;
}

export type ST_TextBulletSizePercent = string;

export class CT_TextBulletSizeFollowText {
}

export class CT_TextBulletSizePercent {
	ValAttr: string;
}

export class CT_TextBulletSizePoint {
	ValAttr: number;
}

export class EG_TextBulletSize {
	BuSzTx: CT_TextBulletSizeFollowText;
	BuSzPct: CT_TextBulletSizePercent;
	BuSzPts: CT_TextBulletSizePoint;
}

export class CT_TextBulletTypefaceFollowText {
}

export class EG_TextBulletTypeface {
	BuFontTx: CT_TextBulletTypefaceFollowText;
	BuFont: CT_TextFont;
}

export class CT_TextAutonumberBullet {
	TypeAttr: string;
	StartAtAttr: number | null;
}

export class CT_TextCharBullet {
	CharAttr: string;
}

export class CT_TextBlipBullet {
	Blip: Array<CT_Blip>;
}

export class CT_TextNoBullet {
}

export class EG_TextBullet {
	BuNone: CT_TextNoBullet;
	BuAutoNum: CT_TextAutonumberBullet;
	BuChar: CT_TextCharBullet;
	BuBlip: CT_TextBlipBullet;
}

export class ST_TextPoint {
	ST_TextPointUnqualified: ST_TextPointUnqualified;
	ST_UniversalMeasure: string;
}

export type ST_TextPointUnqualified = number;

export type ST_TextNonNegativePoint = number;

export type ST_TextFontSize = number;

export type ST_TextTypeface = string;

export type ST_PitchFamily = Any;

export class CT_TextFont {
	TypefaceAttr: string;
	PanoseAttr: Array<any> | null;
	PitchFamilyAttr: Any | null;
	CharsetAttr: Any | null;
}

export type ST_TextUnderlineType = string;

export class CT_TextUnderlineLineFollowText {
}

export class CT_TextUnderlineFillFollowText {
}

export class CT_TextUnderlineFillGroupWrapper {
	EG_FillProperties: Array<EG_FillProperties>;
}

export class EG_TextUnderlineLine {
	ULnTx: CT_TextUnderlineLineFollowText;
	ULn: Array<CT_LineProperties>;
}

export class EG_TextUnderlineFill {
	UFillTx: CT_TextUnderlineFillFollowText;
	UFill: CT_TextUnderlineFillGroupWrapper;
}

export type ST_TextStrikeType = string;

export type ST_TextCapsType = string;

export class CT_TextCharacterProperties {
	KumimojiAttr: boolean | null;
	LangAttr: string | null;
	AltLangAttr: string | null;
	SzAttr: number | null;
	BAttr: boolean | null;
	IAttr: boolean | null;
	UAttr: string | null;
	StrikeAttr: string | null;
	KernAttr: number | null;
	CapAttr: string | null;
	SpcAttr: ST_TextPoint | null;
	NormalizeHAttr: boolean | null;
	BaselineAttr: ST_Percentage | null;
	NoProofAttr: boolean | null;
	DirtyAttr: boolean | null;
	ErrAttr: boolean | null;
	SmtCleanAttr: boolean | null;
	SmtIdAttr: number | null;
	BmkAttr: string | null;
	EG_FillProperties: Array<EG_FillProperties>;
	EG_EffectProperties: Array<EG_EffectProperties>;
	EG_TextUnderlineLine: Array<EG_TextUnderlineLine>;
	EG_TextUnderlineFill: Array<EG_TextUnderlineFill>;
	Ln: Array<CT_LineProperties>;
	Highlight: Array<CT_Color>;
	Latin: Array<CT_TextFont>;
	Ea: Array<CT_TextFont>;
	Cs: Array<CT_TextFont>;
	Sym: Array<CT_TextFont>;
	HlinkClick: Array<CT_Hyperlink>;
	HlinkMouseOver: Array<CT_Hyperlink>;
	Rtl: Array<CT_Boolean>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_Boolean {
	ValAttr: ST_OnOff | null;
}

export type ST_TextSpacingPoint = number;

export class ST_TextSpacingPercentOrPercentString {
	ST_Percentage: string;
}

export class CT_TextSpacingPercent {
	ValAttr: ST_TextSpacingPercentOrPercentString;
}

export class CT_TextSpacingPoint {
	ValAttr: number;
}

export type ST_TextMargin = number;

export type ST_TextIndent = number;

export type ST_TextTabAlignType = string;

export class CT_TextTabStop {
	PosAttr: ST_Coordinate32 | null;
	AlgnAttr: string | null;
}

export class CT_TextTabStopList {
	Tab: Array<CT_TextTabStop>;
}

export class CT_TextLineBreak {
	RPr: Array<CT_TextCharacterProperties>;
}

export class CT_TextSpacing {
	SpcPct: Array<CT_TextSpacingPercent>;
	SpcPts: Array<CT_TextSpacingPoint>;
}

export type ST_TextAlignType = string;

export type ST_TextFontAlignType = string;

export type ST_TextIndentLevelType = number;

export class CT_TextParagraphProperties {
	MarLAttr: number | null;
	MarRAttr: number | null;
	LvlAttr: number | null;
	IndentAttr: number | null;
	AlgnAttr: string | null;
	DefTabSzAttr: ST_Coordinate32 | null;
	RtlAttr: boolean | null;
	EaLnBrkAttr: boolean | null;
	FontAlgnAttr: string | null;
	LatinLnBrkAttr: boolean | null;
	HangingPunctAttr: boolean | null;
	EG_TextBulletColor: Array<EG_TextBulletColor>;
	EG_TextBulletSize: Array<EG_TextBulletSize>;
	EG_TextBulletTypeface: Array<EG_TextBulletTypeface>;
	EG_TextBullet: Array<EG_TextBullet>;
	LnSpc: Array<CT_TextSpacing>;
	SpcBef: Array<CT_TextSpacing>;
	SpcAft: Array<CT_TextSpacing>;
	TabLst: Array<CT_TextTabStopList>;
	DefRPr: Array<CT_TextCharacterProperties>;
	ExtLst: Array<CT_OfficeArtExtensionList>;
}

export class CT_TextField {
	IdAttr: string;
	TypeAttr: string | null;
	RPr: Array<CT_TextCharacterProperties>;
	PPr: Array<CT_TextParagraphProperties>;
	T: Array<string>;
}

export class EG_TextRun {
	R: CT_RegularTextRun;
	Br: CT_TextLineBreak;
	Fld: CT_TextField;
}

export class CT_RegularTextRun {
	RPr: Array<CT_TextCharacterProperties>;
	T: Array<string>;
}
