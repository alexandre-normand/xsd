// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

import (
	"time"
)

// STVectorBaseType ...
type STVectorBaseType string

// STArrayBaseType ...
type STArrayBaseType string

// STCy ...
type STCy string

// STError ...
type STError string

// CTEmpty ...
type CTEmpty struct {
}

// CTNull ...
type CTNull struct {
}

// CTVector ...
type CTVector struct {
	BaseTypeAttr string     `xml:"baseType,attr"`
	SizeAttr     *Uint32    `xml:"size,attr"`
	Variant      *CTVariant `xml:"variant"`
	I1           byte       `xml:"i1"`
	I2           *Int16     `xml:"i2"`
	I4           int        `xml:"i4"`
	I8           int64      `xml:"i8"`
	Ui1          byte       `xml:"ui1"`
	Ui2          *Uint16    `xml:"ui2"`
	Ui4          *Uint32    `xml:"ui4"`
	Ui8          uint64     `xml:"ui8"`
	R4           *Float     `xml:"r4"`
	R8           float64    `xml:"r8"`
	Lpstr        string     `xml:"lpstr"`
	Lpwstr       string     `xml:"lpwstr"`
	Bstr         string     `xml:"bstr"`
	Date         time.Time  `xml:"date"`
	Filetime     time.Time  `xml:"filetime"`
	Bool         bool       `xml:"bool"`
	Cy           string     `xml:"cy"`
	Error        string     `xml:"error"`
	Clsid        string     `xml:"clsid"`
}

// CTArray ...
type CTArray struct {
	LBoundsAttr  int        `xml:"lBounds,attr"`
	UBoundsAttr  int        `xml:"uBounds,attr"`
	BaseTypeAttr string     `xml:"baseType,attr"`
	Variant      *CTVariant `xml:"variant"`
	I1           byte       `xml:"i1"`
	I2           *Int16     `xml:"i2"`
	I4           int        `xml:"i4"`
	Int          int        `xml:"int"`
	Ui1          byte       `xml:"ui1"`
	Ui2          *Uint16    `xml:"ui2"`
	Ui4          *Uint32    `xml:"ui4"`
	Uint         *Uint32    `xml:"uint"`
	R4           *Float     `xml:"r4"`
	R8           float64    `xml:"r8"`
	Decimal      float64    `xml:"decimal"`
	Bstr         string     `xml:"bstr"`
	Date         time.Time  `xml:"date"`
	Bool         bool       `xml:"bool"`
	Error        string     `xml:"error"`
	Cy           string     `xml:"cy"`
}

// CTVariant ...
type CTVariant struct {
	Variant  *CTVariant `xml:"variant"`
	Vector   *CTVector  `xml:"vector"`
	Array    *CTArray   `xml:"array"`
	Blob     []byte     `xml:"blob"`
	Oblob    []byte     `xml:"oblob"`
	Empty    *CTEmpty   `xml:"empty"`
	Null     *CTNull    `xml:"null"`
	I1       byte       `xml:"i1"`
	I2       *Int16     `xml:"i2"`
	I4       int        `xml:"i4"`
	I8       int64      `xml:"i8"`
	Int      int        `xml:"int"`
	Ui1      byte       `xml:"ui1"`
	Ui2      *Uint16    `xml:"ui2"`
	Ui4      *Uint32    `xml:"ui4"`
	Ui8      uint64     `xml:"ui8"`
	Uint     *Uint32    `xml:"uint"`
	R4       *Float     `xml:"r4"`
	R8       float64    `xml:"r8"`
	Decimal  float64    `xml:"decimal"`
	Lpstr    string     `xml:"lpstr"`
	Lpwstr   string     `xml:"lpwstr"`
	Bstr     string     `xml:"bstr"`
	Date     time.Time  `xml:"date"`
	Filetime time.Time  `xml:"filetime"`
	Bool     bool       `xml:"bool"`
	Cy       string     `xml:"cy"`
	Error    string     `xml:"error"`
	Stream   []byte     `xml:"stream"`
	Ostream  []byte     `xml:"ostream"`
	Storage  []byte     `xml:"storage"`
	Ostorage []byte     `xml:"ostorage"`
	Vstream  *CTVstream `xml:"vstream"`
	Clsid    string     `xml:"clsid"`
}

// CTVstream ...
type CTVstream struct {
	VersionAttr string `xml:"version,attr,omitempty"`
}

// Variant ...
type Variant *CTVariant

// Vector ...
type Vector *CTVector

// Array ...
type Array *CTArray

// Blob ...
type Blob []byte

// Oblob ...
type Oblob []byte

// Empty ...
type Empty *CTEmpty

// Null ...
type Null *CTNull

// I1 ...
type I1 byte

// I2 ...
type I2 *Int16

// I4 ...
type I4 int

// I8 ...
type I8 int64

// Int ...
type Int int

// Ui1 ...
type Ui1 byte

// Ui2 ...
type Ui2 *Uint16

// Ui4 ...
type Ui4 *Uint32

// Ui8 ...
type Ui8 uint64

// Uint ...
type Uint *Uint32

// R4 ...
type R4 *Float

// R8 ...
type R8 float64

// Decimal ...
type Decimal float64

// Lpstr ...
type Lpstr string

// Lpwstr ...
type Lpwstr string

// Bstr ...
type Bstr string

// Date ...
type Date time.Time

// Filetime ...
type Filetime time.Time

// Bool ...
type Bool bool

// Cy ...
type Cy string

// Error ...
type Error string

// Stream ...
type Stream []byte

// Ostream ...
type Ostream []byte

// Storage ...
type Storage []byte

// Ostorage ...
type Ostorage []byte

// Vstream ...
type Vstream *CTVstream

// Clsid ...
type Clsid string
