// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Project ...
type Project *Model

// Licenses ...
type Licenses struct {
	XMLName xml.Name   `xml:"licenses"`
	License []*License `xml:"license"`
}

// Developers ...
type Developers struct {
	XMLName   xml.Name     `xml:"developers"`
	Developer []*Developer `xml:"developer"`
}

// Contributors ...
type Contributors struct {
	XMLName     xml.Name       `xml:"contributors"`
	Contributor []*Contributor `xml:"contributor"`
}

// MailingLists ...
type MailingLists struct {
	XMLName     xml.Name       `xml:"mailingLists"`
	MailingList []*MailingList `xml:"mailingList"`
}

// Modules ...
type Modules struct {
	XMLName xml.Name `xml:"modules"`
	Module  []string `xml:"module"`
}

// Properties ...
type Properties struct {
	XMLName xml.Name `xml:"properties"`
}

// Dependencies ...
type Dependencies struct {
	XMLName    xml.Name      `xml:"dependencies"`
	Dependency []*Dependency `xml:"dependency"`
}

// Repositories ...
type Repositories struct {
	XMLName    xml.Name      `xml:"repositories"`
	Repository []*Repository `xml:"repository"`
}

// PluginRepositories ...
type PluginRepositories struct {
	XMLName          xml.Name      `xml:"pluginRepositories"`
	PluginRepository []*Repository `xml:"pluginRepository"`
}

// Reports ...
type Reports struct {
	XMLName xml.Name `xml:"reports"`
}

// Profiles ...
type Profiles struct {
	XMLName xml.Name   `xml:"profiles"`
	Profile []*Profile `xml:"profile"`
}

// Model ...
type Model struct {
	ChildProjectUrlInheritAppendPathAttr string                  `xml:"child.project.url.inherit.append.path,attr,omitempty"`
	ModelVersion                         string                  `xml:"modelVersion"`
	Parent                               *Parent                 `xml:"parent"`
	GroupId                              string                  `xml:"groupId"`
	ArtifactId                           string                  `xml:"artifactId"`
	Version                              string                  `xml:"version"`
	Packaging                            string                  `xml:"packaging"`
	Name                                 string                  `xml:"name"`
	Description                          string                  `xml:"description"`
	Url                                  string                  `xml:"url"`
	InceptionYear                        string                  `xml:"inceptionYear"`
	Organization                         *Organization           `xml:"organization"`
	Licenses                             *Licenses               `xml:"licenses"`
	Developers                           *Developers             `xml:"developers"`
	Contributors                         *Contributors           `xml:"contributors"`
	MailingLists                         *MailingLists           `xml:"mailingLists"`
	Prerequisites                        *Prerequisites          `xml:"prerequisites"`
	Modules                              *Modules                `xml:"modules"`
	Scm                                  *Scm                    `xml:"scm"`
	IssueManagement                      *IssueManagement        `xml:"issueManagement"`
	CiManagement                         *CiManagement           `xml:"ciManagement"`
	DistributionManagement               *DistributionManagement `xml:"distributionManagement"`
	Properties                           *Properties             `xml:"properties"`
	DependencyManagement                 *DependencyManagement   `xml:"dependencyManagement"`
	Dependencies                         *Dependencies           `xml:"dependencies"`
	Repositories                         *Repositories           `xml:"repositories"`
	PluginRepositories                   *PluginRepositories     `xml:"pluginRepositories"`
	Build                                *Build                  `xml:"build"`
	Reports                              *Reports                `xml:"reports"`
	Reporting                            *Reporting              `xml:"reporting"`
	Profiles                             *Profiles               `xml:"profiles"`
}

// License ...
type License struct {
	Name         string `xml:"name"`
	Url          string `xml:"url"`
	Distribution string `xml:"distribution"`
	Comments     string `xml:"comments"`
}

// Notifiers ...
type Notifiers struct {
	XMLName  xml.Name    `xml:"notifiers"`
	Notifier []*Notifier `xml:"notifier"`
}

// CiManagement ...
type CiManagement struct {
	System    string     `xml:"system"`
	Url       string     `xml:"url"`
	Notifiers *Notifiers `xml:"notifiers"`
}

// Configuration ...
type Configuration struct {
	XMLName xml.Name `xml:"configuration"`
}

// Notifier ...
type Notifier struct {
	Type          string         `xml:"type"`
	SendOnError   bool           `xml:"sendOnError"`
	SendOnFailure bool           `xml:"sendOnFailure"`
	SendOnSuccess bool           `xml:"sendOnSuccess"`
	SendOnWarning bool           `xml:"sendOnWarning"`
	Address       string         `xml:"address"`
	Configuration *Configuration `xml:"configuration"`
}

// Scm ...
type Scm struct {
	ChildScmConnectionInheritAppendPathAttr          string `xml:"child.scm.connection.inherit.append.path,attr,omitempty"`
	ChildScmDeveloperConnectionInheritAppendPathAttr string `xml:"child.scm.developerConnection.inherit.append.path,attr,omitempty"`
	ChildScmUrlInheritAppendPathAttr                 string `xml:"child.scm.url.inherit.append.path,attr,omitempty"`
	Connection                                       string `xml:"connection"`
	DeveloperConnection                              string `xml:"developerConnection"`
	Tag                                              string `xml:"tag"`
	Url                                              string `xml:"url"`
}

// IssueManagement ...
type IssueManagement struct {
	System string `xml:"system"`
	Url    string `xml:"url"`
}

// DependencyManagement ...
type DependencyManagement struct {
	Dependencies *Dependencies `xml:"dependencies"`
}

// Exclusions ...
type Exclusions struct {
	XMLName   xml.Name     `xml:"exclusions"`
	Exclusion []*Exclusion `xml:"exclusion"`
}

// Dependency ...
type Dependency struct {
	GroupId    string      `xml:"groupId"`
	ArtifactId string      `xml:"artifactId"`
	Version    string      `xml:"version"`
	Type       string      `xml:"type"`
	Classifier string      `xml:"classifier"`
	Scope      string      `xml:"scope"`
	SystemPath string      `xml:"systemPath"`
	Exclusions *Exclusions `xml:"exclusions"`
	Optional   string      `xml:"optional"`
}

// Exclusion ...
type Exclusion struct {
	ArtifactId string `xml:"artifactId"`
	GroupId    string `xml:"groupId"`
}

// Parent ...
type Parent struct {
	GroupId      string `xml:"groupId"`
	ArtifactId   string `xml:"artifactId"`
	Version      string `xml:"version"`
	RelativePath string `xml:"relativePath"`
}

// Roles ...
type Roles struct {
	XMLName xml.Name `xml:"roles"`
	Role    []string `xml:"role"`
}

// Developer ...
type Developer struct {
	Id              string      `xml:"id"`
	Name            string      `xml:"name"`
	Email           string      `xml:"email"`
	Url             string      `xml:"url"`
	Organization    string      `xml:"organization"`
	OrganizationUrl string      `xml:"organizationUrl"`
	Roles           *Roles      `xml:"roles"`
	Timezone        string      `xml:"timezone"`
	Properties      *Properties `xml:"properties"`
}

// OtherArchives ...
type OtherArchives struct {
	XMLName      xml.Name `xml:"otherArchives"`
	OtherArchive []string `xml:"otherArchive"`
}

// MailingList ...
type MailingList struct {
	Name          string         `xml:"name"`
	Subscribe     string         `xml:"subscribe"`
	Unsubscribe   string         `xml:"unsubscribe"`
	Post          string         `xml:"post"`
	Archive       string         `xml:"archive"`
	OtherArchives *OtherArchives `xml:"otherArchives"`
}

// Contributor ...
type Contributor struct {
	Name            string      `xml:"name"`
	Email           string      `xml:"email"`
	Url             string      `xml:"url"`
	Organization    string      `xml:"organization"`
	OrganizationUrl string      `xml:"organizationUrl"`
	Roles           *Roles      `xml:"roles"`
	Timezone        string      `xml:"timezone"`
	Properties      *Properties `xml:"properties"`
}

// Organization ...
type Organization struct {
	Name string `xml:"name"`
	Url  string `xml:"url"`
}

// DistributionManagement ...
type DistributionManagement struct {
	Repository         *DeploymentRepository `xml:"repository"`
	SnapshotRepository *DeploymentRepository `xml:"snapshotRepository"`
	Site               *Site                 `xml:"site"`
	DownloadUrl        string                `xml:"downloadUrl"`
	Relocation         *Relocation           `xml:"relocation"`
	Status             string                `xml:"status"`
}

// DeploymentRepository ...
type DeploymentRepository struct {
	UniqueVersion bool              `xml:"uniqueVersion"`
	Releases      *RepositoryPolicy `xml:"releases"`
	Snapshots     *RepositoryPolicy `xml:"snapshots"`
	Id            string            `xml:"id"`
	Name          string            `xml:"name"`
	Url           string            `xml:"url"`
	Layout        string            `xml:"layout"`
}

// RepositoryPolicy ...
type RepositoryPolicy struct {
	Enabled        string `xml:"enabled"`
	UpdatePolicy   string `xml:"updatePolicy"`
	ChecksumPolicy string `xml:"checksumPolicy"`
}

// Relocation ...
type Relocation struct {
	GroupId    string `xml:"groupId"`
	ArtifactId string `xml:"artifactId"`
	Version    string `xml:"version"`
	Message    string `xml:"message"`
}

// Site ...
type Site struct {
	ChildSiteUrlInheritAppendPathAttr string `xml:"child.site.url.inherit.append.path,attr,omitempty"`
	Id                                string `xml:"id"`
	Name                              string `xml:"name"`
	Url                               string `xml:"url"`
}

// Plugins ...
type Plugins struct {
	XMLName xml.Name        `xml:"plugins"`
	Plugin  []*ReportPlugin `xml:"plugin"`
}

// Reporting ...
type Reporting struct {
	ExcludeDefaults string   `xml:"excludeDefaults"`
	OutputDirectory string   `xml:"outputDirectory"`
	Plugins         *Plugins `xml:"plugins"`
}

// ReportSets ...
type ReportSets struct {
	XMLName   xml.Name     `xml:"reportSets"`
	ReportSet []*ReportSet `xml:"reportSet"`
}

// ReportPlugin ...
type ReportPlugin struct {
	GroupId       string         `xml:"groupId"`
	ArtifactId    string         `xml:"artifactId"`
	Version       string         `xml:"version"`
	ReportSets    *ReportSets    `xml:"reportSets"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// ReportSet ...
type ReportSet struct {
	Id            string         `xml:"id"`
	Reports       *Reports       `xml:"reports"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// Profile ...
type Profile struct {
	Id                     string                  `xml:"id"`
	Activation             *Activation             `xml:"activation"`
	Build                  *BuildBase              `xml:"build"`
	Modules                *Modules                `xml:"modules"`
	DistributionManagement *DistributionManagement `xml:"distributionManagement"`
	Properties             *Properties             `xml:"properties"`
	DependencyManagement   *DependencyManagement   `xml:"dependencyManagement"`
	Dependencies           *Dependencies           `xml:"dependencies"`
	Repositories           *Repositories           `xml:"repositories"`
	PluginRepositories     *PluginRepositories     `xml:"pluginRepositories"`
	Reports                *Reports                `xml:"reports"`
	Reporting              *Reporting              `xml:"reporting"`
}

// Activation ...
type Activation struct {
	ActiveByDefault bool                `xml:"activeByDefault"`
	Jdk             string              `xml:"jdk"`
	Os              *ActivationOS       `xml:"os"`
	Property        *ActivationProperty `xml:"property"`
	File            *ActivationFile     `xml:"file"`
}

// ActivationProperty ...
type ActivationProperty struct {
	Name  string `xml:"name"`
	Value string `xml:"value"`
}

// ActivationFile ...
type ActivationFile struct {
	Missing string `xml:"missing"`
	Exists  string `xml:"exists"`
}

// ActivationOS ...
type ActivationOS struct {
	Name    string `xml:"name"`
	Family  string `xml:"family"`
	Arch    string `xml:"arch"`
	Version string `xml:"version"`
}

// Repository ...
type Repository struct {
	Releases  *RepositoryPolicy `xml:"releases"`
	Snapshots *RepositoryPolicy `xml:"snapshots"`
	Id        string            `xml:"id"`
	Name      string            `xml:"name"`
	Url       string            `xml:"url"`
	Layout    string            `xml:"layout"`
}

// Resources ...
type Resources struct {
	XMLName  xml.Name    `xml:"resources"`
	Resource []*Resource `xml:"resource"`
}

// TestResources ...
type TestResources struct {
	XMLName      xml.Name    `xml:"testResources"`
	TestResource []*Resource `xml:"testResource"`
}

// Filters ...
type Filters struct {
	XMLName xml.Name `xml:"filters"`
	Filter  []string `xml:"filter"`
}

// BuildBase ...
type BuildBase struct {
	DefaultGoal      string            `xml:"defaultGoal"`
	Resources        *Resources        `xml:"resources"`
	TestResources    *TestResources    `xml:"testResources"`
	Directory        string            `xml:"directory"`
	FinalName        string            `xml:"finalName"`
	Filters          *Filters          `xml:"filters"`
	PluginManagement *PluginManagement `xml:"pluginManagement"`
	Plugins          *Plugins          `xml:"plugins"`
}

// Executions ...
type Executions struct {
	XMLName   xml.Name           `xml:"executions"`
	Execution []*PluginExecution `xml:"execution"`
}

// Goals ...
type Goals struct {
	XMLName xml.Name `xml:"goals"`
}

// Plugin ...
type Plugin struct {
	GroupId       string         `xml:"groupId"`
	ArtifactId    string         `xml:"artifactId"`
	Version       string         `xml:"version"`
	Extensions    string         `xml:"extensions"`
	Executions    *Executions    `xml:"executions"`
	Dependencies  *Dependencies  `xml:"dependencies"`
	Goals         *Goals         `xml:"goals"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// PluginExecution ...
type PluginExecution struct {
	Id            string         `xml:"id"`
	Phase         string         `xml:"phase"`
	Goals         *Goals         `xml:"goals"`
	Inherited     string         `xml:"inherited"`
	Configuration *Configuration `xml:"configuration"`
}

// Includes ...
type Includes struct {
	XMLName xml.Name `xml:"includes"`
	Include []string `xml:"include"`
}

// Excludes ...
type Excludes struct {
	XMLName xml.Name `xml:"excludes"`
	Exclude []string `xml:"exclude"`
}

// Resource ...
type Resource struct {
	TargetPath string    `xml:"targetPath"`
	Filtering  string    `xml:"filtering"`
	Directory  string    `xml:"directory"`
	Includes   *Includes `xml:"includes"`
	Excludes   *Excludes `xml:"excludes"`
}

// PluginManagement ...
type PluginManagement struct {
	Plugins *Plugins `xml:"plugins"`
}

// Prerequisites ...
type Prerequisites struct {
	Maven string `xml:"maven"`
}

// Extensions ...
type Extensions struct {
	XMLName   xml.Name     `xml:"extensions"`
	Extension []*Extension `xml:"extension"`
}

// Build ...
type Build struct {
	SourceDirectory       string            `xml:"sourceDirectory"`
	ScriptSourceDirectory string            `xml:"scriptSourceDirectory"`
	TestSourceDirectory   string            `xml:"testSourceDirectory"`
	OutputDirectory       string            `xml:"outputDirectory"`
	TestOutputDirectory   string            `xml:"testOutputDirectory"`
	Extensions            *Extensions       `xml:"extensions"`
	DefaultGoal           string            `xml:"defaultGoal"`
	Resources             *Resources        `xml:"resources"`
	TestResources         *TestResources    `xml:"testResources"`
	Directory             string            `xml:"directory"`
	FinalName             string            `xml:"finalName"`
	Filters               *Filters          `xml:"filters"`
	PluginManagement      *PluginManagement `xml:"pluginManagement"`
	Plugins               *Plugins          `xml:"plugins"`
}

// Extension ...
type Extension struct {
	GroupId    string `xml:"groupId"`
	ArtifactId string `xml:"artifactId"`
	Version    string `xml:"version"`
}
