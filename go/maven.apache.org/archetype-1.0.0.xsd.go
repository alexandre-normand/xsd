// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Archetype is Describes the assembly layout and packaging.
type Archetype *ArchetypeModel

// Sources ...
type Sources struct {
	XMLName xml.Name  `xml:"sources"`
	Source  []*Source `xml:"source"`
}

// Resources ...
type Resources struct {
	XMLName  xml.Name    `xml:"resources"`
	Resource []*Resource `xml:"resource"`
}

// TestSources ...
type TestSources struct {
	XMLName xml.Name  `xml:"testSources"`
	Source  []*Source `xml:"source"`
}

// TestResources ...
type TestResources struct {
	XMLName  xml.Name    `xml:"testResources"`
	Resource []*Resource `xml:"resource"`
}

// SiteResources ...
type SiteResources struct {
	XMLName  xml.Name    `xml:"siteResources"`
	Resource []*Resource `xml:"resource"`
}

// ArchetypeModel is Setting this option to <code>true</code> makes it possible to run the
//             <code>archetype:create</code> even on existing projects.
type ArchetypeModel struct {
	Id            string         `xml:"id"`
	AllowPartial  bool           `xml:"allowPartial"`
	Sources       *Sources       `xml:"sources"`
	Resources     *Resources     `xml:"resources"`
	TestSources   *TestSources   `xml:"testSources"`
	TestResources *TestResources `xml:"testResources"`
	SiteResources *SiteResources `xml:"siteResources"`
}

// Source is Describes a source file. Note that source files are always filtered, unlike resources that
//         can be non-filtered.
type Source struct {
	EncodingAttr string `xml:"encoding,attr,omitempty"`
	Value        string `xml:",chardata"`
}

// Resource is Describes a resource file.
type Resource struct {
	EncodingAttr string `xml:"encoding,attr,omitempty"`
	FilteredAttr bool   `xml:"filtered,attr,omitempty"`
	Value        string `xml:",chardata"`
}
