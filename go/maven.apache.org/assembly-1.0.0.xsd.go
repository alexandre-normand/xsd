// Code generated by xgen. DO NOT EDIT.

package schema

import (
	"encoding/xml"
)

// Assembly ...
type Assembly *Assembly

// Formats ...
type Formats struct {
	XMLName xml.Name `xml:"formats"`
	Format  []string `xml:"format"`
}

// ModuleSets ...
type ModuleSets struct {
	XMLName   xml.Name     `xml:"moduleSets"`
	ModuleSet []*ModuleSet `xml:"moduleSet"`
}

// FileSets ...
type FileSets struct {
	XMLName xml.Name   `xml:"fileSets"`
	FileSet []*FileSet `xml:"fileSet"`
}

// Files ...
type Files struct {
	XMLName xml.Name    `xml:"files"`
	File    []*FileItem `xml:"file"`
}

// DependencySets ...
type DependencySets struct {
	XMLName       xml.Name         `xml:"dependencySets"`
	DependencySet []*DependencySet `xml:"dependencySet"`
}

// Repositories ...
type Repositories struct {
	XMLName    xml.Name      `xml:"repositories"`
	Repository []*Repository `xml:"repository"`
}

// ComponentDescriptors ...
type ComponentDescriptors struct {
	XMLName             xml.Name `xml:"componentDescriptors"`
	ComponentDescriptor []string `xml:"componentDescriptor"`
}

// Assembly ...
type Assembly struct {
	Id                   string                `xml:"id"`
	Formats              *Formats              `xml:"formats"`
	IncludeBaseDirectory bool                  `xml:"includeBaseDirectory"`
	IncludeSiteDirectory bool                  `xml:"includeSiteDirectory"`
	ModuleSets           *ModuleSets           `xml:"moduleSets"`
	FileSets             *FileSets             `xml:"fileSets"`
	Files                *Files                `xml:"files"`
	DependencySets       *DependencySets       `xml:"dependencySets"`
	Repositories         *Repositories         `xml:"repositories"`
	ComponentDescriptors *ComponentDescriptors `xml:"componentDescriptors"`
}

// GroupVersionAlignments ...
type GroupVersionAlignments struct {
	XMLName               xml.Name                 `xml:"groupVersionAlignments"`
	GroupVersionAlignment []*GroupVersionAlignment `xml:"groupVersionAlignment"`
}

// Includes ...
type Includes struct {
	XMLName xml.Name `xml:"includes"`
	Include []string `xml:"include"`
}

// Excludes ...
type Excludes struct {
	XMLName xml.Name `xml:"excludes"`
	Exclude []string `xml:"exclude"`
}

// Repository ...
type Repository struct {
	IncludeMetadata        bool                    `xml:"includeMetadata"`
	GroupVersionAlignments *GroupVersionAlignments `xml:"groupVersionAlignments"`
	OutputDirectory        string                  `xml:"outputDirectory"`
	Includes               *Includes               `xml:"includes"`
	Excludes               *Excludes               `xml:"excludes"`
	FileMode               string                  `xml:"fileMode"`
	DirectoryMode          string                  `xml:"directoryMode"`
}

// GroupVersionAlignment ...
type GroupVersionAlignment struct {
	Id       string    `xml:"id"`
	Version  string    `xml:"version"`
	Excludes *Excludes `xml:"excludes"`
}

// DependencySet ...
type DependencySet struct {
	OutputFileNameMapping string    `xml:"outputFileNameMapping"`
	Unpack                bool      `xml:"unpack"`
	Scope                 string    `xml:"scope"`
	OutputDirectory       string    `xml:"outputDirectory"`
	Includes              *Includes `xml:"includes"`
	Excludes              *Excludes `xml:"excludes"`
	FileMode              string    `xml:"fileMode"`
	DirectoryMode         string    `xml:"directoryMode"`
}

// ModuleSet ...
type ModuleSet struct {
	Includes *Includes       `xml:"includes"`
	Excludes *Excludes       `xml:"excludes"`
	Sources  *ModuleSources  `xml:"sources"`
	Binaries *ModuleBinaries `xml:"binaries"`
}

// ModuleSources ...
type ModuleSources struct {
	OutputDirectory string    `xml:"outputDirectory"`
	Includes        *Includes `xml:"includes"`
	Excludes        *Excludes `xml:"excludes"`
	FileMode        string    `xml:"fileMode"`
	DirectoryMode   string    `xml:"directoryMode"`
}

// ModuleBinaries ...
type ModuleBinaries struct {
	IncludeDependencies   bool      `xml:"includeDependencies"`
	Unpack                bool      `xml:"unpack"`
	OutputFileNameMapping string    `xml:"outputFileNameMapping"`
	OutputDirectory       string    `xml:"outputDirectory"`
	Includes              *Includes `xml:"includes"`
	Excludes              *Excludes `xml:"excludes"`
	FileMode              string    `xml:"fileMode"`
	DirectoryMode         string    `xml:"directoryMode"`
}

// FileItem ...
type FileItem struct {
	Source          string `xml:"source"`
	OutputDirectory string `xml:"outputDirectory"`
	DestName        string `xml:"destName"`
	FileMode        string `xml:"fileMode"`
	LineEnding      string `xml:"lineEnding"`
	Filtered        bool   `xml:"filtered"`
}

// FileSet ...
type FileSet struct {
	Directory       string    `xml:"directory"`
	LineEnding      string    `xml:"lineEnding"`
	OutputDirectory string    `xml:"outputDirectory"`
	Includes        *Includes `xml:"includes"`
	Excludes        *Excludes `xml:"excludes"`
	FileMode        string    `xml:"fileMode"`
	DirectoryMode   string    `xml:"directoryMode"`
}
