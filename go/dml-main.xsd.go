// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

// CTAudioFile ...
type CTAudioFile struct {
	RLinkAttr       string                      `xml:"r:link,attr"`
	ContentTypeAttr string                      `xml:"contentType,attr,omitempty"`
	ExtLst          []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTVideoFile ...
type CTVideoFile struct {
	RLinkAttr       string                      `xml:"r:link,attr"`
	ContentTypeAttr string                      `xml:"contentType,attr,omitempty"`
	ExtLst          []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTQuickTimeFile ...
type CTQuickTimeFile struct {
	RLinkAttr string                      `xml:"r:link,attr"`
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTAudioCDTime ...
type CTAudioCDTime struct {
	TrackAttr byte    `xml:"track,attr"`
	TimeAttr  *Uint32 `xml:"time,attr,omitempty"`
}

// CTAudioCD ...
type CTAudioCD struct {
	St     []*CTAudioCDTime            `xml:"st"`
	End    []*CTAudioCDTime            `xml:"end"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// EGMedia ...
type EGMedia struct {
	AudioCd       *CTAudioCD
	WavAudioFile  *CTEmbeddedWAVAudioFile
	AudioFile     *CTAudioFile
	VideoFile     *CTVideoFile
	QuickTimeFile *CTQuickTimeFile
}

// VideoFile ...
type VideoFile *CTVideoFile

// STStyleMatrixColumnIndex ...
type STStyleMatrixColumnIndex *Uint32

// STFontCollectionIndex ...
type STFontCollectionIndex string

// STColorSchemeIndex ...
type STColorSchemeIndex string

// CTColorScheme ...
type CTColorScheme struct {
	NameAttr string                      `xml:"name,attr"`
	Dk1      []*CTColor                  `xml:"dk1"`
	Lt1      []*CTColor                  `xml:"lt1"`
	Dk2      []*CTColor                  `xml:"dk2"`
	Lt2      []*CTColor                  `xml:"lt2"`
	Accent1  []*CTColor                  `xml:"accent1"`
	Accent2  []*CTColor                  `xml:"accent2"`
	Accent3  []*CTColor                  `xml:"accent3"`
	Accent4  []*CTColor                  `xml:"accent4"`
	Accent5  []*CTColor                  `xml:"accent5"`
	Accent6  []*CTColor                  `xml:"accent6"`
	Hlink    []*CTColor                  `xml:"hlink"`
	FolHlink []*CTColor                  `xml:"folHlink"`
	ExtLst   []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTCustomColor ...
type CTCustomColor struct {
	NameAttr      string `xml:"name,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTSupplementalFont ...
type CTSupplementalFont struct {
	ScriptAttr   string `xml:"script,attr"`
	TypefaceAttr string `xml:"typeface,attr"`
}

// CTCustomColorList ...
type CTCustomColorList struct {
	CustClr []*CTCustomColor `xml:"custClr"`
}

// CTFontCollection ...
type CTFontCollection struct {
	Latin  []*CTTextFont               `xml:"latin"`
	Ea     []*CTTextFont               `xml:"ea"`
	Cs     []*CTTextFont               `xml:"cs"`
	Font   []*CTSupplementalFont       `xml:"font"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTEffectStyleItem ...
type CTEffectStyleItem struct {
	EGEffectProperties []*EGEffectProperties
	Scene3d            []*CTScene3D `xml:"scene3d"`
	Sp3d               []*CTShape3D `xml:"sp3d"`
}

// CTFontScheme ...
type CTFontScheme struct {
	NameAttr  string                      `xml:"name,attr"`
	MajorFont []*CTFontCollection         `xml:"majorFont"`
	MinorFont []*CTFontCollection         `xml:"minorFont"`
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTFillStyleList ...
type CTFillStyleList struct {
	EGFillProperties []*EGFillProperties
}

// CTLineStyleList ...
type CTLineStyleList struct {
	Ln []*CTLineProperties `xml:"ln"`
}

// CTEffectStyleList ...
type CTEffectStyleList struct {
	EffectStyle []*CTEffectStyleItem `xml:"effectStyle"`
}

// CTBackgroundFillStyleList ...
type CTBackgroundFillStyleList struct {
	EGFillProperties []*EGFillProperties
}

// CTStyleMatrix ...
type CTStyleMatrix struct {
	NameAttr       string                       `xml:"name,attr,omitempty"`
	FillStyleLst   []*CTFillStyleList           `xml:"fillStyleLst"`
	LnStyleLst     []*CTLineStyleList           `xml:"lnStyleLst"`
	EffectStyleLst []*CTEffectStyleList         `xml:"effectStyleLst"`
	BgFillStyleLst []*CTBackgroundFillStyleList `xml:"bgFillStyleLst"`
}

// CTBaseStyles ...
type CTBaseStyles struct {
	ClrScheme  []*CTColorScheme            `xml:"clrScheme"`
	FontScheme []*CTFontScheme             `xml:"fontScheme"`
	FmtScheme  []*CTStyleMatrix            `xml:"fmtScheme"`
	ExtLst     []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTOfficeArtExtension ...
type CTOfficeArtExtension struct {
	UriAttr string `xml:"uri,attr"`
}

// STCoordinate ...
type STCoordinate struct {
	STUniversalMeasure      string
	STCoordinateUnqualified *STCoordinateUnqualified
}

// STCoordinateUnqualified ...
type STCoordinateUnqualified int64

// STCoordinate32 ...
type STCoordinate32 struct {
	STCoordinate32Unqualified *STCoordinate32Unqualified
	STUniversalMeasure        string
}

// STCoordinate32Unqualified ...
type STCoordinate32Unqualified int

// STPositiveCoordinate ...
type STPositiveCoordinate int64

// STPositiveCoordinate32 ...
type STPositiveCoordinate32 int

// STAngle ...
type STAngle int

// CTAngle ...
type CTAngle struct {
	ValAttr int `xml:"val,attr"`
}

// STFixedAngle ...
type STFixedAngle int

// STPositiveFixedAngle ...
type STPositiveFixedAngle int

// CTPositiveFixedAngle ...
type CTPositiveFixedAngle struct {
	ValAttr int `xml:"val,attr"`
}

// STPercentage ...
type STPercentage struct {
	STPercentage string
}

// CTPercentage ...
type CTPercentage struct {
	ValAttr *STPercentage `xml:"val,attr"`
}

// STPositivePercentage ...
type STPositivePercentage struct {
	STPositivePercentage string
}

// CTPositivePercentage ...
type CTPositivePercentage struct {
	ValAttr *STPositivePercentage `xml:"val,attr"`
}

// STFixedPercentage ...
type STFixedPercentage struct {
	STFixedPercentage string
}

// CTFixedPercentage ...
type CTFixedPercentage struct {
	ValAttr *STFixedPercentage `xml:"val,attr"`
}

// STPositiveFixedPercentage ...
type STPositiveFixedPercentage struct {
	STPositiveFixedPercentage string
}

// CTPositiveFixedPercentage ...
type CTPositiveFixedPercentage struct {
	ValAttr *STPositiveFixedPercentage `xml:"val,attr"`
}

// CTRatio ...
type CTRatio struct {
	NAttr int64 `xml:"n,attr"`
	DAttr int64 `xml:"d,attr"`
}

// CTPoint2D ...
type CTPoint2D struct {
	XAttr *STCoordinate `xml:"x,attr"`
	YAttr *STCoordinate `xml:"y,attr"`
}

// CTPositiveSize2D ...
type CTPositiveSize2D struct {
	CxAttr int64 `xml:"cx,attr"`
	CyAttr int64 `xml:"cy,attr"`
}

// CTComplementTransform ...
type CTComplementTransform struct {
}

// CTInverseTransform ...
type CTInverseTransform struct {
}

// CTGrayscaleTransform ...
type CTGrayscaleTransform struct {
}

// CTGammaTransform ...
type CTGammaTransform struct {
}

// CTInverseGammaTransform ...
type CTInverseGammaTransform struct {
}

// EGColorTransform ...
type EGColorTransform struct {
	Tint     []*CTPositiveFixedPercentage
	Shade    []*CTPositiveFixedPercentage
	Comp     []*CTComplementTransform
	Inv      []*CTInverseTransform
	Gray     []*CTGrayscaleTransform
	Alpha    []*CTPositiveFixedPercentage
	AlphaOff []*CTFixedPercentage
	AlphaMod []*CTPositivePercentage
	Hue      []*CTPositiveFixedAngle
	HueOff   []*CTAngle
	HueMod   []*CTPositivePercentage
	Sat      []*CTPercentage
	SatOff   []*CTPercentage
	SatMod   []*CTPercentage
	Lum      []*CTPercentage
	LumOff   []*CTPercentage
	LumMod   []*CTPercentage
	Red      []*CTPercentage
	RedOff   []*CTPercentage
	RedMod   []*CTPercentage
	Green    []*CTPercentage
	GreenOff []*CTPercentage
	GreenMod []*CTPercentage
	Blue     []*CTPercentage
	BlueOff  []*CTPercentage
	BlueMod  []*CTPercentage
	Gamma    []*CTGammaTransform
	InvGamma []*CTInverseGammaTransform
}

// CTScRgbColor ...
type CTScRgbColor struct {
	RAttr            *STPercentage `xml:"r,attr"`
	GAttr            *STPercentage `xml:"g,attr"`
	BAttr            *STPercentage `xml:"b,attr"`
	EGColorTransform []*EGColorTransform
}

// CTSRgbColor ...
type CTSRgbColor struct {
	ValAttr          []byte `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// CTHslColor ...
type CTHslColor struct {
	HueAttr          int           `xml:"hue,attr"`
	SatAttr          *STPercentage `xml:"sat,attr"`
	LumAttr          *STPercentage `xml:"lum,attr"`
	EGColorTransform []*EGColorTransform
}

// STSystemColorVal ...
type STSystemColorVal string

// CTSystemColor ...
type CTSystemColor struct {
	ValAttr          string `xml:"val,attr"`
	LastClrAttr      []byte `xml:"lastClr,attr,omitempty"`
	EGColorTransform []*EGColorTransform
}

// STSchemeColorVal ...
type STSchemeColorVal string

// CTSchemeColor ...
type CTSchemeColor struct {
	ValAttr          string `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// STPresetColorVal ...
type STPresetColorVal string

// CTPresetColor ...
type CTPresetColor struct {
	ValAttr          string `xml:"val,attr"`
	EGColorTransform []*EGColorTransform
}

// EGOfficeArtExtensionList ...
type EGOfficeArtExtensionList struct {
	Ext []*CTOfficeArtExtension
}

// CTOfficeArtExtensionList ...
type CTOfficeArtExtensionList struct {
	EGOfficeArtExtensionList []*EGOfficeArtExtensionList
}

// CTScale2D ...
type CTScale2D struct {
	Sx []*CTRatio `xml:"sx"`
	Sy []*CTRatio `xml:"sy"`
}

// CTTransform2D ...
type CTTransform2D struct {
	RotAttr   int                 `xml:"rot,attr,omitempty"`
	FlipHAttr bool                `xml:"flipH,attr,omitempty"`
	FlipVAttr bool                `xml:"flipV,attr,omitempty"`
	Off       []*CTPoint2D        `xml:"off"`
	Ext       []*CTPositiveSize2D `xml:"ext"`
}

// CTGroupTransform2D ...
type CTGroupTransform2D struct {
	RotAttr   int                 `xml:"rot,attr,omitempty"`
	FlipHAttr bool                `xml:"flipH,attr,omitempty"`
	FlipVAttr bool                `xml:"flipV,attr,omitempty"`
	Off       []*CTPoint2D        `xml:"off"`
	Ext       []*CTPositiveSize2D `xml:"ext"`
	ChOff     []*CTPoint2D        `xml:"chOff"`
	ChExt     []*CTPositiveSize2D `xml:"chExt"`
}

// CTPoint3D ...
type CTPoint3D struct {
	XAttr *STCoordinate `xml:"x,attr"`
	YAttr *STCoordinate `xml:"y,attr"`
	ZAttr *STCoordinate `xml:"z,attr"`
}

// CTVector3D ...
type CTVector3D struct {
	DxAttr *STCoordinate `xml:"dx,attr"`
	DyAttr *STCoordinate `xml:"dy,attr"`
	DzAttr *STCoordinate `xml:"dz,attr"`
}

// CTSphereCoords ...
type CTSphereCoords struct {
	LatAttr int `xml:"lat,attr"`
	LonAttr int `xml:"lon,attr"`
	RevAttr int `xml:"rev,attr"`
}

// CTRelativeRect ...
type CTRelativeRect struct {
	LAttr *STPercentage `xml:"l,attr,omitempty"`
	TAttr *STPercentage `xml:"t,attr,omitempty"`
	RAttr *STPercentage `xml:"r,attr,omitempty"`
	BAttr *STPercentage `xml:"b,attr,omitempty"`
}

// STRectAlignment ...
type STRectAlignment string

// EGColorChoice ...
type EGColorChoice struct {
	ScrgbClr  []*CTScRgbColor
	SrgbClr   []*CTSRgbColor
	HslClr    []*CTHslColor
	SysClr    []*CTSystemColor
	SchemeClr []*CTSchemeColor
	PrstClr   []*CTPresetColor
}

// CTColor ...
type CTColor struct {
	EGColorChoice *EGColorChoice
}

// CTColorMRU ...
type CTColorMRU struct {
	EGColorChoice []*EGColorChoice
}

// STBlackWhiteMode ...
type STBlackWhiteMode string

// AGBlob ...
type AGBlob struct {
	REmbedAttr string `xml:"r:embed,attr,omitempty"`
	RLinkAttr  string `xml:"r:link,attr,omitempty"`
}

// CTEmbeddedWAVAudioFile ...
type CTEmbeddedWAVAudioFile struct {
	REmbedAttr string `xml:"r:embed,attr"`
	NameAttr   string `xml:"name,attr,omitempty"`
}

// CTHyperlink ...
type CTHyperlink struct {
	RIdAttr            string                      `xml:"r:id,attr,omitempty"`
	InvalidUrlAttr     string                      `xml:"invalidUrl,attr,omitempty"`
	ActionAttr         string                      `xml:"action,attr,omitempty"`
	TgtFrameAttr       string                      `xml:"tgtFrame,attr,omitempty"`
	TooltipAttr        string                      `xml:"tooltip,attr,omitempty"`
	HistoryAttr        bool                        `xml:"history,attr,omitempty"`
	HighlightClickAttr bool                        `xml:"highlightClick,attr,omitempty"`
	EndSndAttr         bool                        `xml:"endSnd,attr,omitempty"`
	Snd                []*CTEmbeddedWAVAudioFile   `xml:"snd"`
	ExtLst             []*CTOfficeArtExtensionList `xml:"extLst"`
}

// STDrawingElementId ...
type STDrawingElementId *Uint32

// AGLocking ...
type AGLocking struct {
	NoGrpAttr              bool `xml:"noGrp,attr,omitempty"`
	NoSelectAttr           bool `xml:"noSelect,attr,omitempty"`
	NoRotAttr              bool `xml:"noRot,attr,omitempty"`
	NoChangeAspectAttr     bool `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr             bool `xml:"noMove,attr,omitempty"`
	NoResizeAttr           bool `xml:"noResize,attr,omitempty"`
	NoEditPointsAttr       bool `xml:"noEditPoints,attr,omitempty"`
	NoAdjustHandlesAttr    bool `xml:"noAdjustHandles,attr,omitempty"`
	NoChangeArrowheadsAttr bool `xml:"noChangeArrowheads,attr,omitempty"`
	NoChangeShapeTypeAttr  bool `xml:"noChangeShapeType,attr,omitempty"`
}

// CTConnectorLocking ...
type CTConnectorLocking struct {
	AGLocking *AGLocking
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTShapeLocking ...
type CTShapeLocking struct {
	AGLocking      *AGLocking
	NoTextEditAttr bool                        `xml:"noTextEdit,attr,omitempty"`
	ExtLst         []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTPictureLocking ...
type CTPictureLocking struct {
	AGLocking  *AGLocking
	NoCropAttr bool                        `xml:"noCrop,attr,omitempty"`
	ExtLst     []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGroupLocking ...
type CTGroupLocking struct {
	NoGrpAttr          bool                        `xml:"noGrp,attr,omitempty"`
	NoUngrpAttr        bool                        `xml:"noUngrp,attr,omitempty"`
	NoSelectAttr       bool                        `xml:"noSelect,attr,omitempty"`
	NoRotAttr          bool                        `xml:"noRot,attr,omitempty"`
	NoChangeAspectAttr bool                        `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr         bool                        `xml:"noMove,attr,omitempty"`
	NoResizeAttr       bool                        `xml:"noResize,attr,omitempty"`
	ExtLst             []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGraphicalObjectFrameLocking ...
type CTGraphicalObjectFrameLocking struct {
	NoGrpAttr          bool                        `xml:"noGrp,attr,omitempty"`
	NoDrilldownAttr    bool                        `xml:"noDrilldown,attr,omitempty"`
	NoSelectAttr       bool                        `xml:"noSelect,attr,omitempty"`
	NoChangeAspectAttr bool                        `xml:"noChangeAspect,attr,omitempty"`
	NoMoveAttr         bool                        `xml:"noMove,attr,omitempty"`
	NoResizeAttr       bool                        `xml:"noResize,attr,omitempty"`
	ExtLst             []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTContentPartLocking ...
type CTContentPartLocking struct {
	AGLocking *AGLocking
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualDrawingProps ...
type CTNonVisualDrawingProps struct {
	IdAttr     *Uint32                     `xml:"id,attr"`
	NameAttr   string                      `xml:"name,attr"`
	DescrAttr  string                      `xml:"descr,attr,omitempty"`
	HiddenAttr bool                        `xml:"hidden,attr,omitempty"`
	TitleAttr  string                      `xml:"title,attr,omitempty"`
	HlinkClick []*CTHyperlink              `xml:"hlinkClick"`
	HlinkHover []*CTHyperlink              `xml:"hlinkHover"`
	ExtLst     []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualDrawingShapeProps ...
type CTNonVisualDrawingShapeProps struct {
	TxBoxAttr bool                        `xml:"txBox,attr,omitempty"`
	SpLocks   []*CTShapeLocking           `xml:"spLocks"`
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualConnectorProperties ...
type CTNonVisualConnectorProperties struct {
	CxnSpLocks []*CTConnectorLocking       `xml:"cxnSpLocks"`
	StCxn      []*CTConnection             `xml:"stCxn"`
	EndCxn     []*CTConnection             `xml:"endCxn"`
	ExtLst     []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualPictureProperties ...
type CTNonVisualPictureProperties struct {
	PreferRelativeResizeAttr bool                        `xml:"preferRelativeResize,attr,omitempty"`
	PicLocks                 []*CTPictureLocking         `xml:"picLocks"`
	ExtLst                   []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualGroupDrawingShapeProps ...
type CTNonVisualGroupDrawingShapeProps struct {
	GrpSpLocks []*CTGroupLocking           `xml:"grpSpLocks"`
	ExtLst     []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTNonVisualGraphicFrameProperties ...
type CTNonVisualGraphicFrameProperties struct {
	GraphicFrameLocks []*CTGraphicalObjectFrameLocking `xml:"graphicFrameLocks"`
	ExtLst            []*CTOfficeArtExtensionList      `xml:"extLst"`
}

// CTNonVisualContentPartProperties ...
type CTNonVisualContentPartProperties struct {
	IsCommentAttr bool                        `xml:"isComment,attr,omitempty"`
	CpLocks       []*CTContentPartLocking     `xml:"cpLocks"`
	ExtLst        []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGraphicalObjectData ...
type CTGraphicalObjectData struct {
	UriAttr string `xml:"uri,attr"`
}

// CTGraphicalObject ...
type CTGraphicalObject struct {
	GraphicData *CTGraphicalObjectData `xml:"graphicData"`
}

// Graphic ...
type Graphic *CTGraphicalObject

// STChartBuildStep ...
type STChartBuildStep string

// STDgmBuildStep ...
type STDgmBuildStep string

// CTAnimationDgmElement ...
type CTAnimationDgmElement struct {
	IdAttr      string `xml:"id,attr,omitempty"`
	BldStepAttr string `xml:"bldStep,attr,omitempty"`
}

// CTAnimationChartElement ...
type CTAnimationChartElement struct {
	SeriesIdxAttr   int    `xml:"seriesIdx,attr,omitempty"`
	CategoryIdxAttr int    `xml:"categoryIdx,attr,omitempty"`
	BldStepAttr     string `xml:"bldStep,attr"`
}

// CTAnimationElementChoice ...
type CTAnimationElementChoice struct {
	Dgm   *CTAnimationDgmElement   `xml:"dgm"`
	Chart *CTAnimationChartElement `xml:"chart"`
}

// STAnimationBuildType ...
type STAnimationBuildType string

// STAnimationDgmOnlyBuildType ...
type STAnimationDgmOnlyBuildType string

// STAnimationDgmBuildType ...
type STAnimationDgmBuildType struct {
	STAnimationBuildType        string
	STAnimationDgmOnlyBuildType string
}

// CTAnimationDgmBuildProperties ...
type CTAnimationDgmBuildProperties struct {
	BldAttr *STAnimationDgmBuildType `xml:"bld,attr,omitempty"`
	RevAttr bool                     `xml:"rev,attr,omitempty"`
}

// STAnimationChartOnlyBuildType ...
type STAnimationChartOnlyBuildType string

// STAnimationChartBuildType ...
type STAnimationChartBuildType struct {
	STAnimationBuildType          string
	STAnimationChartOnlyBuildType string
}

// CTAnimationChartBuildProperties ...
type CTAnimationChartBuildProperties struct {
	BldAttr    *STAnimationChartBuildType `xml:"bld,attr,omitempty"`
	AnimBgAttr bool                       `xml:"animBg,attr,omitempty"`
}

// CTAnimationGraphicalObjectBuildProperties ...
type CTAnimationGraphicalObjectBuildProperties struct {
	BldDgm   *CTAnimationDgmBuildProperties   `xml:"bldDgm"`
	BldChart *CTAnimationChartBuildProperties `xml:"bldChart"`
}

// CTBackgroundFormatting ...
type CTBackgroundFormatting struct {
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
}

// CTWholeE2oFormatting ...
type CTWholeE2oFormatting struct {
	EGEffectProperties []*EGEffectProperties
	Ln                 []*CTLineProperties `xml:"ln"`
}

// CTGvmlUseShapeRectangle ...
type CTGvmlUseShapeRectangle struct {
}

// CTGvmlTextShape ...
type CTGvmlTextShape struct {
	TxBody    []*CTTextBody               `xml:"txBody"`
	UseSpRect []*CTGvmlUseShapeRectangle  `xml:"useSpRect"`
	Xfrm      []*CTTransform2D            `xml:"xfrm"`
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlShapeNonVisual ...
type CTGvmlShapeNonVisual struct {
	CNvPr   []*CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvSpPr []*CTNonVisualDrawingShapeProps `xml:"cNvSpPr"`
}

// CTGvmlShape ...
type CTGvmlShape struct {
	NvSpPr []*CTGvmlShapeNonVisual     `xml:"nvSpPr"`
	SpPr   []*CTShapeProperties        `xml:"spPr"`
	TxSp   []*CTGvmlTextShape          `xml:"txSp"`
	Style  []*CTShapeStyle             `xml:"style"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlConnectorNonVisual ...
type CTGvmlConnectorNonVisual struct {
	CNvPr      []*CTNonVisualDrawingProps        `xml:"cNvPr"`
	CNvCxnSpPr []*CTNonVisualConnectorProperties `xml:"cNvCxnSpPr"`
}

// CTGvmlConnector ...
type CTGvmlConnector struct {
	NvCxnSpPr []*CTGvmlConnectorNonVisual `xml:"nvCxnSpPr"`
	SpPr      []*CTShapeProperties        `xml:"spPr"`
	Style     []*CTShapeStyle             `xml:"style"`
	ExtLst    []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlPictureNonVisual ...
type CTGvmlPictureNonVisual struct {
	CNvPr    []*CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvPicPr []*CTNonVisualPictureProperties `xml:"cNvPicPr"`
}

// CTGvmlPicture ...
type CTGvmlPicture struct {
	NvPicPr  []*CTGvmlPictureNonVisual   `xml:"nvPicPr"`
	BlipFill []*CTBlipFillProperties     `xml:"blipFill"`
	SpPr     []*CTShapeProperties        `xml:"spPr"`
	Style    []*CTShapeStyle             `xml:"style"`
	ExtLst   []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGvmlGraphicFrameNonVisual ...
type CTGvmlGraphicFrameNonVisual struct {
	CNvPr             []*CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGraphicFramePr []*CTNonVisualGraphicFrameProperties `xml:"cNvGraphicFramePr"`
}

// CTGvmlGraphicalObjectFrame ...
type CTGvmlGraphicalObjectFrame struct {
	NvGraphicFramePr []*CTGvmlGraphicFrameNonVisual `xml:"nvGraphicFramePr"`
	Graphic          []*CTGraphicalObject           `xml:"graphic"`
	Xfrm             []*CTTransform2D               `xml:"xfrm"`
	ExtLst           []*CTOfficeArtExtensionList    `xml:"extLst"`
}

// CTGvmlGroupShapeNonVisual ...
type CTGvmlGroupShapeNonVisual struct {
	CNvPr      []*CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGrpSpPr []*CTNonVisualGroupDrawingShapeProps `xml:"cNvGrpSpPr"`
}

// CTGvmlGroupShape ...
type CTGvmlGroupShape struct {
	NvGrpSpPr    []*CTGvmlGroupShapeNonVisual `xml:"nvGrpSpPr"`
	GrpSpPr      []*CTGroupShapeProperties    `xml:"grpSpPr"`
	TxSp         *CTGvmlTextShape             `xml:"txSp"`
	Sp           *CTGvmlShape                 `xml:"sp"`
	CxnSp        *CTGvmlConnector             `xml:"cxnSp"`
	Pic          *CTGvmlPicture               `xml:"pic"`
	GraphicFrame *CTGvmlGraphicalObjectFrame  `xml:"graphicFrame"`
	GrpSp        *CTGvmlGroupShape            `xml:"grpSp"`
	ExtLst       []*CTOfficeArtExtensionList  `xml:"extLst"`
}

// STPresetCameraType ...
type STPresetCameraType string

// STFOVAngle ...
type STFOVAngle int

// CTCamera ...
type CTCamera struct {
	PrstAttr string                `xml:"prst,attr"`
	FovAttr  int                   `xml:"fov,attr,omitempty"`
	ZoomAttr *STPositivePercentage `xml:"zoom,attr,omitempty"`
	Rot      []*CTSphereCoords     `xml:"rot"`
}

// STLightRigDirection ...
type STLightRigDirection string

// STLightRigType ...
type STLightRigType string

// CTLightRig ...
type CTLightRig struct {
	RigAttr string            `xml:"rig,attr"`
	DirAttr string            `xml:"dir,attr"`
	Rot     []*CTSphereCoords `xml:"rot"`
}

// CTScene3D ...
type CTScene3D struct {
	Camera   []*CTCamera                 `xml:"camera"`
	LightRig []*CTLightRig               `xml:"lightRig"`
	Backdrop []*CTBackdrop               `xml:"backdrop"`
	ExtLst   []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBackdrop ...
type CTBackdrop struct {
	Anchor []*CTPoint3D                `xml:"anchor"`
	Norm   []*CTVector3D               `xml:"norm"`
	Up     []*CTVector3D               `xml:"up"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// STBevelPresetType ...
type STBevelPresetType string

// CTBevel ...
type CTBevel struct {
	WAttr    int64  `xml:"w,attr,omitempty"`
	HAttr    int64  `xml:"h,attr,omitempty"`
	PrstAttr string `xml:"prst,attr,omitempty"`
}

// STPresetMaterialType ...
type STPresetMaterialType string

// CTShape3D ...
type CTShape3D struct {
	ZAttr            *STCoordinate               `xml:"z,attr,omitempty"`
	ExtrusionHAttr   int64                       `xml:"extrusionH,attr,omitempty"`
	ContourWAttr     int64                       `xml:"contourW,attr,omitempty"`
	PrstMaterialAttr string                      `xml:"prstMaterial,attr,omitempty"`
	BevelT           []*CTBevel                  `xml:"bevelT"`
	BevelB           []*CTBevel                  `xml:"bevelB"`
	ExtrusionClr     []*CTColor                  `xml:"extrusionClr"`
	ContourClr       []*CTColor                  `xml:"contourClr"`
	ExtLst           []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTFlatText ...
type CTFlatText struct {
	ZAttr *STCoordinate `xml:"z,attr,omitempty"`
}

// EGText3D ...
type EGText3D struct {
	Sp3d   []*CTShape3D
	FlatTx []*CTFlatText
}

// CTAlphaBiLevelEffect ...
type CTAlphaBiLevelEffect struct {
	ThreshAttr *STPositiveFixedPercentage `xml:"thresh,attr"`
}

// CTAlphaCeilingEffect ...
type CTAlphaCeilingEffect struct {
}

// CTAlphaFloorEffect ...
type CTAlphaFloorEffect struct {
}

// CTAlphaInverseEffect ...
type CTAlphaInverseEffect struct {
	EGColorChoice []*EGColorChoice
}

// CTAlphaModulateFixedEffect ...
type CTAlphaModulateFixedEffect struct {
	AmtAttr *STPositivePercentage `xml:"amt,attr,omitempty"`
}

// CTAlphaOutsetEffect ...
type CTAlphaOutsetEffect struct {
	RadAttr *STCoordinate `xml:"rad,attr,omitempty"`
}

// CTAlphaReplaceEffect ...
type CTAlphaReplaceEffect struct {
	AAttr *STPositiveFixedPercentage `xml:"a,attr"`
}

// CTBiLevelEffect ...
type CTBiLevelEffect struct {
	ThreshAttr *STPositiveFixedPercentage `xml:"thresh,attr"`
}

// CTBlurEffect ...
type CTBlurEffect struct {
	RadAttr  int64 `xml:"rad,attr,omitempty"`
	GrowAttr bool  `xml:"grow,attr,omitempty"`
}

// CTColorChangeEffect ...
type CTColorChangeEffect struct {
	UseAAttr bool       `xml:"useA,attr,omitempty"`
	ClrFrom  []*CTColor `xml:"clrFrom"`
	ClrTo    []*CTColor `xml:"clrTo"`
}

// CTColorReplaceEffect ...
type CTColorReplaceEffect struct {
	EGColorChoice []*EGColorChoice
}

// CTDuotoneEffect ...
type CTDuotoneEffect struct {
	EGColorChoice []*EGColorChoice
}

// CTGlowEffect ...
type CTGlowEffect struct {
	RadAttr       int64 `xml:"rad,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTGrayscaleEffect ...
type CTGrayscaleEffect struct {
}

// CTHSLEffect ...
type CTHSLEffect struct {
	HueAttr int                `xml:"hue,attr,omitempty"`
	SatAttr *STFixedPercentage `xml:"sat,attr,omitempty"`
	LumAttr *STFixedPercentage `xml:"lum,attr,omitempty"`
}

// CTInnerShadowEffect ...
type CTInnerShadowEffect struct {
	BlurRadAttr   int64 `xml:"blurRad,attr,omitempty"`
	DistAttr      int64 `xml:"dist,attr,omitempty"`
	DirAttr       int   `xml:"dir,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTLuminanceEffect ...
type CTLuminanceEffect struct {
	BrightAttr   *STFixedPercentage `xml:"bright,attr,omitempty"`
	ContrastAttr *STFixedPercentage `xml:"contrast,attr,omitempty"`
}

// CTOuterShadowEffect ...
type CTOuterShadowEffect struct {
	BlurRadAttr      int64         `xml:"blurRad,attr,omitempty"`
	DistAttr         int64         `xml:"dist,attr,omitempty"`
	DirAttr          int           `xml:"dir,attr,omitempty"`
	SxAttr           *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr           *STPercentage `xml:"sy,attr,omitempty"`
	KxAttr           int           `xml:"kx,attr,omitempty"`
	KyAttr           int           `xml:"ky,attr,omitempty"`
	AlgnAttr         string        `xml:"algn,attr,omitempty"`
	RotWithShapeAttr bool          `xml:"rotWithShape,attr,omitempty"`
	EGColorChoice    []*EGColorChoice
}

// STPresetShadowVal ...
type STPresetShadowVal string

// CTPresetShadowEffect ...
type CTPresetShadowEffect struct {
	PrstAttr      string `xml:"prst,attr"`
	DistAttr      int64  `xml:"dist,attr,omitempty"`
	DirAttr       int    `xml:"dir,attr,omitempty"`
	EGColorChoice []*EGColorChoice
}

// CTReflectionEffect ...
type CTReflectionEffect struct {
	BlurRadAttr      int64                      `xml:"blurRad,attr,omitempty"`
	StAAttr          *STPositiveFixedPercentage `xml:"stA,attr,omitempty"`
	StPosAttr        *STPositiveFixedPercentage `xml:"stPos,attr,omitempty"`
	EndAAttr         *STPositiveFixedPercentage `xml:"endA,attr,omitempty"`
	EndPosAttr       *STPositiveFixedPercentage `xml:"endPos,attr,omitempty"`
	DistAttr         int64                      `xml:"dist,attr,omitempty"`
	DirAttr          int                        `xml:"dir,attr,omitempty"`
	FadeDirAttr      int                        `xml:"fadeDir,attr,omitempty"`
	SxAttr           *STPercentage              `xml:"sx,attr,omitempty"`
	SyAttr           *STPercentage              `xml:"sy,attr,omitempty"`
	KxAttr           int                        `xml:"kx,attr,omitempty"`
	KyAttr           int                        `xml:"ky,attr,omitempty"`
	AlgnAttr         string                     `xml:"algn,attr,omitempty"`
	RotWithShapeAttr bool                       `xml:"rotWithShape,attr,omitempty"`
}

// CTRelativeOffsetEffect ...
type CTRelativeOffsetEffect struct {
	TxAttr *STPercentage `xml:"tx,attr,omitempty"`
	TyAttr *STPercentage `xml:"ty,attr,omitempty"`
}

// CTSoftEdgesEffect ...
type CTSoftEdgesEffect struct {
	RadAttr int64 `xml:"rad,attr"`
}

// CTTintEffect ...
type CTTintEffect struct {
	HueAttr int                `xml:"hue,attr,omitempty"`
	AmtAttr *STFixedPercentage `xml:"amt,attr,omitempty"`
}

// CTTransformEffect ...
type CTTransformEffect struct {
	SxAttr *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr *STPercentage `xml:"sy,attr,omitempty"`
	KxAttr int           `xml:"kx,attr,omitempty"`
	KyAttr int           `xml:"ky,attr,omitempty"`
	TxAttr *STCoordinate `xml:"tx,attr,omitempty"`
	TyAttr *STCoordinate `xml:"ty,attr,omitempty"`
}

// CTNoFillProperties ...
type CTNoFillProperties struct {
}

// CTSolidColorFillProperties ...
type CTSolidColorFillProperties struct {
	EGColorChoice []*EGColorChoice
}

// CTLinearShadeProperties ...
type CTLinearShadeProperties struct {
	AngAttr    int  `xml:"ang,attr,omitempty"`
	ScaledAttr bool `xml:"scaled,attr,omitempty"`
}

// STPathShadeType ...
type STPathShadeType string

// CTPathShadeProperties ...
type CTPathShadeProperties struct {
	PathAttr   string            `xml:"path,attr,omitempty"`
	FillToRect []*CTRelativeRect `xml:"fillToRect"`
}

// EGShadeProperties ...
type EGShadeProperties struct {
	Lin  []*CTLinearShadeProperties
	Path []*CTPathShadeProperties
}

// STTileFlipMode ...
type STTileFlipMode string

// CTGradientStop ...
type CTGradientStop struct {
	PosAttr       *STPositiveFixedPercentage `xml:"pos,attr"`
	EGColorChoice []*EGColorChoice
}

// CTGradientStopList ...
type CTGradientStopList struct {
	Gs []*CTGradientStop `xml:"gs"`
}

// CTGradientFillProperties ...
type CTGradientFillProperties struct {
	FlipAttr          string `xml:"flip,attr,omitempty"`
	RotWithShapeAttr  bool   `xml:"rotWithShape,attr,omitempty"`
	EGShadeProperties []*EGShadeProperties
	GsLst             []*CTGradientStopList `xml:"gsLst"`
	TileRect          []*CTRelativeRect     `xml:"tileRect"`
}

// CTTileInfoProperties ...
type CTTileInfoProperties struct {
	TxAttr   *STCoordinate `xml:"tx,attr,omitempty"`
	TyAttr   *STCoordinate `xml:"ty,attr,omitempty"`
	SxAttr   *STPercentage `xml:"sx,attr,omitempty"`
	SyAttr   *STPercentage `xml:"sy,attr,omitempty"`
	FlipAttr string        `xml:"flip,attr,omitempty"`
	AlgnAttr string        `xml:"algn,attr,omitempty"`
}

// CTStretchInfoProperties ...
type CTStretchInfoProperties struct {
	FillRect []*CTRelativeRect `xml:"fillRect"`
}

// EGFillModeProperties ...
type EGFillModeProperties struct {
	Tile    []*CTTileInfoProperties
	Stretch []*CTStretchInfoProperties
}

// STBlipCompression ...
type STBlipCompression string

// CTBlip ...
type CTBlip struct {
	AGBlob       *AGBlob
	CstateAttr   string                        `xml:"cstate,attr,omitempty"`
	AlphaBiLevel []*CTAlphaBiLevelEffect       `xml:"alphaBiLevel"`
	AlphaCeiling []*CTAlphaCeilingEffect       `xml:"alphaCeiling"`
	AlphaFloor   []*CTAlphaFloorEffect         `xml:"alphaFloor"`
	AlphaInv     []*CTAlphaInverseEffect       `xml:"alphaInv"`
	AlphaMod     []*CTAlphaModulateEffect      `xml:"alphaMod"`
	AlphaModFix  []*CTAlphaModulateFixedEffect `xml:"alphaModFix"`
	AlphaRepl    []*CTAlphaReplaceEffect       `xml:"alphaRepl"`
	BiLevel      []*CTBiLevelEffect            `xml:"biLevel"`
	Blur         []*CTBlurEffect               `xml:"blur"`
	ClrChange    []*CTColorChangeEffect        `xml:"clrChange"`
	ClrRepl      []*CTColorReplaceEffect       `xml:"clrRepl"`
	Duotone      []*CTDuotoneEffect            `xml:"duotone"`
	FillOverlay  []*CTFillOverlayEffect        `xml:"fillOverlay"`
	Grayscl      []*CTGrayscaleEffect          `xml:"grayscl"`
	Hsl          []*CTHSLEffect                `xml:"hsl"`
	Lum          []*CTLuminanceEffect          `xml:"lum"`
	Tint         []*CTTintEffect               `xml:"tint"`
	ExtLst       []*CTOfficeArtExtensionList   `xml:"extLst"`
}

// CTBlipFillProperties ...
type CTBlipFillProperties struct {
	DpiAttr              *Uint32 `xml:"dpi,attr,omitempty"`
	RotWithShapeAttr     bool    `xml:"rotWithShape,attr,omitempty"`
	EGFillModeProperties []*EGFillModeProperties
	Blip                 []*CTBlip         `xml:"blip"`
	SrcRect              []*CTRelativeRect `xml:"srcRect"`
}

// STPresetPatternVal ...
type STPresetPatternVal string

// CTPatternFillProperties ...
type CTPatternFillProperties struct {
	PrstAttr string     `xml:"prst,attr,omitempty"`
	FgClr    []*CTColor `xml:"fgClr"`
	BgClr    []*CTColor `xml:"bgClr"`
}

// CTGroupFillProperties ...
type CTGroupFillProperties struct {
}

// EGFillProperties ...
type EGFillProperties struct {
	NoFill    []*CTNoFillProperties
	SolidFill []*CTSolidColorFillProperties
	GradFill  []*CTGradientFillProperties
	BlipFill  []*CTBlipFillProperties
	PattFill  []*CTPatternFillProperties
	GrpFill   []*CTGroupFillProperties
}

// CTFillProperties ...
type CTFillProperties struct {
	EGFillProperties []*EGFillProperties
}

// CTFillEffect ...
type CTFillEffect struct {
	EGFillProperties []*EGFillProperties
}

// STBlendMode ...
type STBlendMode string

// CTFillOverlayEffect ...
type CTFillOverlayEffect struct {
	BlendAttr        string `xml:"blend,attr"`
	EGFillProperties []*EGFillProperties
}

// CTEffectReference ...
type CTEffectReference struct {
	RefAttr string `xml:"ref,attr"`
}

// EGEffect ...
type EGEffect struct {
	Cont         []*CTEffectContainer
	Effect       []*CTEffectReference
	AlphaBiLevel []*CTAlphaBiLevelEffect
	AlphaCeiling []*CTAlphaCeilingEffect
	AlphaFloor   []*CTAlphaFloorEffect
	AlphaInv     []*CTAlphaInverseEffect
	AlphaMod     []*CTAlphaModulateEffect
	AlphaModFix  []*CTAlphaModulateFixedEffect
	AlphaOutset  []*CTAlphaOutsetEffect
	AlphaRepl    []*CTAlphaReplaceEffect
	BiLevel      []*CTBiLevelEffect
	Blend        []*CTBlendEffect
	Blur         []*CTBlurEffect
	ClrChange    []*CTColorChangeEffect
	ClrRepl      []*CTColorReplaceEffect
	Duotone      []*CTDuotoneEffect
	Fill         []*CTFillEffect
	FillOverlay  []*CTFillOverlayEffect
	Glow         []*CTGlowEffect
	Grayscl      []*CTGrayscaleEffect
	Hsl          []*CTHSLEffect
	InnerShdw    []*CTInnerShadowEffect
	Lum          []*CTLuminanceEffect
	OuterShdw    []*CTOuterShadowEffect
	PrstShdw     []*CTPresetShadowEffect
	Reflection   []*CTReflectionEffect
	RelOff       []*CTRelativeOffsetEffect
	SoftEdge     []*CTSoftEdgesEffect
	Tint         []*CTTintEffect
	Xfrm         []*CTTransformEffect
}

// STEffectContainerType ...
type STEffectContainerType string

// CTEffectContainer ...
type CTEffectContainer struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	NameAttr string `xml:"name,attr,omitempty"`
	EGEffect []*EGEffect
}

// CTAlphaModulateEffect ...
type CTAlphaModulateEffect struct {
	Cont []*CTEffectContainer `xml:"cont"`
}

// CTBlendEffect ...
type CTBlendEffect struct {
	BlendAttr string               `xml:"blend,attr"`
	Cont      []*CTEffectContainer `xml:"cont"`
}

// CTEffectList ...
type CTEffectList struct {
	Blur        []*CTBlurEffect         `xml:"blur"`
	FillOverlay []*CTFillOverlayEffect  `xml:"fillOverlay"`
	Glow        []*CTGlowEffect         `xml:"glow"`
	InnerShdw   []*CTInnerShadowEffect  `xml:"innerShdw"`
	OuterShdw   []*CTOuterShadowEffect  `xml:"outerShdw"`
	PrstShdw    []*CTPresetShadowEffect `xml:"prstShdw"`
	Reflection  []*CTReflectionEffect   `xml:"reflection"`
	SoftEdge    []*CTSoftEdgesEffect    `xml:"softEdge"`
}

// EGEffectProperties ...
type EGEffectProperties struct {
	EffectLst []*CTEffectList
	EffectDag []*CTEffectContainer
}

// CTEffectProperties ...
type CTEffectProperties struct {
	EGEffectProperties []*EGEffectProperties
}

// Blip ...
type Blip *CTBlip

// STShapeType ...
type STShapeType string

// STTextShapeType ...
type STTextShapeType string

// STGeomGuideName ...
type STGeomGuideName string

// STGeomGuideFormula ...
type STGeomGuideFormula string

// CTGeomGuide ...
type CTGeomGuide struct {
	NameAttr string `xml:"name,attr"`
	FmlaAttr string `xml:"fmla,attr"`
}

// CTGeomGuideList ...
type CTGeomGuideList struct {
	Gd []*CTGeomGuide `xml:"gd"`
}

// STAdjCoordinate ...
type STAdjCoordinate struct {
	STCoordinate    *STCoordinate
	STGeomGuideName string
}

// STAdjAngle ...
type STAdjAngle struct {
	STGeomGuideName string
	STAngle         int
}

// CTAdjPoint2D ...
type CTAdjPoint2D struct {
	XAttr *STAdjCoordinate `xml:"x,attr"`
	YAttr *STAdjCoordinate `xml:"y,attr"`
}

// CTGeomRect ...
type CTGeomRect struct {
	LAttr *STAdjCoordinate `xml:"l,attr"`
	TAttr *STAdjCoordinate `xml:"t,attr"`
	RAttr *STAdjCoordinate `xml:"r,attr"`
	BAttr *STAdjCoordinate `xml:"b,attr"`
}

// CTXYAdjustHandle ...
type CTXYAdjustHandle struct {
	GdRefXAttr string           `xml:"gdRefX,attr,omitempty"`
	MinXAttr   *STAdjCoordinate `xml:"minX,attr,omitempty"`
	MaxXAttr   *STAdjCoordinate `xml:"maxX,attr,omitempty"`
	GdRefYAttr string           `xml:"gdRefY,attr,omitempty"`
	MinYAttr   *STAdjCoordinate `xml:"minY,attr,omitempty"`
	MaxYAttr   *STAdjCoordinate `xml:"maxY,attr,omitempty"`
	Pos        []*CTAdjPoint2D  `xml:"pos"`
}

// CTPolarAdjustHandle ...
type CTPolarAdjustHandle struct {
	GdRefRAttr   string           `xml:"gdRefR,attr,omitempty"`
	MinRAttr     *STAdjCoordinate `xml:"minR,attr,omitempty"`
	MaxRAttr     *STAdjCoordinate `xml:"maxR,attr,omitempty"`
	GdRefAngAttr string           `xml:"gdRefAng,attr,omitempty"`
	MinAngAttr   *STAdjAngle      `xml:"minAng,attr,omitempty"`
	MaxAngAttr   *STAdjAngle      `xml:"maxAng,attr,omitempty"`
	Pos          []*CTAdjPoint2D  `xml:"pos"`
}

// CTConnectionSite ...
type CTConnectionSite struct {
	AngAttr *STAdjAngle     `xml:"ang,attr"`
	Pos     []*CTAdjPoint2D `xml:"pos"`
}

// CTAdjustHandleList ...
type CTAdjustHandleList struct {
	AhXY    []*CTXYAdjustHandle    `xml:"ahXY"`
	AhPolar []*CTPolarAdjustHandle `xml:"ahPolar"`
}

// CTConnectionSiteList ...
type CTConnectionSiteList struct {
	Cxn []*CTConnectionSite `xml:"cxn"`
}

// CTConnection ...
type CTConnection struct {
	IdAttr  *Uint32 `xml:"id,attr"`
	IdxAttr *Uint32 `xml:"idx,attr"`
}

// CTPath2DMoveTo ...
type CTPath2DMoveTo struct {
	Pt []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DLineTo ...
type CTPath2DLineTo struct {
	Pt []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DArcTo ...
type CTPath2DArcTo struct {
	WRAttr    *STAdjCoordinate `xml:"wR,attr"`
	HRAttr    *STAdjCoordinate `xml:"hR,attr"`
	StAngAttr *STAdjAngle      `xml:"stAng,attr"`
	SwAngAttr *STAdjAngle      `xml:"swAng,attr"`
}

// CTPath2DQuadBezierTo ...
type CTPath2DQuadBezierTo struct {
	Pt []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DCubicBezierTo ...
type CTPath2DCubicBezierTo struct {
	Pt []*CTAdjPoint2D `xml:"pt"`
}

// CTPath2DClose ...
type CTPath2DClose struct {
}

// STPathFillMode ...
type STPathFillMode string

// CTPath2D ...
type CTPath2D struct {
	WAttr           int64                    `xml:"w,attr,omitempty"`
	HAttr           int64                    `xml:"h,attr,omitempty"`
	FillAttr        string                   `xml:"fill,attr,omitempty"`
	StrokeAttr      bool                     `xml:"stroke,attr,omitempty"`
	ExtrusionOkAttr bool                     `xml:"extrusionOk,attr,omitempty"`
	Close           []*CTPath2DClose         `xml:"close"`
	MoveTo          []*CTPath2DMoveTo        `xml:"moveTo"`
	LnTo            []*CTPath2DLineTo        `xml:"lnTo"`
	ArcTo           []*CTPath2DArcTo         `xml:"arcTo"`
	QuadBezTo       []*CTPath2DQuadBezierTo  `xml:"quadBezTo"`
	CubicBezTo      []*CTPath2DCubicBezierTo `xml:"cubicBezTo"`
}

// CTPath2DList ...
type CTPath2DList struct {
	Path []*CTPath2D `xml:"path"`
}

// CTPresetGeometry2D ...
type CTPresetGeometry2D struct {
	PrstAttr string             `xml:"prst,attr"`
	AvLst    []*CTGeomGuideList `xml:"avLst"`
}

// CTPresetTextShape ...
type CTPresetTextShape struct {
	PrstAttr string             `xml:"prst,attr"`
	AvLst    []*CTGeomGuideList `xml:"avLst"`
}

// CTCustomGeometry2D ...
type CTCustomGeometry2D struct {
	AvLst   []*CTGeomGuideList      `xml:"avLst"`
	GdLst   []*CTGeomGuideList      `xml:"gdLst"`
	AhLst   []*CTAdjustHandleList   `xml:"ahLst"`
	CxnLst  []*CTConnectionSiteList `xml:"cxnLst"`
	Rect    []*CTGeomRect           `xml:"rect"`
	PathLst []*CTPath2DList         `xml:"pathLst"`
}

// EGGeometry ...
type EGGeometry struct {
	CustGeom []*CTCustomGeometry2D
	PrstGeom []*CTPresetGeometry2D
}

// EGTextGeometry ...
type EGTextGeometry struct {
	CustGeom   []*CTCustomGeometry2D
	PrstTxWarp []*CTPresetTextShape
}

// STLineEndType ...
type STLineEndType string

// STLineEndWidth ...
type STLineEndWidth string

// STLineEndLength ...
type STLineEndLength string

// CTLineEndProperties ...
type CTLineEndProperties struct {
	TypeAttr string `xml:"type,attr,omitempty"`
	WAttr    string `xml:"w,attr,omitempty"`
	LenAttr  string `xml:"len,attr,omitempty"`
}

// EGLineFillProperties ...
type EGLineFillProperties struct {
	NoFill    []*CTNoFillProperties
	SolidFill []*CTSolidColorFillProperties
	GradFill  []*CTGradientFillProperties
	PattFill  []*CTPatternFillProperties
}

// CTLineJoinBevel ...
type CTLineJoinBevel struct {
}

// CTLineJoinRound ...
type CTLineJoinRound struct {
}

// CTLineJoinMiterProperties ...
type CTLineJoinMiterProperties struct {
	LimAttr *STPositivePercentage `xml:"lim,attr,omitempty"`
}

// EGLineJoinProperties ...
type EGLineJoinProperties struct {
	Round []*CTLineJoinRound
	Bevel []*CTLineJoinBevel
	Miter []*CTLineJoinMiterProperties
}

// STPresetLineDashVal ...
type STPresetLineDashVal string

// CTPresetLineDashProperties ...
type CTPresetLineDashProperties struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// CTDashStop ...
type CTDashStop struct {
	DAttr  *STPositivePercentage `xml:"d,attr"`
	SpAttr *STPositivePercentage `xml:"sp,attr"`
}

// CTDashStopList ...
type CTDashStopList struct {
	Ds []*CTDashStop `xml:"ds"`
}

// EGLineDashProperties ...
type EGLineDashProperties struct {
	PrstDash []*CTPresetLineDashProperties
	CustDash []*CTDashStopList
}

// STLineCap ...
type STLineCap string

// STLineWidth ...
type STLineWidth int

// STPenAlignment ...
type STPenAlignment string

// STCompoundLine ...
type STCompoundLine string

// CTLineProperties ...
type CTLineProperties struct {
	WAttr                int    `xml:"w,attr,omitempty"`
	CapAttr              string `xml:"cap,attr,omitempty"`
	CmpdAttr             string `xml:"cmpd,attr,omitempty"`
	AlgnAttr             string `xml:"algn,attr,omitempty"`
	EGLineFillProperties []*EGLineFillProperties
	EGLineDashProperties []*EGLineDashProperties
	EGLineJoinProperties []*EGLineJoinProperties
	HeadEnd              []*CTLineEndProperties      `xml:"headEnd"`
	TailEnd              []*CTLineEndProperties      `xml:"tailEnd"`
	ExtLst               []*CTOfficeArtExtensionList `xml:"extLst"`
}

// STShapeID ...
type STShapeID string

// CTShapeProperties ...
type CTShapeProperties struct {
	BwModeAttr         string `xml:"bwMode,attr,omitempty"`
	EGGeometry         []*EGGeometry
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	Xfrm               []*CTTransform2D            `xml:"xfrm"`
	Ln                 []*CTLineProperties         `xml:"ln"`
	Scene3d            []*CTScene3D                `xml:"scene3d"`
	Sp3d               []*CTShape3D                `xml:"sp3d"`
	ExtLst             []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTGroupShapeProperties ...
type CTGroupShapeProperties struct {
	BwModeAttr         string `xml:"bwMode,attr,omitempty"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	Xfrm               []*CTGroupTransform2D       `xml:"xfrm"`
	Scene3d            []*CTScene3D                `xml:"scene3d"`
	ExtLst             []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTStyleMatrixReference ...
type CTStyleMatrixReference struct {
	IdxAttr       *Uint32 `xml:"idx,attr"`
	EGColorChoice []*EGColorChoice
}

// CTFontReference ...
type CTFontReference struct {
	IdxAttr       string `xml:"idx,attr"`
	EGColorChoice []*EGColorChoice
}

// CTShapeStyle ...
type CTShapeStyle struct {
	LnRef     []*CTStyleMatrixReference `xml:"lnRef"`
	FillRef   []*CTStyleMatrixReference `xml:"fillRef"`
	EffectRef []*CTStyleMatrixReference `xml:"effectRef"`
	FontRef   []*CTFontReference        `xml:"fontRef"`
}

// CTDefaultShapeDefinition ...
type CTDefaultShapeDefinition struct {
	SpPr     []*CTShapeProperties        `xml:"spPr"`
	BodyPr   []*CTTextBodyProperties     `xml:"bodyPr"`
	LstStyle []*CTTextListStyle          `xml:"lstStyle"`
	Style    []*CTShapeStyle             `xml:"style"`
	ExtLst   []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTObjectStyleDefaults ...
type CTObjectStyleDefaults struct {
	SpDef  []*CTDefaultShapeDefinition `xml:"spDef"`
	LnDef  []*CTDefaultShapeDefinition `xml:"lnDef"`
	TxDef  []*CTDefaultShapeDefinition `xml:"txDef"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTEmptyElement ...
type CTEmptyElement struct {
}

// CTColorMapping ...
type CTColorMapping struct {
	Bg1Attr      string                      `xml:"bg1,attr"`
	Tx1Attr      string                      `xml:"tx1,attr"`
	Bg2Attr      string                      `xml:"bg2,attr"`
	Tx2Attr      string                      `xml:"tx2,attr"`
	Accent1Attr  string                      `xml:"accent1,attr"`
	Accent2Attr  string                      `xml:"accent2,attr"`
	Accent3Attr  string                      `xml:"accent3,attr"`
	Accent4Attr  string                      `xml:"accent4,attr"`
	Accent5Attr  string                      `xml:"accent5,attr"`
	Accent6Attr  string                      `xml:"accent6,attr"`
	HlinkAttr    string                      `xml:"hlink,attr"`
	FolHlinkAttr string                      `xml:"folHlink,attr"`
	ExtLst       []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTColorMappingOverride ...
type CTColorMappingOverride struct {
	MasterClrMapping   *CTEmptyElement `xml:"masterClrMapping"`
	OverrideClrMapping *CTColorMapping `xml:"overrideClrMapping"`
}

// CTColorSchemeAndMapping ...
type CTColorSchemeAndMapping struct {
	ClrScheme []*CTColorScheme  `xml:"clrScheme"`
	ClrMap    []*CTColorMapping `xml:"clrMap"`
}

// CTColorSchemeList ...
type CTColorSchemeList struct {
	ExtraClrScheme []*CTColorSchemeAndMapping `xml:"extraClrScheme"`
}

// CTOfficeStyleSheet ...
type CTOfficeStyleSheet struct {
	NameAttr          string                      `xml:"name,attr,omitempty"`
	ThemeElements     []*CTBaseStyles             `xml:"themeElements"`
	ObjectDefaults    []*CTObjectStyleDefaults    `xml:"objectDefaults"`
	ExtraClrSchemeLst []*CTColorSchemeList        `xml:"extraClrSchemeLst"`
	CustClrLst        []*CTCustomColorList        `xml:"custClrLst"`
	ExtLst            []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBaseStylesOverride ...
type CTBaseStylesOverride struct {
	ClrScheme  []*CTColorScheme `xml:"clrScheme"`
	FontScheme []*CTFontScheme  `xml:"fontScheme"`
	FmtScheme  []*CTStyleMatrix `xml:"fmtScheme"`
}

// CTClipboardStyleSheet ...
type CTClipboardStyleSheet struct {
	ThemeElements []*CTBaseStyles   `xml:"themeElements"`
	ClrMap        []*CTColorMapping `xml:"clrMap"`
}

// Theme ...
type Theme *CTOfficeStyleSheet

// ThemeOverride ...
type ThemeOverride *CTBaseStylesOverride

// ThemeManager ...
type ThemeManager *CTEmptyElement

// CTTableCellProperties ...
type CTTableCellProperties struct {
	MarLAttr         *STCoordinate32 `xml:"marL,attr,omitempty"`
	MarRAttr         *STCoordinate32 `xml:"marR,attr,omitempty"`
	MarTAttr         *STCoordinate32 `xml:"marT,attr,omitempty"`
	MarBAttr         *STCoordinate32 `xml:"marB,attr,omitempty"`
	VertAttr         string          `xml:"vert,attr,omitempty"`
	AnchorAttr       string          `xml:"anchor,attr,omitempty"`
	AnchorCtrAttr    bool            `xml:"anchorCtr,attr,omitempty"`
	HorzOverflowAttr string          `xml:"horzOverflow,attr,omitempty"`
	EGFillProperties []*EGFillProperties
	LnL              []*CTLineProperties         `xml:"lnL"`
	LnR              []*CTLineProperties         `xml:"lnR"`
	LnT              []*CTLineProperties         `xml:"lnT"`
	LnB              []*CTLineProperties         `xml:"lnB"`
	LnTlToBr         []*CTLineProperties         `xml:"lnTlToBr"`
	LnBlToTr         []*CTLineProperties         `xml:"lnBlToTr"`
	Cell3D           []*CTCell3D                 `xml:"cell3D"`
	Headers          *CTHeaders                  `xml:"headers"`
	ExtLst           []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTHeaders ...
type CTHeaders struct {
	Header string `xml:"header"`
}

// CTTableCol ...
type CTTableCol struct {
	WAttr  *STCoordinate               `xml:"w,attr"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableGrid ...
type CTTableGrid struct {
	GridCol []*CTTableCol `xml:"gridCol"`
}

// CTTableCell ...
type CTTableCell struct {
	RowSpanAttr  int                         `xml:"rowSpan,attr,omitempty"`
	GridSpanAttr int                         `xml:"gridSpan,attr,omitempty"`
	HMergeAttr   bool                        `xml:"hMerge,attr,omitempty"`
	VMergeAttr   bool                        `xml:"vMerge,attr,omitempty"`
	IdAttr       string                      `xml:"id,attr,omitempty"`
	TxBody       []*CTTextBody               `xml:"txBody"`
	TcPr         []*CTTableCellProperties    `xml:"tcPr"`
	ExtLst       []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableRow ...
type CTTableRow struct {
	HAttr  *STCoordinate               `xml:"h,attr"`
	Tc     []*CTTableCell              `xml:"tc"`
	ExtLst []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableProperties ...
type CTTableProperties struct {
	RtlAttr            bool `xml:"rtl,attr,omitempty"`
	FirstRowAttr       bool `xml:"firstRow,attr,omitempty"`
	FirstColAttr       bool `xml:"firstCol,attr,omitempty"`
	LastRowAttr        bool `xml:"lastRow,attr,omitempty"`
	LastColAttr        bool `xml:"lastCol,attr,omitempty"`
	BandRowAttr        bool `xml:"bandRow,attr,omitempty"`
	BandColAttr        bool `xml:"bandCol,attr,omitempty"`
	EGFillProperties   []*EGFillProperties
	EGEffectProperties []*EGEffectProperties
	TableStyle         *CTTableStyle               `xml:"tableStyle"`
	TableStyleId       string                      `xml:"tableStyleId"`
	ExtLst             []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTable ...
type CTTable struct {
	TblPr   []*CTTableProperties `xml:"tblPr"`
	TblGrid []*CTTableGrid       `xml:"tblGrid"`
	Tr      []*CTTableRow        `xml:"tr"`
}

// Tbl ...
type Tbl *CTTable

// CTCell3D ...
type CTCell3D struct {
	PrstMaterialAttr string                      `xml:"prstMaterial,attr,omitempty"`
	Bevel            []*CTBevel                  `xml:"bevel"`
	LightRig         []*CTLightRig               `xml:"lightRig"`
	ExtLst           []*CTOfficeArtExtensionList `xml:"extLst"`
}

// EGThemeableFillStyle ...
type EGThemeableFillStyle struct {
	Fill    []*CTFillProperties
	FillRef []*CTStyleMatrixReference
}

// CTThemeableLineStyle ...
type CTThemeableLineStyle struct {
	Ln    []*CTLineProperties       `xml:"ln"`
	LnRef []*CTStyleMatrixReference `xml:"lnRef"`
}

// EGThemeableEffectStyle ...
type EGThemeableEffectStyle struct {
	Effect    []*CTEffectProperties
	EffectRef []*CTStyleMatrixReference
}

// EGThemeableFontStyles ...
type EGThemeableFontStyles struct {
	Font    []*CTFontCollection
	FontRef []*CTFontReference
}

// STOnOffStyleType ...
type STOnOffStyleType string

// CTTableStyleTextStyle ...
type CTTableStyleTextStyle struct {
	BAttr                 string `xml:"b,attr,omitempty"`
	IAttr                 string `xml:"i,attr,omitempty"`
	EGThemeableFontStyles []*EGThemeableFontStyles
	EGColorChoice         []*EGColorChoice
	ExtLst                []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableCellBorderStyle ...
type CTTableCellBorderStyle struct {
	Left    []*CTThemeableLineStyle     `xml:"left"`
	Right   []*CTThemeableLineStyle     `xml:"right"`
	Top     []*CTThemeableLineStyle     `xml:"top"`
	Bottom  []*CTThemeableLineStyle     `xml:"bottom"`
	InsideH []*CTThemeableLineStyle     `xml:"insideH"`
	InsideV []*CTThemeableLineStyle     `xml:"insideV"`
	Tl2br   []*CTThemeableLineStyle     `xml:"tl2br"`
	Tr2bl   []*CTThemeableLineStyle     `xml:"tr2bl"`
	ExtLst  []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableBackgroundStyle ...
type CTTableBackgroundStyle struct {
	EGThemeableFillStyle   []*EGThemeableFillStyle
	EGThemeableEffectStyle []*EGThemeableEffectStyle
}

// CTTableStyleCellStyle ...
type CTTableStyleCellStyle struct {
	EGThemeableFillStyle []*EGThemeableFillStyle
	TcBdr                []*CTTableCellBorderStyle `xml:"tcBdr"`
	Cell3D               []*CTCell3D               `xml:"cell3D"`
}

// CTTablePartStyle ...
type CTTablePartStyle struct {
	TcTxStyle []*CTTableStyleTextStyle `xml:"tcTxStyle"`
	TcStyle   []*CTTableStyleCellStyle `xml:"tcStyle"`
}

// CTTableStyle ...
type CTTableStyle struct {
	StyleIdAttr   string                      `xml:"styleId,attr"`
	StyleNameAttr string                      `xml:"styleName,attr"`
	TblBg         []*CTTableBackgroundStyle   `xml:"tblBg"`
	WholeTbl      []*CTTablePartStyle         `xml:"wholeTbl"`
	Band1H        []*CTTablePartStyle         `xml:"band1H"`
	Band2H        []*CTTablePartStyle         `xml:"band2H"`
	Band1V        []*CTTablePartStyle         `xml:"band1V"`
	Band2V        []*CTTablePartStyle         `xml:"band2V"`
	LastCol       []*CTTablePartStyle         `xml:"lastCol"`
	FirstCol      []*CTTablePartStyle         `xml:"firstCol"`
	LastRow       []*CTTablePartStyle         `xml:"lastRow"`
	SeCell        []*CTTablePartStyle         `xml:"seCell"`
	SwCell        []*CTTablePartStyle         `xml:"swCell"`
	FirstRow      []*CTTablePartStyle         `xml:"firstRow"`
	NeCell        []*CTTablePartStyle         `xml:"neCell"`
	NwCell        []*CTTablePartStyle         `xml:"nwCell"`
	ExtLst        []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTableStyleList ...
type CTTableStyleList struct {
	DefAttr  string          `xml:"def,attr"`
	TblStyle []*CTTableStyle `xml:"tblStyle"`
}

// TblStyleLst ...
type TblStyleLst *CTTableStyleList

// CTTextParagraph ...
type CTTextParagraph struct {
	EGTextRun  []*EGTextRun
	PPr        []*CTTextParagraphProperties `xml:"pPr"`
	EndParaRPr []*CTTextCharacterProperties `xml:"endParaRPr"`
}

// STTextAnchoringType ...
type STTextAnchoringType string

// STTextVertOverflowType ...
type STTextVertOverflowType string

// STTextHorzOverflowType ...
type STTextHorzOverflowType string

// STTextVerticalType ...
type STTextVerticalType string

// STTextWrappingType ...
type STTextWrappingType string

// STTextColumnCount ...
type STTextColumnCount int

// CTTextListStyle ...
type CTTextListStyle struct {
	DefPPr  []*CTTextParagraphProperties `xml:"defPPr"`
	Lvl1pPr []*CTTextParagraphProperties `xml:"lvl1pPr"`
	Lvl2pPr []*CTTextParagraphProperties `xml:"lvl2pPr"`
	Lvl3pPr []*CTTextParagraphProperties `xml:"lvl3pPr"`
	Lvl4pPr []*CTTextParagraphProperties `xml:"lvl4pPr"`
	Lvl5pPr []*CTTextParagraphProperties `xml:"lvl5pPr"`
	Lvl6pPr []*CTTextParagraphProperties `xml:"lvl6pPr"`
	Lvl7pPr []*CTTextParagraphProperties `xml:"lvl7pPr"`
	Lvl8pPr []*CTTextParagraphProperties `xml:"lvl8pPr"`
	Lvl9pPr []*CTTextParagraphProperties `xml:"lvl9pPr"`
	ExtLst  []*CTOfficeArtExtensionList  `xml:"extLst"`
}

// STTextFontScalePercentOrPercentString ...
type STTextFontScalePercentOrPercentString struct {
	STPercentage string
}

// CTTextNormalAutofit ...
type CTTextNormalAutofit struct {
	FontScaleAttr      *STTextFontScalePercentOrPercentString `xml:"fontScale,attr,omitempty"`
	LnSpcReductionAttr *STTextSpacingPercentOrPercentString   `xml:"lnSpcReduction,attr,omitempty"`
}

// CTTextShapeAutofit ...
type CTTextShapeAutofit struct {
}

// CTTextNoAutofit ...
type CTTextNoAutofit struct {
}

// EGTextAutofit ...
type EGTextAutofit struct {
	NoAutofit   *CTTextNoAutofit
	NormAutofit *CTTextNormalAutofit
	SpAutoFit   *CTTextShapeAutofit
}

// CTTextBodyProperties ...
type CTTextBodyProperties struct {
	RotAttr              int             `xml:"rot,attr,omitempty"`
	SpcFirstLastParaAttr bool            `xml:"spcFirstLastPara,attr,omitempty"`
	VertOverflowAttr     string          `xml:"vertOverflow,attr,omitempty"`
	HorzOverflowAttr     string          `xml:"horzOverflow,attr,omitempty"`
	VertAttr             string          `xml:"vert,attr,omitempty"`
	WrapAttr             string          `xml:"wrap,attr,omitempty"`
	LInsAttr             *STCoordinate32 `xml:"lIns,attr,omitempty"`
	TInsAttr             *STCoordinate32 `xml:"tIns,attr,omitempty"`
	RInsAttr             *STCoordinate32 `xml:"rIns,attr,omitempty"`
	BInsAttr             *STCoordinate32 `xml:"bIns,attr,omitempty"`
	NumColAttr           int             `xml:"numCol,attr,omitempty"`
	SpcColAttr           int             `xml:"spcCol,attr,omitempty"`
	RtlColAttr           bool            `xml:"rtlCol,attr,omitempty"`
	FromWordArtAttr      bool            `xml:"fromWordArt,attr,omitempty"`
	AnchorAttr           string          `xml:"anchor,attr,omitempty"`
	AnchorCtrAttr        bool            `xml:"anchorCtr,attr,omitempty"`
	ForceAAAttr          bool            `xml:"forceAA,attr,omitempty"`
	UprightAttr          bool            `xml:"upright,attr,omitempty"`
	CompatLnSpcAttr      bool            `xml:"compatLnSpc,attr,omitempty"`
	EGTextAutofit        []*EGTextAutofit
	EGText3D             []*EGText3D
	PrstTxWarp           []*CTPresetTextShape        `xml:"prstTxWarp"`
	Scene3d              []*CTScene3D                `xml:"scene3d"`
	ExtLst               []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTTextBody ...
type CTTextBody struct {
	BodyPr   []*CTTextBodyProperties `xml:"bodyPr"`
	LstStyle []*CTTextListStyle      `xml:"lstStyle"`
	P        []*CTTextParagraph      `xml:"p"`
}

// STTextBulletStartAtNum ...
type STTextBulletStartAtNum int

// STTextAutonumberScheme ...
type STTextAutonumberScheme string

// CTTextBulletColorFollowText ...
type CTTextBulletColorFollowText struct {
}

// EGTextBulletColor ...
type EGTextBulletColor struct {
	BuClrTx []*CTTextBulletColorFollowText
	BuClr   []*CTColor
}

// STTextBulletSize ...
type STTextBulletSize struct {
	STTextBulletSizePercent *STTextBulletSizePercent
}

// STTextBulletSizePercent ...
type STTextBulletSizePercent string

// CTTextBulletSizeFollowText ...
type CTTextBulletSizeFollowText struct {
}

// CTTextBulletSizePercent ...
type CTTextBulletSizePercent struct {
	ValAttr string `xml:"val,attr"`
}

// CTTextBulletSizePoint ...
type CTTextBulletSizePoint struct {
	ValAttr int `xml:"val,attr"`
}

// EGTextBulletSize ...
type EGTextBulletSize struct {
	BuSzTx  *CTTextBulletSizeFollowText
	BuSzPct *CTTextBulletSizePercent
	BuSzPts *CTTextBulletSizePoint
}

// CTTextBulletTypefaceFollowText ...
type CTTextBulletTypefaceFollowText struct {
}

// EGTextBulletTypeface ...
type EGTextBulletTypeface struct {
	BuFontTx *CTTextBulletTypefaceFollowText
	BuFont   *CTTextFont
}

// CTTextAutonumberBullet ...
type CTTextAutonumberBullet struct {
	TypeAttr    string `xml:"type,attr"`
	StartAtAttr int    `xml:"startAt,attr,omitempty"`
}

// CTTextCharBullet ...
type CTTextCharBullet struct {
	CharAttr string `xml:"char,attr"`
}

// CTTextBlipBullet ...
type CTTextBlipBullet struct {
	Blip []*CTBlip `xml:"blip"`
}

// CTTextNoBullet ...
type CTTextNoBullet struct {
}

// EGTextBullet ...
type EGTextBullet struct {
	BuNone    *CTTextNoBullet
	BuAutoNum *CTTextAutonumberBullet
	BuChar    *CTTextCharBullet
	BuBlip    *CTTextBlipBullet
}

// STTextPoint ...
type STTextPoint struct {
	STTextPointUnqualified *STTextPointUnqualified
	STUniversalMeasure     string
}

// STTextPointUnqualified ...
type STTextPointUnqualified int

// STTextNonNegativePoint ...
type STTextNonNegativePoint int

// STTextFontSize ...
type STTextFontSize int

// STTextTypeface ...
type STTextTypeface string

// STPitchFamily ...
type STPitchFamily byte

// CTTextFont ...
type CTTextFont struct {
	TypefaceAttr    string `xml:"typeface,attr"`
	PanoseAttr      []byte `xml:"panose,attr,omitempty"`
	PitchFamilyAttr byte   `xml:"pitchFamily,attr,omitempty"`
	CharsetAttr     byte   `xml:"charset,attr,omitempty"`
}

// STTextUnderlineType ...
type STTextUnderlineType string

// CTTextUnderlineLineFollowText ...
type CTTextUnderlineLineFollowText struct {
}

// CTTextUnderlineFillFollowText ...
type CTTextUnderlineFillFollowText struct {
}

// CTTextUnderlineFillGroupWrapper ...
type CTTextUnderlineFillGroupWrapper struct {
	EGFillProperties []*EGFillProperties
}

// EGTextUnderlineLine ...
type EGTextUnderlineLine struct {
	ULnTx *CTTextUnderlineLineFollowText
	ULn   []*CTLineProperties
}

// EGTextUnderlineFill ...
type EGTextUnderlineFill struct {
	UFillTx *CTTextUnderlineFillFollowText
	UFill   *CTTextUnderlineFillGroupWrapper
}

// STTextStrikeType ...
type STTextStrikeType string

// STTextCapsType ...
type STTextCapsType string

// CTTextCharacterProperties ...
type CTTextCharacterProperties struct {
	KumimojiAttr        bool          `xml:"kumimoji,attr,omitempty"`
	LangAttr            string        `xml:"lang,attr,omitempty"`
	AltLangAttr         string        `xml:"altLang,attr,omitempty"`
	SzAttr              int           `xml:"sz,attr,omitempty"`
	BAttr               bool          `xml:"b,attr,omitempty"`
	IAttr               bool          `xml:"i,attr,omitempty"`
	UAttr               string        `xml:"u,attr,omitempty"`
	StrikeAttr          string        `xml:"strike,attr,omitempty"`
	KernAttr            int           `xml:"kern,attr,omitempty"`
	CapAttr             string        `xml:"cap,attr,omitempty"`
	SpcAttr             *STTextPoint  `xml:"spc,attr,omitempty"`
	NormalizeHAttr      bool          `xml:"normalizeH,attr,omitempty"`
	BaselineAttr        *STPercentage `xml:"baseline,attr,omitempty"`
	NoProofAttr         bool          `xml:"noProof,attr,omitempty"`
	DirtyAttr           bool          `xml:"dirty,attr,omitempty"`
	ErrAttr             bool          `xml:"err,attr,omitempty"`
	SmtCleanAttr        bool          `xml:"smtClean,attr,omitempty"`
	SmtIdAttr           *Uint32       `xml:"smtId,attr,omitempty"`
	BmkAttr             string        `xml:"bmk,attr,omitempty"`
	EGFillProperties    []*EGFillProperties
	EGEffectProperties  []*EGEffectProperties
	EGTextUnderlineLine []*EGTextUnderlineLine
	EGTextUnderlineFill []*EGTextUnderlineFill
	Ln                  []*CTLineProperties         `xml:"ln"`
	Highlight           []*CTColor                  `xml:"highlight"`
	Latin               []*CTTextFont               `xml:"latin"`
	Ea                  []*CTTextFont               `xml:"ea"`
	Cs                  []*CTTextFont               `xml:"cs"`
	Sym                 []*CTTextFont               `xml:"sym"`
	HlinkClick          []*CTHyperlink              `xml:"hlinkClick"`
	HlinkMouseOver      []*CTHyperlink              `xml:"hlinkMouseOver"`
	Rtl                 *CTBoolean                  `xml:"rtl"`
	ExtLst              []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTBoolean ...
type CTBoolean struct {
	ValAttr *STOnOff `xml:"val,attr,omitempty"`
}

// STTextSpacingPoint ...
type STTextSpacingPoint int

// STTextSpacingPercentOrPercentString ...
type STTextSpacingPercentOrPercentString struct {
	STPercentage string
}

// CTTextSpacingPercent ...
type CTTextSpacingPercent struct {
	ValAttr *STTextSpacingPercentOrPercentString `xml:"val,attr"`
}

// CTTextSpacingPoint ...
type CTTextSpacingPoint struct {
	ValAttr int `xml:"val,attr"`
}

// STTextMargin ...
type STTextMargin int

// STTextIndent ...
type STTextIndent int

// STTextTabAlignType ...
type STTextTabAlignType string

// CTTextTabStop ...
type CTTextTabStop struct {
	PosAttr  *STCoordinate32 `xml:"pos,attr,omitempty"`
	AlgnAttr string          `xml:"algn,attr,omitempty"`
}

// CTTextTabStopList ...
type CTTextTabStopList struct {
	Tab []*CTTextTabStop `xml:"tab"`
}

// CTTextLineBreak ...
type CTTextLineBreak struct {
	RPr []*CTTextCharacterProperties `xml:"rPr"`
}

// CTTextSpacing ...
type CTTextSpacing struct {
	SpcPct *CTTextSpacingPercent `xml:"spcPct"`
	SpcPts *CTTextSpacingPoint   `xml:"spcPts"`
}

// STTextAlignType ...
type STTextAlignType string

// STTextFontAlignType ...
type STTextFontAlignType string

// STTextIndentLevelType ...
type STTextIndentLevelType int

// CTTextParagraphProperties ...
type CTTextParagraphProperties struct {
	MarLAttr             int             `xml:"marL,attr,omitempty"`
	MarRAttr             int             `xml:"marR,attr,omitempty"`
	LvlAttr              int             `xml:"lvl,attr,omitempty"`
	IndentAttr           int             `xml:"indent,attr,omitempty"`
	AlgnAttr             string          `xml:"algn,attr,omitempty"`
	DefTabSzAttr         *STCoordinate32 `xml:"defTabSz,attr,omitempty"`
	RtlAttr              bool            `xml:"rtl,attr,omitempty"`
	EaLnBrkAttr          bool            `xml:"eaLnBrk,attr,omitempty"`
	FontAlgnAttr         string          `xml:"fontAlgn,attr,omitempty"`
	LatinLnBrkAttr       bool            `xml:"latinLnBrk,attr,omitempty"`
	HangingPunctAttr     bool            `xml:"hangingPunct,attr,omitempty"`
	EGTextBulletColor    []*EGTextBulletColor
	EGTextBulletSize     []*EGTextBulletSize
	EGTextBulletTypeface []*EGTextBulletTypeface
	EGTextBullet         []*EGTextBullet
	LnSpc                []*CTTextSpacing             `xml:"lnSpc"`
	SpcBef               []*CTTextSpacing             `xml:"spcBef"`
	SpcAft               []*CTTextSpacing             `xml:"spcAft"`
	TabLst               []*CTTextTabStopList         `xml:"tabLst"`
	DefRPr               []*CTTextCharacterProperties `xml:"defRPr"`
	ExtLst               []*CTOfficeArtExtensionList  `xml:"extLst"`
}

// CTTextField ...
type CTTextField struct {
	IdAttr   string                       `xml:"id,attr"`
	TypeAttr string                       `xml:"type,attr,omitempty"`
	RPr      []*CTTextCharacterProperties `xml:"rPr"`
	PPr      []*CTTextParagraphProperties `xml:"pPr"`
	T        []string                     `xml:"t"`
}

// EGTextRun ...
type EGTextRun struct {
	R   *CTRegularTextRun
	Br  *CTTextLineBreak
	Fld *CTTextField
}

// CTRegularTextRun ...
type CTRegularTextRun struct {
	RPr []*CTTextCharacterProperties `xml:"rPr"`
	T   []string                     `xml:"t"`
}
