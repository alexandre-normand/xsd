// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

import (
	"time"
)

// STTransitionSideDirectionType ...
type STTransitionSideDirectionType string

// STTransitionCornerDirectionType ...
type STTransitionCornerDirectionType string

// STTransitionInOutDirectionType ...
type STTransitionInOutDirectionType string

// CTSideDirectionTransition ...
type CTSideDirectionTransition struct {
	DirAttr string `xml:"dir,attr,omitempty"`
}

// CTCornerDirectionTransition ...
type CTCornerDirectionTransition struct {
	DirAttr string `xml:"dir,attr,omitempty"`
}

// STTransitionEightDirectionType ...
type STTransitionEightDirectionType struct {
	STTransitionSideDirectionType   string
	STTransitionCornerDirectionType string
}

// CTEightDirectionTransition ...
type CTEightDirectionTransition struct {
	DirAttr *STTransitionEightDirectionType `xml:"dir,attr,omitempty"`
}

// CTOrientationTransition ...
type CTOrientationTransition struct {
	DirAttr string `xml:"dir,attr,omitempty"`
}

// CTInOutTransition ...
type CTInOutTransition struct {
	DirAttr string `xml:"dir,attr,omitempty"`
}

// CTOptionalBlackTransition ...
type CTOptionalBlackTransition struct {
	ThruBlkAttr bool `xml:"thruBlk,attr,omitempty"`
}

// CTSplitTransition ...
type CTSplitTransition struct {
	OrientAttr string `xml:"orient,attr,omitempty"`
	DirAttr    string `xml:"dir,attr,omitempty"`
}

// CTWheelTransition ...
type CTWheelTransition struct {
	SpokesAttr *Uint32 `xml:"spokes,attr,omitempty"`
}

// CTTransitionStartSoundAction ...
type CTTransitionStartSoundAction struct {
	LoopAttr bool                      `xml:"loop,attr,omitempty"`
	Snd      []*CTEmbeddedWAVAudioFile `xml:"snd"`
}

// CTTransitionSoundAction ...
type CTTransitionSoundAction struct {
	StSnd  *CTTransitionStartSoundAction `xml:"stSnd"`
	EndSnd *CTEmpty                      `xml:"endSnd"`
}

// STTransitionSpeed ...
type STTransitionSpeed string

// CTSlideTransition ...
type CTSlideTransition struct {
	SpdAttr      string                       `xml:"spd,attr,omitempty"`
	AdvClickAttr bool                         `xml:"advClick,attr,omitempty"`
	AdvTmAttr    *Uint32                      `xml:"advTm,attr,omitempty"`
	Blinds       *CTOrientationTransition     `xml:"blinds"`
	Checker      *CTOrientationTransition     `xml:"checker"`
	Circle       *CTEmpty                     `xml:"circle"`
	Dissolve     *CTEmpty                     `xml:"dissolve"`
	Comb         *CTOrientationTransition     `xml:"comb"`
	Cover        *CTEightDirectionTransition  `xml:"cover"`
	Cut          *CTOptionalBlackTransition   `xml:"cut"`
	Diamond      *CTEmpty                     `xml:"diamond"`
	Fade         *CTOptionalBlackTransition   `xml:"fade"`
	Newsflash    *CTEmpty                     `xml:"newsflash"`
	Plus         *CTEmpty                     `xml:"plus"`
	Pull         *CTEightDirectionTransition  `xml:"pull"`
	Push         *CTSideDirectionTransition   `xml:"push"`
	Random       *CTEmpty                     `xml:"random"`
	RandomBar    *CTOrientationTransition     `xml:"randomBar"`
	Split        *CTSplitTransition           `xml:"split"`
	Strips       *CTCornerDirectionTransition `xml:"strips"`
	Wedge        *CTEmpty                     `xml:"wedge"`
	Wheel        *CTWheelTransition           `xml:"wheel"`
	Wipe         *CTSideDirectionTransition   `xml:"wipe"`
	Zoom         *CTInOutTransition           `xml:"zoom"`
	SndAc        []*CTTransitionSoundAction   `xml:"sndAc"`
	ExtLst       []*CTExtensionListModify     `xml:"extLst"`
}

// STTLTimeIndefinite ...
type STTLTimeIndefinite string

// STTLTime ...
type STTLTime struct {
	UnsignedInt        *Uint32
	STTLTimeIndefinite string
}

// STTLTimeNodeID ...
type STTLTimeNodeID *Uint32

// CTTLIterateIntervalTime ...
type CTTLIterateIntervalTime struct {
	ValAttr *STTLTime `xml:"val,attr"`
}

// CTTLIterateIntervalPercentage ...
type CTTLIterateIntervalPercentage struct {
	ValAttr *STPositivePercentage `xml:"val,attr"`
}

// STIterateType ...
type STIterateType string

// CTTLIterateData ...
type CTTLIterateData struct {
	TypeAttr      string                         `xml:"type,attr,omitempty"`
	BackwardsAttr bool                           `xml:"backwards,attr,omitempty"`
	TmAbs         *CTTLIterateIntervalTime       `xml:"tmAbs"`
	TmPct         *CTTLIterateIntervalPercentage `xml:"tmPct"`
}

// CTTLSubShapeId ...
type CTTLSubShapeId struct {
	SpidAttr string `xml:"spid,attr"`
}

// CTTLTextTargetElement ...
type CTTLTextTargetElement struct {
	CharRg *CTIndexRange `xml:"charRg"`
	PRg    *CTIndexRange `xml:"pRg"`
}

// STTLChartSubelementType ...
type STTLChartSubelementType string

// CTTLOleChartTargetElement ...
type CTTLOleChartTargetElement struct {
	TypeAttr string  `xml:"type,attr"`
	LvlAttr  *Uint32 `xml:"lvl,attr,omitempty"`
}

// CTTLShapeTargetElement ...
type CTTLShapeTargetElement struct {
	SpidAttr   *Uint32                    `xml:"spid,attr"`
	Bg         *CTEmpty                   `xml:"bg"`
	SubSp      *CTTLSubShapeId            `xml:"subSp"`
	OleChartEl *CTTLOleChartTargetElement `xml:"oleChartEl"`
	TxEl       *CTTLTextTargetElement     `xml:"txEl"`
	GraphicEl  *CTAnimationElementChoice  `xml:"graphicEl"`
}

// CTTLTimeTargetElement ...
type CTTLTimeTargetElement struct {
	SldTgt *CTEmpty                `xml:"sldTgt"`
	SndTgt *CTEmbeddedWAVAudioFile `xml:"sndTgt"`
	SpTgt  *CTTLShapeTargetElement `xml:"spTgt"`
	InkTgt *CTTLSubShapeId         `xml:"inkTgt"`
}

// CTTLTriggerTimeNodeID ...
type CTTLTriggerTimeNodeID struct {
	ValAttr *Uint32 `xml:"val,attr"`
}

// STTLTriggerRuntimeNode ...
type STTLTriggerRuntimeNode string

// CTTLTriggerRuntimeNode ...
type CTTLTriggerRuntimeNode struct {
	ValAttr string `xml:"val,attr"`
}

// STTLTriggerEvent ...
type STTLTriggerEvent string

// CTTLTimeCondition ...
type CTTLTimeCondition struct {
	EvtAttr   string                  `xml:"evt,attr,omitempty"`
	DelayAttr *STTLTime               `xml:"delay,attr,omitempty"`
	TgtEl     *CTTLTimeTargetElement  `xml:"tgtEl"`
	Tn        *CTTLTriggerTimeNodeID  `xml:"tn"`
	Rtn       *CTTLTriggerRuntimeNode `xml:"rtn"`
}

// CTTLTimeConditionList ...
type CTTLTimeConditionList struct {
	Cond []*CTTLTimeCondition `xml:"cond"`
}

// CTTimeNodeList ...
type CTTimeNodeList struct {
	Par        *CTTLTimeNodeParallel        `xml:"par"`
	Seq        *CTTLTimeNodeSequence        `xml:"seq"`
	Excl       *CTTLTimeNodeExclusive       `xml:"excl"`
	Anim       *CTTLAnimateBehavior         `xml:"anim"`
	AnimClr    *CTTLAnimateColorBehavior    `xml:"animClr"`
	AnimEffect *CTTLAnimateEffectBehavior   `xml:"animEffect"`
	AnimMotion *CTTLAnimateMotionBehavior   `xml:"animMotion"`
	AnimRot    *CTTLAnimateRotationBehavior `xml:"animRot"`
	AnimScale  *CTTLAnimateScaleBehavior    `xml:"animScale"`
	Cmd        *CTTLCommandBehavior         `xml:"cmd"`
	Set        *CTTLSetBehavior             `xml:"set"`
	Audio      *CTTLMediaNodeAudio          `xml:"audio"`
	Video      *CTTLMediaNodeVideo          `xml:"video"`
}

// STTLTimeNodePresetClassType ...
type STTLTimeNodePresetClassType string

// STTLTimeNodeRestartType ...
type STTLTimeNodeRestartType string

// STTLTimeNodeFillType ...
type STTLTimeNodeFillType string

// STTLTimeNodeSyncType ...
type STTLTimeNodeSyncType string

// STTLTimeNodeMasterRelation ...
type STTLTimeNodeMasterRelation string

// STTLTimeNodeType ...
type STTLTimeNodeType string

// CTTLCommonTimeNodeData ...
type CTTLCommonTimeNodeData struct {
	IdAttr            *Uint32                    `xml:"id,attr,omitempty"`
	PresetIDAttr      int                        `xml:"presetID,attr,omitempty"`
	PresetClassAttr   string                     `xml:"presetClass,attr,omitempty"`
	PresetSubtypeAttr int                        `xml:"presetSubtype,attr,omitempty"`
	DurAttr           *STTLTime                  `xml:"dur,attr,omitempty"`
	RepeatCountAttr   *STTLTime                  `xml:"repeatCount,attr,omitempty"`
	RepeatDurAttr     *STTLTime                  `xml:"repeatDur,attr,omitempty"`
	SpdAttr           *STPercentage              `xml:"spd,attr,omitempty"`
	AccelAttr         *STPositiveFixedPercentage `xml:"accel,attr,omitempty"`
	DecelAttr         *STPositiveFixedPercentage `xml:"decel,attr,omitempty"`
	AutoRevAttr       bool                       `xml:"autoRev,attr,omitempty"`
	RestartAttr       string                     `xml:"restart,attr,omitempty"`
	FillAttr          string                     `xml:"fill,attr,omitempty"`
	SyncBehaviorAttr  string                     `xml:"syncBehavior,attr,omitempty"`
	TmFilterAttr      string                     `xml:"tmFilter,attr,omitempty"`
	EvtFilterAttr     string                     `xml:"evtFilter,attr,omitempty"`
	DisplayAttr       bool                       `xml:"display,attr,omitempty"`
	MasterRelAttr     string                     `xml:"masterRel,attr,omitempty"`
	BldLvlAttr        int                        `xml:"bldLvl,attr,omitempty"`
	GrpIdAttr         *Uint32                    `xml:"grpId,attr,omitempty"`
	AfterEffectAttr   bool                       `xml:"afterEffect,attr,omitempty"`
	NodeTypeAttr      string                     `xml:"nodeType,attr,omitempty"`
	NodePhAttr        bool                       `xml:"nodePh,attr,omitempty"`
	StCondLst         []*CTTLTimeConditionList   `xml:"stCondLst"`
	EndCondLst        []*CTTLTimeConditionList   `xml:"endCondLst"`
	EndSync           []*CTTLTimeCondition       `xml:"endSync"`
	Iterate           []*CTTLIterateData         `xml:"iterate"`
	ChildTnLst        []*CTTimeNodeList          `xml:"childTnLst"`
	SubTnLst          []*CTTimeNodeList          `xml:"subTnLst"`
}

// CTTLTimeNodeParallel ...
type CTTLTimeNodeParallel struct {
	CTn []*CTTLCommonTimeNodeData `xml:"cTn"`
}

// STTLNextActionType ...
type STTLNextActionType string

// STTLPreviousActionType ...
type STTLPreviousActionType string

// CTTLTimeNodeSequence ...
type CTTLTimeNodeSequence struct {
	ConcurrentAttr bool                      `xml:"concurrent,attr,omitempty"`
	PrevAcAttr     string                    `xml:"prevAc,attr,omitempty"`
	NextAcAttr     string                    `xml:"nextAc,attr,omitempty"`
	CTn            []*CTTLCommonTimeNodeData `xml:"cTn"`
	PrevCondLst    []*CTTLTimeConditionList  `xml:"prevCondLst"`
	NextCondLst    []*CTTLTimeConditionList  `xml:"nextCondLst"`
}

// CTTLTimeNodeExclusive ...
type CTTLTimeNodeExclusive struct {
	CTn []*CTTLCommonTimeNodeData `xml:"cTn"`
}

// CTTLBehaviorAttributeNameList ...
type CTTLBehaviorAttributeNameList struct {
	AttrName []string `xml:"attrName"`
}

// STTLBehaviorAdditiveType ...
type STTLBehaviorAdditiveType string

// STTLBehaviorAccumulateType ...
type STTLBehaviorAccumulateType string

// STTLBehaviorTransformType ...
type STTLBehaviorTransformType string

// STTLBehaviorOverrideType ...
type STTLBehaviorOverrideType string

// CTTLCommonBehaviorData ...
type CTTLCommonBehaviorData struct {
	AdditiveAttr   string                           `xml:"additive,attr,omitempty"`
	AccumulateAttr string                           `xml:"accumulate,attr,omitempty"`
	XfrmTypeAttr   string                           `xml:"xfrmType,attr,omitempty"`
	FromAttr       string                           `xml:"from,attr,omitempty"`
	ToAttr         string                           `xml:"to,attr,omitempty"`
	ByAttr         string                           `xml:"by,attr,omitempty"`
	RctxAttr       string                           `xml:"rctx,attr,omitempty"`
	OverrideAttr   string                           `xml:"override,attr,omitempty"`
	CTn            []*CTTLCommonTimeNodeData        `xml:"cTn"`
	TgtEl          []*CTTLTimeTargetElement         `xml:"tgtEl"`
	AttrNameLst    []*CTTLBehaviorAttributeNameList `xml:"attrNameLst"`
}

// CTTLAnimVariantBooleanVal ...
type CTTLAnimVariantBooleanVal struct {
	ValAttr bool `xml:"val,attr"`
}

// CTTLAnimVariantIntegerVal ...
type CTTLAnimVariantIntegerVal struct {
	ValAttr int `xml:"val,attr"`
}

// CTTLAnimVariantFloatVal ...
type CTTLAnimVariantFloatVal struct {
	ValAttr *Float `xml:"val,attr"`
}

// CTTLAnimVariantStringVal ...
type CTTLAnimVariantStringVal struct {
	ValAttr string `xml:"val,attr"`
}

// CTTLAnimVariant ...
type CTTLAnimVariant struct {
	BoolVal *CTTLAnimVariantBooleanVal `xml:"boolVal"`
	IntVal  *CTTLAnimVariantIntegerVal `xml:"intVal"`
	FltVal  *CTTLAnimVariantFloatVal   `xml:"fltVal"`
	StrVal  *CTTLAnimVariantStringVal  `xml:"strVal"`
	ClrVal  *CTColor                   `xml:"clrVal"`
}

// STTLTimeAnimateValueTime ...
type STTLTimeAnimateValueTime struct {
	STPositiveFixedPercentage *STPositiveFixedPercentage
	STTLTimeIndefinite        string
}

// CTTLTimeAnimateValue ...
type CTTLTimeAnimateValue struct {
	TmAttr   *STTLTimeAnimateValueTime `xml:"tm,attr,omitempty"`
	FmlaAttr string                    `xml:"fmla,attr,omitempty"`
	Val      []*CTTLAnimVariant        `xml:"val"`
}

// CTTLTimeAnimateValueList ...
type CTTLTimeAnimateValueList struct {
	Tav []*CTTLTimeAnimateValue `xml:"tav"`
}

// STTLAnimateBehaviorCalcMode ...
type STTLAnimateBehaviorCalcMode string

// STTLAnimateBehaviorValueType ...
type STTLAnimateBehaviorValueType string

// CTTLAnimateBehavior ...
type CTTLAnimateBehavior struct {
	ByAttr        string                      `xml:"by,attr,omitempty"`
	FromAttr      string                      `xml:"from,attr,omitempty"`
	ToAttr        string                      `xml:"to,attr,omitempty"`
	CalcmodeAttr  string                      `xml:"calcmode,attr,omitempty"`
	ValueTypeAttr string                      `xml:"valueType,attr,omitempty"`
	CBhvr         []*CTTLCommonBehaviorData   `xml:"cBhvr"`
	TavLst        []*CTTLTimeAnimateValueList `xml:"tavLst"`
}

// CTTLByRgbColorTransform ...
type CTTLByRgbColorTransform struct {
	RAttr *STFixedPercentage `xml:"r,attr"`
	GAttr *STFixedPercentage `xml:"g,attr"`
	BAttr *STFixedPercentage `xml:"b,attr"`
}

// CTTLByHslColorTransform ...
type CTTLByHslColorTransform struct {
	HAttr int                `xml:"h,attr"`
	SAttr *STFixedPercentage `xml:"s,attr"`
	LAttr *STFixedPercentage `xml:"l,attr"`
}

// CTTLByAnimateColorTransform ...
type CTTLByAnimateColorTransform struct {
	Rgb *CTTLByRgbColorTransform `xml:"rgb"`
	Hsl *CTTLByHslColorTransform `xml:"hsl"`
}

// STTLAnimateColorSpace ...
type STTLAnimateColorSpace string

// STTLAnimateColorDirection ...
type STTLAnimateColorDirection string

// CTTLAnimateColorBehavior ...
type CTTLAnimateColorBehavior struct {
	ClrSpcAttr string                         `xml:"clrSpc,attr,omitempty"`
	DirAttr    string                         `xml:"dir,attr,omitempty"`
	CBhvr      []*CTTLCommonBehaviorData      `xml:"cBhvr"`
	By         []*CTTLByAnimateColorTransform `xml:"by"`
	From       []*CTColor                     `xml:"from"`
	To         []*CTColor                     `xml:"to"`
}

// STTLAnimateEffectTransition ...
type STTLAnimateEffectTransition string

// CTTLAnimateEffectBehavior ...
type CTTLAnimateEffectBehavior struct {
	TransitionAttr string                    `xml:"transition,attr,omitempty"`
	FilterAttr     string                    `xml:"filter,attr,omitempty"`
	PrLstAttr      string                    `xml:"prLst,attr,omitempty"`
	CBhvr          []*CTTLCommonBehaviorData `xml:"cBhvr"`
	Progress       []*CTTLAnimVariant        `xml:"progress"`
}

// STTLAnimateMotionBehaviorOrigin ...
type STTLAnimateMotionBehaviorOrigin string

// STTLAnimateMotionPathEditMode ...
type STTLAnimateMotionPathEditMode string

// CTTLPoint ...
type CTTLPoint struct {
	XAttr *STPercentage `xml:"x,attr"`
	YAttr *STPercentage `xml:"y,attr"`
}

// CTTLAnimateMotionBehavior ...
type CTTLAnimateMotionBehavior struct {
	OriginAttr       string                    `xml:"origin,attr,omitempty"`
	PathAttr         string                    `xml:"path,attr,omitempty"`
	PathEditModeAttr string                    `xml:"pathEditMode,attr,omitempty"`
	RAngAttr         int                       `xml:"rAng,attr,omitempty"`
	PtsTypesAttr     string                    `xml:"ptsTypes,attr,omitempty"`
	CBhvr            []*CTTLCommonBehaviorData `xml:"cBhvr"`
	By               []*CTTLPoint              `xml:"by"`
	From             []*CTTLPoint              `xml:"from"`
	To               []*CTTLPoint              `xml:"to"`
	RCtr             []*CTTLPoint              `xml:"rCtr"`
}

// CTTLAnimateRotationBehavior ...
type CTTLAnimateRotationBehavior struct {
	ByAttr   int                       `xml:"by,attr,omitempty"`
	FromAttr int                       `xml:"from,attr,omitempty"`
	ToAttr   int                       `xml:"to,attr,omitempty"`
	CBhvr    []*CTTLCommonBehaviorData `xml:"cBhvr"`
}

// CTTLAnimateScaleBehavior ...
type CTTLAnimateScaleBehavior struct {
	ZoomContentsAttr bool                      `xml:"zoomContents,attr,omitempty"`
	CBhvr            []*CTTLCommonBehaviorData `xml:"cBhvr"`
	By               []*CTTLPoint              `xml:"by"`
	From             []*CTTLPoint              `xml:"from"`
	To               []*CTTLPoint              `xml:"to"`
}

// STTLCommandType ...
type STTLCommandType string

// CTTLCommandBehavior ...
type CTTLCommandBehavior struct {
	TypeAttr string                    `xml:"type,attr,omitempty"`
	CmdAttr  string                    `xml:"cmd,attr,omitempty"`
	CBhvr    []*CTTLCommonBehaviorData `xml:"cBhvr"`
}

// CTTLSetBehavior ...
type CTTLSetBehavior struct {
	CBhvr []*CTTLCommonBehaviorData `xml:"cBhvr"`
	To    []*CTTLAnimVariant        `xml:"to"`
}

// CTTLCommonMediaNodeData ...
type CTTLCommonMediaNodeData struct {
	VolAttr             *STPositiveFixedPercentage `xml:"vol,attr,omitempty"`
	MuteAttr            bool                       `xml:"mute,attr,omitempty"`
	NumSldAttr          *Uint32                    `xml:"numSld,attr,omitempty"`
	ShowWhenStoppedAttr bool                       `xml:"showWhenStopped,attr,omitempty"`
	CTn                 []*CTTLCommonTimeNodeData  `xml:"cTn"`
	TgtEl               []*CTTLTimeTargetElement   `xml:"tgtEl"`
}

// CTTLMediaNodeAudio ...
type CTTLMediaNodeAudio struct {
	IsNarrationAttr bool                       `xml:"isNarration,attr,omitempty"`
	CMediaNode      []*CTTLCommonMediaNodeData `xml:"cMediaNode"`
}

// CTTLMediaNodeVideo ...
type CTTLMediaNodeVideo struct {
	FullScrnAttr bool                       `xml:"fullScrn,attr,omitempty"`
	CMediaNode   []*CTTLCommonMediaNodeData `xml:"cMediaNode"`
}

// AGTLBuild ...
type AGTLBuild struct {
	SpidAttr     *Uint32 `xml:"spid,attr"`
	GrpIdAttr    *Uint32 `xml:"grpId,attr"`
	UiExpandAttr bool    `xml:"uiExpand,attr,omitempty"`
}

// CTTLTemplate ...
type CTTLTemplate struct {
	LvlAttr *Uint32           `xml:"lvl,attr,omitempty"`
	TnLst   []*CTTimeNodeList `xml:"tnLst"`
}

// CTTLTemplateList ...
type CTTLTemplateList struct {
	Tmpl []*CTTLTemplate `xml:"tmpl"`
}

// STTLParaBuildType ...
type STTLParaBuildType string

// CTTLBuildParagraph ...
type CTTLBuildParagraph struct {
	AGTLBuild            *AGTLBuild
	BuildAttr            string              `xml:"build,attr,omitempty"`
	BldLvlAttr           *Uint32             `xml:"bldLvl,attr,omitempty"`
	AnimBgAttr           bool                `xml:"animBg,attr,omitempty"`
	AutoUpdateAnimBgAttr bool                `xml:"autoUpdateAnimBg,attr,omitempty"`
	RevAttr              bool                `xml:"rev,attr,omitempty"`
	AdvAutoAttr          *STTLTime           `xml:"advAuto,attr,omitempty"`
	TmplLst              []*CTTLTemplateList `xml:"tmplLst"`
}

// STTLDiagramBuildType ...
type STTLDiagramBuildType string

// CTTLBuildDiagram ...
type CTTLBuildDiagram struct {
	AGTLBuild *AGTLBuild
	BldAttr   string `xml:"bld,attr,omitempty"`
}

// STTLOleChartBuildType ...
type STTLOleChartBuildType string

// CTTLOleBuildChart ...
type CTTLOleBuildChart struct {
	AGTLBuild  *AGTLBuild
	BldAttr    string `xml:"bld,attr,omitempty"`
	AnimBgAttr bool   `xml:"animBg,attr,omitempty"`
}

// CTTLGraphicalObjectBuild ...
type CTTLGraphicalObjectBuild struct {
	AGTLBuild *AGTLBuild
	BldAsOne  *CTEmpty                                   `xml:"bldAsOne"`
	BldSub    *CTAnimationGraphicalObjectBuildProperties `xml:"bldSub"`
}

// CTBuildList ...
type CTBuildList struct {
	BldP        *CTTLBuildParagraph       `xml:"bldP"`
	BldDgm      *CTTLBuildDiagram         `xml:"bldDgm"`
	BldOleChart *CTTLOleBuildChart        `xml:"bldOleChart"`
	BldGraphic  *CTTLGraphicalObjectBuild `xml:"bldGraphic"`
}

// CTSlideTiming ...
type CTSlideTiming struct {
	TnLst  []*CTTimeNodeList        `xml:"tnLst"`
	BldLst []*CTBuildList           `xml:"bldLst"`
	ExtLst []*CTExtensionListModify `xml:"extLst"`
}

// CTEmpty ...
type CTEmpty struct {
}

// STName ...
type STName string

// STDirection ...
type STDirection string

// STIndex ...
type STIndex *Uint32

// CTIndexRange ...
type CTIndexRange struct {
	StAttr  *Uint32 `xml:"st,attr"`
	EndAttr *Uint32 `xml:"end,attr"`
}

// CTSlideRelationshipListEntry ...
type CTSlideRelationshipListEntry struct {
	RIdAttr string `xml:"r:id,attr"`
}

// CTSlideRelationshipList ...
type CTSlideRelationshipList struct {
	Sld []*CTSlideRelationshipListEntry `xml:"sld"`
}

// CTCustomShowId ...
type CTCustomShowId struct {
	IdAttr *Uint32 `xml:"id,attr"`
}

// EGSlideListChoice ...
type EGSlideListChoice struct {
	SldAll   *CTEmpty
	SldRg    *CTIndexRange
	CustShow *CTCustomShowId
}

// CTCustomerData ...
type CTCustomerData struct {
	RIdAttr string `xml:"r:id,attr"`
}

// CTTagsData ...
type CTTagsData struct {
	RIdAttr string `xml:"r:id,attr"`
}

// CTCustomerDataList ...
type CTCustomerDataList struct {
	CustData []*CTCustomerData `xml:"custData"`
	Tags     []*CTTagsData     `xml:"tags"`
}

// CTExtension ...
type CTExtension struct {
	UriAttr string `xml:"uri,attr"`
}

// EGExtensionList ...
type EGExtensionList struct {
	Ext []*CTExtension
}

// CTExtensionList ...
type CTExtensionList struct {
	EGExtensionList []*EGExtensionList
}

// CTExtensionListModify ...
type CTExtensionListModify struct {
	ModAttr         bool `xml:"mod,attr,omitempty"`
	EGExtensionList []*EGExtensionList
}

// CTCommentAuthor ...
type CTCommentAuthor struct {
	IdAttr       *Uint32            `xml:"id,attr"`
	NameAttr     string             `xml:"name,attr"`
	InitialsAttr string             `xml:"initials,attr"`
	LastIdxAttr  *Uint32            `xml:"lastIdx,attr"`
	ClrIdxAttr   *Uint32            `xml:"clrIdx,attr"`
	ExtLst       []*CTExtensionList `xml:"extLst"`
}

// CTCommentAuthorList ...
type CTCommentAuthorList struct {
	CmAuthor []*CTCommentAuthor `xml:"cmAuthor"`
}

// CmAuthorLst ...
type CmAuthorLst *CTCommentAuthorList

// CTComment ...
type CTComment struct {
	AuthorIdAttr *Uint32                  `xml:"authorId,attr"`
	DtAttr       time.Time                `xml:"dt,attr,omitempty"`
	IdxAttr      *Uint32                  `xml:"idx,attr"`
	Pos          []*CTPoint2D             `xml:"pos"`
	Text         []string                 `xml:"text"`
	ExtLst       []*CTExtensionListModify `xml:"extLst"`
}

// CTCommentList ...
type CTCommentList struct {
	Cm []*CTComment `xml:"cm"`
}

// CmLst ...
type CmLst *CTCommentList

// AGOle ...
type AGOle struct {
	NameAttr       string `xml:"name,attr,omitempty"`
	ShowAsIconAttr bool   `xml:"showAsIcon,attr,omitempty"`
	RIdAttr        string `xml:"r:id,attr,omitempty"`
	ImgWAttr       int    `xml:"imgW,attr,omitempty"`
	ImgHAttr       int    `xml:"imgH,attr,omitempty"`
}

// STOleObjectFollowColorScheme ...
type STOleObjectFollowColorScheme string

// CTOleObjectEmbed ...
type CTOleObjectEmbed struct {
	FollowColorSchemeAttr string             `xml:"followColorScheme,attr,omitempty"`
	ExtLst                []*CTExtensionList `xml:"extLst"`
}

// CTOleObjectLink ...
type CTOleObjectLink struct {
	UpdateAutomaticAttr bool               `xml:"updateAutomatic,attr,omitempty"`
	ExtLst              []*CTExtensionList `xml:"extLst"`
}

// CTOleObject ...
type CTOleObject struct {
	AGOle      *AGOle
	ProgIdAttr string            `xml:"progId,attr,omitempty"`
	Embed      *CTOleObjectEmbed `xml:"embed"`
	Link       *CTOleObjectLink  `xml:"link"`
	Pic        []*CTPicture      `xml:"pic"`
}

// OleObj ...
type OleObj *CTOleObject

// CTControl ...
type CTControl struct {
	AGOle  *AGOle
	ExtLst []*CTExtensionList `xml:"extLst"`
	Pic    []*CTPicture       `xml:"pic"`
}

// CTControlList ...
type CTControlList struct {
	Control []*CTControl `xml:"control"`
}

// STSlideId ...
type STSlideId *Uint32

// CTSlideIdListEntry ...
type CTSlideIdListEntry struct {
	IdAttr  *Uint32            `xml:"id,attr"`
	RIdAttr string             `xml:"r:id,attr"`
	ExtLst  []*CTExtensionList `xml:"extLst"`
}

// CTSlideIdList ...
type CTSlideIdList struct {
	SldId []*CTSlideIdListEntry `xml:"sldId"`
}

// STSlideMasterId ...
type STSlideMasterId *Uint32

// CTSlideMasterIdListEntry ...
type CTSlideMasterIdListEntry struct {
	IdAttr  *Uint32            `xml:"id,attr,omitempty"`
	RIdAttr string             `xml:"r:id,attr"`
	ExtLst  []*CTExtensionList `xml:"extLst"`
}

// CTSlideMasterIdList ...
type CTSlideMasterIdList struct {
	SldMasterId []*CTSlideMasterIdListEntry `xml:"sldMasterId"`
}

// CTNotesMasterIdListEntry ...
type CTNotesMasterIdListEntry struct {
	RIdAttr string             `xml:"r:id,attr"`
	ExtLst  []*CTExtensionList `xml:"extLst"`
}

// CTNotesMasterIdList ...
type CTNotesMasterIdList struct {
	NotesMasterId []*CTNotesMasterIdListEntry `xml:"notesMasterId"`
}

// CTHandoutMasterIdListEntry ...
type CTHandoutMasterIdListEntry struct {
	RIdAttr string             `xml:"r:id,attr"`
	ExtLst  []*CTExtensionList `xml:"extLst"`
}

// CTHandoutMasterIdList ...
type CTHandoutMasterIdList struct {
	HandoutMasterId []*CTHandoutMasterIdListEntry `xml:"handoutMasterId"`
}

// CTEmbeddedFontDataId ...
type CTEmbeddedFontDataId struct {
	RIdAttr string `xml:"r:id,attr"`
}

// CTEmbeddedFontListEntry ...
type CTEmbeddedFontListEntry struct {
	Font       []*CTTextFont           `xml:"font"`
	Regular    []*CTEmbeddedFontDataId `xml:"regular"`
	Bold       []*CTEmbeddedFontDataId `xml:"bold"`
	Italic     []*CTEmbeddedFontDataId `xml:"italic"`
	BoldItalic []*CTEmbeddedFontDataId `xml:"boldItalic"`
}

// CTEmbeddedFontList ...
type CTEmbeddedFontList struct {
	EmbeddedFont []*CTEmbeddedFontListEntry `xml:"embeddedFont"`
}

// CTSmartTags ...
type CTSmartTags struct {
	RIdAttr string `xml:"r:id,attr"`
}

// CTCustomShow ...
type CTCustomShow struct {
	NameAttr string                     `xml:"name,attr"`
	IdAttr   *Uint32                    `xml:"id,attr"`
	SldLst   []*CTSlideRelationshipList `xml:"sldLst"`
	ExtLst   []*CTExtensionList         `xml:"extLst"`
}

// CTCustomShowList ...
type CTCustomShowList struct {
	CustShow []*CTCustomShow `xml:"custShow"`
}

// STPhotoAlbumLayout ...
type STPhotoAlbumLayout string

// STPhotoAlbumFrameShape ...
type STPhotoAlbumFrameShape string

// CTPhotoAlbum ...
type CTPhotoAlbum struct {
	BwAttr           bool               `xml:"bw,attr,omitempty"`
	ShowCaptionsAttr bool               `xml:"showCaptions,attr,omitempty"`
	LayoutAttr       string             `xml:"layout,attr,omitempty"`
	FrameAttr        string             `xml:"frame,attr,omitempty"`
	ExtLst           []*CTExtensionList `xml:"extLst"`
}

// STSlideSizeCoordinate ...
type STSlideSizeCoordinate int

// STSlideSizeType ...
type STSlideSizeType string

// CTSlideSize ...
type CTSlideSize struct {
	CxAttr   int    `xml:"cx,attr"`
	CyAttr   int    `xml:"cy,attr"`
	TypeAttr string `xml:"type,attr,omitempty"`
}

// CTKinsoku ...
type CTKinsoku struct {
	LangAttr          string `xml:"lang,attr,omitempty"`
	InvalStCharsAttr  string `xml:"invalStChars,attr"`
	InvalEndCharsAttr string `xml:"invalEndChars,attr"`
}

// STBookmarkIdSeed ...
type STBookmarkIdSeed *Uint32

// CTModifyVerifier ...
type CTModifyVerifier struct {
	AlgorithmNameAttr string  `xml:"algorithmName,attr,omitempty"`
	HashValueAttr     []byte  `xml:"hashValue,attr,omitempty"`
	SaltValueAttr     []byte  `xml:"saltValue,attr,omitempty"`
	SpinValueAttr     *Uint32 `xml:"spinValue,attr,omitempty"`
}

// CTPresentation ...
type CTPresentation struct {
	ServerZoomAttr               *STPercentage            `xml:"serverZoom,attr,omitempty"`
	FirstSlideNumAttr            int                      `xml:"firstSlideNum,attr,omitempty"`
	ShowSpecialPlsOnTitleSldAttr bool                     `xml:"showSpecialPlsOnTitleSld,attr,omitempty"`
	RtlAttr                      bool                     `xml:"rtl,attr,omitempty"`
	RemovePersonalInfoOnSaveAttr bool                     `xml:"removePersonalInfoOnSave,attr,omitempty"`
	CompatModeAttr               bool                     `xml:"compatMode,attr,omitempty"`
	StrictFirstAndLastCharsAttr  bool                     `xml:"strictFirstAndLastChars,attr,omitempty"`
	EmbedTrueTypeFontsAttr       bool                     `xml:"embedTrueTypeFonts,attr,omitempty"`
	SaveSubsetFontsAttr          bool                     `xml:"saveSubsetFonts,attr,omitempty"`
	AutoCompressPicturesAttr     bool                     `xml:"autoCompressPictures,attr,omitempty"`
	BookmarkIdSeedAttr           *Uint32                  `xml:"bookmarkIdSeed,attr,omitempty"`
	ConformanceAttr              string                   `xml:"conformance,attr,omitempty"`
	SldMasterIdLst               []*CTSlideMasterIdList   `xml:"sldMasterIdLst"`
	NotesMasterIdLst             []*CTNotesMasterIdList   `xml:"notesMasterIdLst"`
	HandoutMasterIdLst           []*CTHandoutMasterIdList `xml:"handoutMasterIdLst"`
	SldIdLst                     []*CTSlideIdList         `xml:"sldIdLst"`
	SldSz                        []*CTSlideSize           `xml:"sldSz"`
	NotesSz                      []*CTPositiveSize2D      `xml:"notesSz"`
	SmartTags                    []*CTSmartTags           `xml:"smartTags"`
	EmbeddedFontLst              []*CTEmbeddedFontList    `xml:"embeddedFontLst"`
	CustShowLst                  []*CTCustomShowList      `xml:"custShowLst"`
	PhotoAlbum                   []*CTPhotoAlbum          `xml:"photoAlbum"`
	CustDataLst                  []*CTCustomerDataList    `xml:"custDataLst"`
	Kinsoku                      *CTKinsoku               `xml:"kinsoku"`
	DefaultTextStyle             []*CTTextListStyle       `xml:"defaultTextStyle"`
	ModifyVerifier               []*CTModifyVerifier      `xml:"modifyVerifier"`
	ExtLst                       []*CTExtensionList       `xml:"extLst"`
}

// Presentation ...
type Presentation *CTPresentation

// CTHtmlPublishProperties ...
type CTHtmlPublishProperties struct {
	ShowSpeakerNotesAttr bool   `xml:"showSpeakerNotes,attr,omitempty"`
	TargetAttr           string `xml:"target,attr,omitempty"`
	TitleAttr            string `xml:"title,attr,omitempty"`
	RIdAttr              string `xml:"r:id,attr"`
	EGSlideListChoice    []*EGSlideListChoice
	ExtLst               []*CTExtensionList `xml:"extLst"`
}

// STPrintWhat ...
type STPrintWhat string

// STPrintColorMode ...
type STPrintColorMode string

// CTPrintProperties ...
type CTPrintProperties struct {
	PrnWhatAttr         string             `xml:"prnWhat,attr,omitempty"`
	ClrModeAttr         string             `xml:"clrMode,attr,omitempty"`
	HiddenSlidesAttr    bool               `xml:"hiddenSlides,attr,omitempty"`
	ScaleToFitPaperAttr bool               `xml:"scaleToFitPaper,attr,omitempty"`
	FrameSlidesAttr     bool               `xml:"frameSlides,attr,omitempty"`
	ExtLst              []*CTExtensionList `xml:"extLst"`
}

// CTShowInfoBrowse ...
type CTShowInfoBrowse struct {
	ShowScrollbarAttr bool `xml:"showScrollbar,attr,omitempty"`
}

// CTShowInfoKiosk ...
type CTShowInfoKiosk struct {
	RestartAttr *Uint32 `xml:"restart,attr,omitempty"`
}

// EGShowType ...
type EGShowType struct {
	Present *CTEmpty
	Browse  *CTShowInfoBrowse
	Kiosk   *CTShowInfoKiosk
}

// CTShowProperties ...
type CTShowProperties struct {
	LoopAttr          bool `xml:"loop,attr,omitempty"`
	ShowNarrationAttr bool `xml:"showNarration,attr,omitempty"`
	ShowAnimationAttr bool `xml:"showAnimation,attr,omitempty"`
	UseTimingsAttr    bool `xml:"useTimings,attr,omitempty"`
	EGShowType        []*EGShowType
	EGSlideListChoice []*EGSlideListChoice
	PenClr            []*CTColor         `xml:"penClr"`
	ExtLst            []*CTExtensionList `xml:"extLst"`
}

// CTPresentationProperties ...
type CTPresentationProperties struct {
	PrnPr  []*CTPrintProperties `xml:"prnPr"`
	ShowPr []*CTShowProperties  `xml:"showPr"`
	ClrMru []*CTColorMRU        `xml:"clrMru"`
	ExtLst []*CTExtensionList   `xml:"extLst"`
}

// PresentationPr ...
type PresentationPr *CTPresentationProperties

// CTHeaderFooter ...
type CTHeaderFooter struct {
	SldNumAttr bool                     `xml:"sldNum,attr,omitempty"`
	HdrAttr    bool                     `xml:"hdr,attr,omitempty"`
	FtrAttr    bool                     `xml:"ftr,attr,omitempty"`
	DtAttr     bool                     `xml:"dt,attr,omitempty"`
	ExtLst     []*CTExtensionListModify `xml:"extLst"`
}

// STPlaceholderType ...
type STPlaceholderType string

// STPlaceholderSize ...
type STPlaceholderSize string

// CTPlaceholder ...
type CTPlaceholder struct {
	TypeAttr            string                   `xml:"type,attr,omitempty"`
	OrientAttr          string                   `xml:"orient,attr,omitempty"`
	SzAttr              string                   `xml:"sz,attr,omitempty"`
	IdxAttr             *Uint32                  `xml:"idx,attr,omitempty"`
	HasCustomPromptAttr bool                     `xml:"hasCustomPrompt,attr,omitempty"`
	ExtLst              []*CTExtensionListModify `xml:"extLst"`
}

// CTApplicationNonVisualDrawingProps ...
type CTApplicationNonVisualDrawingProps struct {
	IsPhotoAttr   bool `xml:"isPhoto,attr,omitempty"`
	UserDrawnAttr bool `xml:"userDrawn,attr,omitempty"`
	AEGMedia      []*EGMedia
	Ph            []*CTPlaceholder      `xml:"ph"`
	CustDataLst   []*CTCustomerDataList `xml:"custDataLst"`
	ExtLst        []*CTExtensionList    `xml:"extLst"`
}

// CTShapeNonVisual ...
type CTShapeNonVisual struct {
	CNvPr   []*CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvSpPr []*CTNonVisualDrawingShapeProps       `xml:"cNvSpPr"`
	NvPr    []*CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTShape ...
type CTShape struct {
	UseBgFillAttr bool                     `xml:"useBgFill,attr,omitempty"`
	NvSpPr        []*CTShapeNonVisual      `xml:"nvSpPr"`
	SpPr          []*CTShapeProperties     `xml:"spPr"`
	Style         []*CTShapeStyle          `xml:"style"`
	TxBody        []*CTTextBody            `xml:"txBody"`
	ExtLst        []*CTExtensionListModify `xml:"extLst"`
}

// CTConnectorNonVisual ...
type CTConnectorNonVisual struct {
	CNvPr      []*CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvCxnSpPr []*CTNonVisualConnectorProperties     `xml:"cNvCxnSpPr"`
	NvPr       []*CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTConnector ...
type CTConnector struct {
	NvCxnSpPr []*CTConnectorNonVisual  `xml:"nvCxnSpPr"`
	SpPr      []*CTShapeProperties     `xml:"spPr"`
	Style     []*CTShapeStyle          `xml:"style"`
	ExtLst    []*CTExtensionListModify `xml:"extLst"`
}

// CTPictureNonVisual ...
type CTPictureNonVisual struct {
	CNvPr    []*CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvPicPr []*CTNonVisualPictureProperties       `xml:"cNvPicPr"`
	NvPr     []*CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTPicture ...
type CTPicture struct {
	NvPicPr  []*CTPictureNonVisual    `xml:"nvPicPr"`
	BlipFill []*CTBlipFillProperties  `xml:"blipFill"`
	SpPr     []*CTShapeProperties     `xml:"spPr"`
	Style    []*CTShapeStyle          `xml:"style"`
	ExtLst   []*CTExtensionListModify `xml:"extLst"`
}

// CTGraphicalObjectFrameNonVisual ...
type CTGraphicalObjectFrameNonVisual struct {
	CNvPr             []*CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvGraphicFramePr []*CTNonVisualGraphicFrameProperties  `xml:"cNvGraphicFramePr"`
	NvPr              []*CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTGraphicalObjectFrame ...
type CTGraphicalObjectFrame struct {
	BwModeAttr       string                             `xml:"bwMode,attr,omitempty"`
	NvGraphicFramePr []*CTGraphicalObjectFrameNonVisual `xml:"nvGraphicFramePr"`
	Xfrm             []*CTTransform2D                   `xml:"xfrm"`
	AGraphic         []*CTGraphicalObject               `xml:"a:graphic"`
	ExtLst           []*CTExtensionListModify           `xml:"extLst"`
}

// CTGroupShapeNonVisual ...
type CTGroupShapeNonVisual struct {
	CNvPr      []*CTNonVisualDrawingProps            `xml:"cNvPr"`
	CNvGrpSpPr []*CTNonVisualGroupDrawingShapeProps  `xml:"cNvGrpSpPr"`
	NvPr       []*CTApplicationNonVisualDrawingProps `xml:"nvPr"`
}

// CTGroupShape ...
type CTGroupShape struct {
	NvGrpSpPr    []*CTGroupShapeNonVisual  `xml:"nvGrpSpPr"`
	GrpSpPr      []*CTGroupShapeProperties `xml:"grpSpPr"`
	Sp           *CTShape                  `xml:"sp"`
	GrpSp        *CTGroupShape             `xml:"grpSp"`
	GraphicFrame *CTGraphicalObjectFrame   `xml:"graphicFrame"`
	CxnSp        *CTConnector              `xml:"cxnSp"`
	Pic          *CTPicture                `xml:"pic"`
	ContentPart  *CTRel                    `xml:"contentPart"`
	ExtLst       []*CTExtensionListModify  `xml:"extLst"`
}

// CTRel ...
type CTRel struct {
	RIdAttr string `xml:"r:id,attr"`
}

// EGTopLevelSlide ...
type EGTopLevelSlide struct {
	ClrMap []*CTColorMapping
}

// EGChildSlide ...
type EGChildSlide struct {
	ClrMapOvr []*CTColorMappingOverride
}

// AGChildSlide ...
type AGChildSlide struct {
	ShowMasterSpAttr     bool `xml:"showMasterSp,attr,omitempty"`
	ShowMasterPhAnimAttr bool `xml:"showMasterPhAnim,attr,omitempty"`
}

// CTBackgroundProperties ...
type CTBackgroundProperties struct {
	ShadeToTitleAttr    bool `xml:"shadeToTitle,attr,omitempty"`
	AEGFillProperties   []*EGFillProperties
	AEGEffectProperties []*EGEffectProperties
	ExtLst              []*CTExtensionList `xml:"extLst"`
}

// EGBackground ...
type EGBackground struct {
	BgPr  *CTBackgroundProperties
	BgRef *CTStyleMatrixReference
}

// CTBackground ...
type CTBackground struct {
	BwModeAttr   string `xml:"bwMode,attr,omitempty"`
	EGBackground *EGBackground
}

// CTCommonSlideData ...
type CTCommonSlideData struct {
	NameAttr    string                `xml:"name,attr,omitempty"`
	Bg          []*CTBackground       `xml:"bg"`
	SpTree      []*CTGroupShape       `xml:"spTree"`
	CustDataLst []*CTCustomerDataList `xml:"custDataLst"`
	Controls    []*CTControlList      `xml:"controls"`
	ExtLst      []*CTExtensionList    `xml:"extLst"`
}

// CTSlide ...
type CTSlide struct {
	AGChildSlide *AGChildSlide
	ShowAttr     bool `xml:"show,attr,omitempty"`
	EGChildSlide []*EGChildSlide
	CSld         []*CTCommonSlideData     `xml:"cSld"`
	Transition   []*CTSlideTransition     `xml:"transition"`
	Timing       []*CTSlideTiming         `xml:"timing"`
	ExtLst       []*CTExtensionListModify `xml:"extLst"`
}

// Sld ...
type Sld *CTSlide

// STSlideLayoutType ...
type STSlideLayoutType string

// CTSlideLayout ...
type CTSlideLayout struct {
	AGChildSlide     *AGChildSlide
	MatchingNameAttr string `xml:"matchingName,attr,omitempty"`
	TypeAttr         string `xml:"type,attr,omitempty"`
	PreserveAttr     bool   `xml:"preserve,attr,omitempty"`
	UserDrawnAttr    bool   `xml:"userDrawn,attr,omitempty"`
	EGChildSlide     []*EGChildSlide
	CSld             []*CTCommonSlideData     `xml:"cSld"`
	Transition       []*CTSlideTransition     `xml:"transition"`
	Timing           []*CTSlideTiming         `xml:"timing"`
	Hf               []*CTHeaderFooter        `xml:"hf"`
	ExtLst           []*CTExtensionListModify `xml:"extLst"`
}

// SldLayout ...
type SldLayout *CTSlideLayout

// CTSlideMasterTextStyles ...
type CTSlideMasterTextStyles struct {
	TitleStyle []*CTTextListStyle `xml:"titleStyle"`
	BodyStyle  []*CTTextListStyle `xml:"bodyStyle"`
	OtherStyle []*CTTextListStyle `xml:"otherStyle"`
	ExtLst     []*CTExtensionList `xml:"extLst"`
}

// STSlideLayoutId ...
type STSlideLayoutId *Uint32

// CTSlideLayoutIdListEntry ...
type CTSlideLayoutIdListEntry struct {
	IdAttr  *Uint32            `xml:"id,attr,omitempty"`
	RIdAttr string             `xml:"r:id,attr"`
	ExtLst  []*CTExtensionList `xml:"extLst"`
}

// CTSlideLayoutIdList ...
type CTSlideLayoutIdList struct {
	SldLayoutId []*CTSlideLayoutIdListEntry `xml:"sldLayoutId"`
}

// CTSlideMaster ...
type CTSlideMaster struct {
	PreserveAttr    bool `xml:"preserve,attr,omitempty"`
	EGTopLevelSlide []*EGTopLevelSlide
	CSld            []*CTCommonSlideData       `xml:"cSld"`
	SldLayoutIdLst  []*CTSlideLayoutIdList     `xml:"sldLayoutIdLst"`
	Transition      []*CTSlideTransition       `xml:"transition"`
	Timing          []*CTSlideTiming           `xml:"timing"`
	Hf              []*CTHeaderFooter          `xml:"hf"`
	TxStyles        []*CTSlideMasterTextStyles `xml:"txStyles"`
	ExtLst          []*CTExtensionListModify   `xml:"extLst"`
}

// SldMaster ...
type SldMaster *CTSlideMaster

// CTHandoutMaster ...
type CTHandoutMaster struct {
	EGTopLevelSlide []*EGTopLevelSlide
	CSld            []*CTCommonSlideData     `xml:"cSld"`
	Hf              []*CTHeaderFooter        `xml:"hf"`
	ExtLst          []*CTExtensionListModify `xml:"extLst"`
}

// HandoutMaster ...
type HandoutMaster *CTHandoutMaster

// CTNotesMaster ...
type CTNotesMaster struct {
	EGTopLevelSlide []*EGTopLevelSlide
	CSld            []*CTCommonSlideData     `xml:"cSld"`
	Hf              []*CTHeaderFooter        `xml:"hf"`
	NotesStyle      []*CTTextListStyle       `xml:"notesStyle"`
	ExtLst          []*CTExtensionListModify `xml:"extLst"`
}

// NotesMaster ...
type NotesMaster *CTNotesMaster

// CTNotesSlide ...
type CTNotesSlide struct {
	AGChildSlide *AGChildSlide
	EGChildSlide []*EGChildSlide
	CSld         []*CTCommonSlideData     `xml:"cSld"`
	ExtLst       []*CTExtensionListModify `xml:"extLst"`
}

// Notes ...
type Notes *CTNotesSlide

// CTSlideSyncProperties ...
type CTSlideSyncProperties struct {
	ServerSldIdAttr           string             `xml:"serverSldId,attr"`
	ServerSldModifiedTimeAttr time.Time          `xml:"serverSldModifiedTime,attr"`
	ClientInsertedTimeAttr    time.Time          `xml:"clientInsertedTime,attr"`
	ExtLst                    []*CTExtensionList `xml:"extLst"`
}

// SldSyncPr ...
type SldSyncPr *CTSlideSyncProperties

// CTStringTag ...
type CTStringTag struct {
	NameAttr string `xml:"name,attr"`
	ValAttr  string `xml:"val,attr"`
}

// CTTagList ...
type CTTagList struct {
	Tag []*CTStringTag `xml:"tag"`
}

// TagLst ...
type TagLst *CTTagList

// STSplitterBarState ...
type STSplitterBarState string

// STViewType ...
type STViewType string

// CTNormalViewPortion ...
type CTNormalViewPortion struct {
	SzAttr         *STPositiveFixedPercentage `xml:"sz,attr"`
	AutoAdjustAttr bool                       `xml:"autoAdjust,attr,omitempty"`
}

// CTNormalViewProperties ...
type CTNormalViewProperties struct {
	ShowOutlineIconsAttr bool                   `xml:"showOutlineIcons,attr,omitempty"`
	SnapVertSplitterAttr bool                   `xml:"snapVertSplitter,attr,omitempty"`
	VertBarStateAttr     string                 `xml:"vertBarState,attr,omitempty"`
	HorzBarStateAttr     string                 `xml:"horzBarState,attr,omitempty"`
	PreferSingleViewAttr bool                   `xml:"preferSingleView,attr,omitempty"`
	RestoredLeft         []*CTNormalViewPortion `xml:"restoredLeft"`
	RestoredTop          []*CTNormalViewPortion `xml:"restoredTop"`
	ExtLst               []*CTExtensionList     `xml:"extLst"`
}

// CTCommonViewProperties ...
type CTCommonViewProperties struct {
	VarScaleAttr bool         `xml:"varScale,attr,omitempty"`
	Scale        []*CTScale2D `xml:"scale"`
	Origin       []*CTPoint2D `xml:"origin"`
}

// CTNotesTextViewProperties ...
type CTNotesTextViewProperties struct {
	CViewPr []*CTCommonViewProperties `xml:"cViewPr"`
	ExtLst  []*CTExtensionList        `xml:"extLst"`
}

// CTOutlineViewSlideEntry ...
type CTOutlineViewSlideEntry struct {
	RIdAttr      string `xml:"r:id,attr"`
	CollapseAttr bool   `xml:"collapse,attr,omitempty"`
}

// CTOutlineViewSlideList ...
type CTOutlineViewSlideList struct {
	Sld []*CTOutlineViewSlideEntry `xml:"sld"`
}

// CTOutlineViewProperties ...
type CTOutlineViewProperties struct {
	CViewPr []*CTCommonViewProperties `xml:"cViewPr"`
	SldLst  []*CTOutlineViewSlideList `xml:"sldLst"`
	ExtLst  []*CTExtensionList        `xml:"extLst"`
}

// CTSlideSorterViewProperties ...
type CTSlideSorterViewProperties struct {
	ShowFormattingAttr bool                      `xml:"showFormatting,attr,omitempty"`
	CViewPr            []*CTCommonViewProperties `xml:"cViewPr"`
	ExtLst             []*CTExtensionList        `xml:"extLst"`
}

// CTGuide ...
type CTGuide struct {
	OrientAttr string          `xml:"orient,attr,omitempty"`
	PosAttr    *STCoordinate32 `xml:"pos,attr,omitempty"`
}

// CTGuideList ...
type CTGuideList struct {
	Guide []*CTGuide `xml:"guide"`
}

// CTCommonSlideViewProperties ...
type CTCommonSlideViewProperties struct {
	SnapToGridAttr    bool                      `xml:"snapToGrid,attr,omitempty"`
	SnapToObjectsAttr bool                      `xml:"snapToObjects,attr,omitempty"`
	ShowGuidesAttr    bool                      `xml:"showGuides,attr,omitempty"`
	CViewPr           []*CTCommonViewProperties `xml:"cViewPr"`
	GuideLst          []*CTGuideList            `xml:"guideLst"`
}

// CTSlideViewProperties ...
type CTSlideViewProperties struct {
	CSldViewPr []*CTCommonSlideViewProperties `xml:"cSldViewPr"`
	ExtLst     []*CTExtensionList             `xml:"extLst"`
}

// CTNotesViewProperties ...
type CTNotesViewProperties struct {
	CSldViewPr []*CTCommonSlideViewProperties `xml:"cSldViewPr"`
	ExtLst     []*CTExtensionList             `xml:"extLst"`
}

// CTViewProperties ...
type CTViewProperties struct {
	LastViewAttr     string                         `xml:"lastView,attr,omitempty"`
	ShowCommentsAttr bool                           `xml:"showComments,attr,omitempty"`
	NormalViewPr     []*CTNormalViewProperties      `xml:"normalViewPr"`
	SlideViewPr      []*CTSlideViewProperties       `xml:"slideViewPr"`
	OutlineViewPr    []*CTOutlineViewProperties     `xml:"outlineViewPr"`
	NotesTextViewPr  []*CTNotesTextViewProperties   `xml:"notesTextViewPr"`
	SorterViewPr     []*CTSlideSorterViewProperties `xml:"sorterViewPr"`
	NotesViewPr      []*CTNotesViewProperties       `xml:"notesViewPr"`
	GridSpacing      []*CTPositiveSize2D            `xml:"gridSpacing"`
	ExtLst           []*CTExtensionList             `xml:"extLst"`
}

// ViewPr ...
type ViewPr *CTViewProperties
