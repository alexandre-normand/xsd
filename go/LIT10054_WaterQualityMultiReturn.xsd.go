// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

import (
	"time"
)

// DepthValueRecorded ...
type DepthValueRecorded struct {
	DepthValue      float64          `xml:"DepthValue"`
	DepthValueUnits *DepthValueUnits `xml:"DepthValueUnits"`
	DepthRelativeTo *DepthRelativeTo `xml:"DepthRelativeTo"`
}

// PurgedVolumeRecorded ...
type PurgedVolumeRecorded struct {
	PurgedVolume      float64            `xml:"PurgedVolume"`
	PurgedVolumeUnits *PurgedVolumeUnits `xml:"PurgedVolumeUnits"`
}

// Measurement ...
type Measurement struct {
	DeterminandName *DeterminandName `xml:"DeterminandName"`
	ResultType      *ResultType      `xml:"ResultType"`
	ResultValue     float64          `xml:"ResultValue"`
	ResultUnits     *ResultUnits     `xml:"ResultUnits"`
	Qualifier       *Qualifier       `xml:"Qualifier"`
	Comment         *Comment         `xml:"Comment"`
}

// Sample ...
type Sample struct {
	Sampler                        *Sampler                          `xml:"Sampler"`
	SampleType                     *SampleType                       `xml:"SampleType"`
	CustomerSamplePointName        *CustomerSamplePointName          `xml:"CustomerSamplePointName"`
	SampleDateTime                 time.Time                         `xml:"SampleDateTime"`
	PurposeTypeName                *PurposeTypeName                  `xml:"PurposeTypeName"`
	MaterialName                   *MaterialName                     `xml:"MaterialName"`
	Mechanism                      *Mechanism                        `xml:"Mechanism"`
	CustomersLabSampleRef          *CustomersLabSampleRef            `xml:"CustomersLabSampleRef"`
	CustomersLabSampleRefSecondary []*CustomersLabSampleRefSecondary `xml:"CustomersLabSampleRefSecondary"`
	Comment                        *Comment                          `xml:"Comment"`
	LabName                        *LabName                          `xml:"LabName"`
	AnalysisCompleteDateTime       time.Time                         `xml:"AnalysisCompleteDateTime"`
	DepthValueRecorded             *DepthValueRecorded               `xml:"DepthValueRecorded"`
	PurgedVolumeRecorded           *PurgedVolumeRecorded             `xml:"PurgedVolumeRecorded"`
	Measurement                    []*Measurement                    `xml:"Measurement"`
}

// FileUpload ...
type FileUpload struct {
	Source                      *Source                      `xml:"Source"`
	Sample                      []*Sample                    `xml:"Sample"`
	RegulatedCustomerIdentifier *RegulatedCustomerIdentifier `xml:"RegulatedCustomerIdentifier"`
	CustomerReference           string                       `xml:"CustomerReference"`
}

// CustomerReference ...
type CustomerReference string
