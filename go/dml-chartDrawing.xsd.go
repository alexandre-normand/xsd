// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

// CTShapeNonVisual ...
type CTShapeNonVisual struct {
	CNvPr   []*CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvSpPr []*CTNonVisualDrawingShapeProps `xml:"cNvSpPr"`
}

// CTShape ...
type CTShape struct {
	MacroAttr      string               `xml:"macro,attr,omitempty"`
	TextlinkAttr   string               `xml:"textlink,attr,omitempty"`
	FLocksTextAttr bool                 `xml:"fLocksText,attr,omitempty"`
	FPublishedAttr bool                 `xml:"fPublished,attr,omitempty"`
	NvSpPr         []*CTShapeNonVisual  `xml:"nvSpPr"`
	SpPr           []*CTShapeProperties `xml:"spPr"`
	Style          []*CTShapeStyle      `xml:"style"`
	TxBody         []*CTTextBody        `xml:"txBody"`
}

// CTConnectorNonVisual ...
type CTConnectorNonVisual struct {
	CNvPr      []*CTNonVisualDrawingProps        `xml:"cNvPr"`
	CNvCxnSpPr []*CTNonVisualConnectorProperties `xml:"cNvCxnSpPr"`
}

// CTConnector ...
type CTConnector struct {
	MacroAttr      string                  `xml:"macro,attr,omitempty"`
	FPublishedAttr bool                    `xml:"fPublished,attr,omitempty"`
	NvCxnSpPr      []*CTConnectorNonVisual `xml:"nvCxnSpPr"`
	SpPr           []*CTShapeProperties    `xml:"spPr"`
	Style          []*CTShapeStyle         `xml:"style"`
}

// CTPictureNonVisual ...
type CTPictureNonVisual struct {
	CNvPr    []*CTNonVisualDrawingProps      `xml:"cNvPr"`
	CNvPicPr []*CTNonVisualPictureProperties `xml:"cNvPicPr"`
}

// CTPicture ...
type CTPicture struct {
	MacroAttr      string                  `xml:"macro,attr,omitempty"`
	FPublishedAttr bool                    `xml:"fPublished,attr,omitempty"`
	NvPicPr        []*CTPictureNonVisual   `xml:"nvPicPr"`
	BlipFill       []*CTBlipFillProperties `xml:"blipFill"`
	SpPr           []*CTShapeProperties    `xml:"spPr"`
	Style          []*CTShapeStyle         `xml:"style"`
}

// CTGraphicFrameNonVisual ...
type CTGraphicFrameNonVisual struct {
	CNvPr             []*CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGraphicFramePr []*CTNonVisualGraphicFrameProperties `xml:"cNvGraphicFramePr"`
}

// CTGraphicFrame ...
type CTGraphicFrame struct {
	MacroAttr        string                     `xml:"macro,attr,omitempty"`
	FPublishedAttr   bool                       `xml:"fPublished,attr,omitempty"`
	NvGraphicFramePr []*CTGraphicFrameNonVisual `xml:"nvGraphicFramePr"`
	Xfrm             []*CTTransform2D           `xml:"xfrm"`
	AGraphic         []*CTGraphicalObject       `xml:"a:graphic"`
}

// CTGroupShapeNonVisual ...
type CTGroupShapeNonVisual struct {
	CNvPr      []*CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGrpSpPr []*CTNonVisualGroupDrawingShapeProps `xml:"cNvGrpSpPr"`
}

// CTGroupShape ...
type CTGroupShape struct {
	NvGrpSpPr    []*CTGroupShapeNonVisual  `xml:"nvGrpSpPr"`
	GrpSpPr      []*CTGroupShapeProperties `xml:"grpSpPr"`
	Sp           *CTShape                  `xml:"sp"`
	GrpSp        *CTGroupShape             `xml:"grpSp"`
	GraphicFrame *CTGraphicFrame           `xml:"graphicFrame"`
	CxnSp        *CTConnector              `xml:"cxnSp"`
	Pic          *CTPicture                `xml:"pic"`
}

// EGObjectChoices ...
type EGObjectChoices struct {
	Sp           *CTShape
	GrpSp        *CTGroupShape
	GraphicFrame *CTGraphicFrame
	CxnSp        *CTConnector
	Pic          *CTPicture
}

// STMarkerCoordinate ...
type STMarkerCoordinate float64

// CTMarker ...
type CTMarker struct {
	X []float64 `xml:"x"`
	Y []float64 `xml:"y"`
}

// CTRelSizeAnchor ...
type CTRelSizeAnchor struct {
	EGObjectChoices *EGObjectChoices
	From            *CTMarker `xml:"from"`
	To              *CTMarker `xml:"to"`
}

// CTAbsSizeAnchor ...
type CTAbsSizeAnchor struct {
	EGObjectChoices *EGObjectChoices
	From            *CTMarker         `xml:"from"`
	Ext             *CTPositiveSize2D `xml:"ext"`
}

// EGAnchor ...
type EGAnchor struct {
	RelSizeAnchor *CTRelSizeAnchor
	AbsSizeAnchor *CTAbsSizeAnchor
}

// CTDrawing ...
type CTDrawing struct {
	EGAnchor []*EGAnchor
}
