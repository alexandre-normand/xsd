// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

// STInteger255 ...
type STInteger255 int

// CTInteger255 ...
type CTInteger255 struct {
	ValAttr int `xml:"val,attr"`
}

// STInteger2 ...
type STInteger2 int

// CTInteger2 ...
type CTInteger2 struct {
	ValAttr int `xml:"val,attr"`
}

// STSpacingRule ...
type STSpacingRule int

// CTSpacingRule ...
type CTSpacingRule struct {
	ValAttr int `xml:"val,attr"`
}

// STUnSignedInteger ...
type STUnSignedInteger *Uint32

// CTUnSignedInteger ...
type CTUnSignedInteger struct {
	ValAttr *Uint32 `xml:"val,attr"`
}

// STChar ...
type STChar string

// CTChar ...
type CTChar struct {
	ValAttr string `xml:"val,attr"`
}

// CTOnOff ...
type CTOnOff struct {
	ValAttr *STOnOff `xml:"val,attr,omitempty"`
}

// CTString ...
type CTString struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// CTXAlign ...
type CTXAlign struct {
	ValAttr string `xml:"val,attr"`
}

// CTYAlign ...
type CTYAlign struct {
	ValAttr string `xml:"val,attr"`
}

// STShp ...
type STShp string

// CTShp ...
type CTShp struct {
	ValAttr string `xml:"val,attr"`
}

// STFType ...
type STFType string

// CTFType ...
type CTFType struct {
	ValAttr string `xml:"val,attr"`
}

// STLimLoc ...
type STLimLoc string

// CTLimLoc ...
type CTLimLoc struct {
	ValAttr string `xml:"val,attr"`
}

// STTopBot ...
type STTopBot string

// CTTopBot ...
type CTTopBot struct {
	ValAttr string `xml:"val,attr"`
}

// STScript ...
type STScript string

// CTScript ...
type CTScript struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// STStyle ...
type STStyle string

// CTStyle ...
type CTStyle struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// CTManualBreak ...
type CTManualBreak struct {
	AlnAtAttr int `xml:"alnAt,attr,omitempty"`
}

// EGScriptStyle ...
type EGScriptStyle struct {
	Scr *CTScript
	Sty *CTStyle
}

// CTRPR ...
type CTRPR struct {
	EGScriptStyle *EGScriptStyle
	Lit           *CTOnOff       `xml:"lit"`
	Nor           *CTOnOff       `xml:"nor"`
	Brk           *CTManualBreak `xml:"brk"`
	Aln           *CTOnOff       `xml:"aln"`
}

// CTText ...
type CTText struct {
	XmlSpaceAttr *Space `xml:"xml:space,attr,omitempty"`
}

// CTR ...
type CTR struct {
	WEGRPr             *EGRPr
	WEGRunInnerContent *EGRunInnerContent
	RPr                *CTRPR  `xml:"rPr"`
	T                  *CTText `xml:"t"`
}

// CTCtrlPr ...
type CTCtrlPr struct {
	WEGRPrMath *EGRPrMath
}

// CTAccPr ...
type CTAccPr struct {
	Chr    *CTChar   `xml:"chr"`
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTAcc ...
type CTAcc struct {
	AccPr *CTAccPr    `xml:"accPr"`
	E     *CTOMathArg `xml:"e"`
}

// CTBarPr ...
type CTBarPr struct {
	Pos    *CTTopBot `xml:"pos"`
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTBar ...
type CTBar struct {
	BarPr *CTBarPr    `xml:"barPr"`
	E     *CTOMathArg `xml:"e"`
}

// CTBoxPr ...
type CTBoxPr struct {
	OpEmu   *CTOnOff       `xml:"opEmu"`
	NoBreak *CTOnOff       `xml:"noBreak"`
	Diff    *CTOnOff       `xml:"diff"`
	Brk     *CTManualBreak `xml:"brk"`
	Aln     *CTOnOff       `xml:"aln"`
	CtrlPr  *CTCtrlPr      `xml:"ctrlPr"`
}

// CTBox ...
type CTBox struct {
	BoxPr *CTBoxPr    `xml:"boxPr"`
	E     *CTOMathArg `xml:"e"`
}

// CTBorderBoxPr ...
type CTBorderBoxPr struct {
	HideTop    *CTOnOff  `xml:"hideTop"`
	HideBot    *CTOnOff  `xml:"hideBot"`
	HideLeft   *CTOnOff  `xml:"hideLeft"`
	HideRight  *CTOnOff  `xml:"hideRight"`
	StrikeH    *CTOnOff  `xml:"strikeH"`
	StrikeV    *CTOnOff  `xml:"strikeV"`
	StrikeBLTR *CTOnOff  `xml:"strikeBLTR"`
	StrikeTLBR *CTOnOff  `xml:"strikeTLBR"`
	CtrlPr     *CTCtrlPr `xml:"ctrlPr"`
}

// CTBorderBox ...
type CTBorderBox struct {
	BorderBoxPr *CTBorderBoxPr `xml:"borderBoxPr"`
	E           *CTOMathArg    `xml:"e"`
}

// CTDPr ...
type CTDPr struct {
	BegChr *CTChar   `xml:"begChr"`
	SepChr *CTChar   `xml:"sepChr"`
	EndChr *CTChar   `xml:"endChr"`
	Grow   *CTOnOff  `xml:"grow"`
	Shp    *CTShp    `xml:"shp"`
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTD ...
type CTD struct {
	DPr *CTDPr        `xml:"dPr"`
	E   []*CTOMathArg `xml:"e"`
}

// CTEqArrPr ...
type CTEqArrPr struct {
	BaseJc  *CTYAlign          `xml:"baseJc"`
	MaxDist *CTOnOff           `xml:"maxDist"`
	ObjDist *CTOnOff           `xml:"objDist"`
	RSpRule *CTSpacingRule     `xml:"rSpRule"`
	RSp     *CTUnSignedInteger `xml:"rSp"`
	CtrlPr  *CTCtrlPr          `xml:"ctrlPr"`
}

// CTEqArr ...
type CTEqArr struct {
	EqArrPr *CTEqArrPr    `xml:"eqArrPr"`
	E       []*CTOMathArg `xml:"e"`
}

// CTFPr ...
type CTFPr struct {
	Type   *CTFType  `xml:"type"`
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTF ...
type CTF struct {
	FPr *CTFPr      `xml:"fPr"`
	Num *CTOMathArg `xml:"num"`
	Den *CTOMathArg `xml:"den"`
}

// CTFuncPr ...
type CTFuncPr struct {
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTFunc ...
type CTFunc struct {
	FuncPr *CTFuncPr   `xml:"funcPr"`
	FName  *CTOMathArg `xml:"fName"`
	E      *CTOMathArg `xml:"e"`
}

// CTGroupChrPr ...
type CTGroupChrPr struct {
	Chr    *CTChar   `xml:"chr"`
	Pos    *CTTopBot `xml:"pos"`
	VertJc *CTTopBot `xml:"vertJc"`
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTGroupChr ...
type CTGroupChr struct {
	GroupChrPr *CTGroupChrPr `xml:"groupChrPr"`
	E          *CTOMathArg   `xml:"e"`
}

// CTLimLowPr ...
type CTLimLowPr struct {
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTLimLow ...
type CTLimLow struct {
	LimLowPr *CTLimLowPr `xml:"limLowPr"`
	E        *CTOMathArg `xml:"e"`
	Lim      *CTOMathArg `xml:"lim"`
}

// CTLimUppPr ...
type CTLimUppPr struct {
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTLimUpp ...
type CTLimUpp struct {
	LimUppPr *CTLimUppPr `xml:"limUppPr"`
	E        *CTOMathArg `xml:"e"`
	Lim      *CTOMathArg `xml:"lim"`
}

// CTMCPr ...
type CTMCPr struct {
	Count *CTInteger255 `xml:"count"`
	McJc  *CTXAlign     `xml:"mcJc"`
}

// CTMC ...
type CTMC struct {
	McPr *CTMCPr `xml:"mcPr"`
}

// CTMCS ...
type CTMCS struct {
	Mc []*CTMC `xml:"mc"`
}

// CTMPr ...
type CTMPr struct {
	BaseJc  *CTYAlign          `xml:"baseJc"`
	PlcHide *CTOnOff           `xml:"plcHide"`
	RSpRule *CTSpacingRule     `xml:"rSpRule"`
	CGpRule *CTSpacingRule     `xml:"cGpRule"`
	RSp     *CTUnSignedInteger `xml:"rSp"`
	CSp     *CTUnSignedInteger `xml:"cSp"`
	CGp     *CTUnSignedInteger `xml:"cGp"`
	Mcs     *CTMCS             `xml:"mcs"`
	CtrlPr  *CTCtrlPr          `xml:"ctrlPr"`
}

// CTMR ...
type CTMR struct {
	E []*CTOMathArg `xml:"e"`
}

// CTM ...
type CTM struct {
	MPr *CTMPr  `xml:"mPr"`
	Mr  []*CTMR `xml:"mr"`
}

// CTNaryPr ...
type CTNaryPr struct {
	Chr     *CTChar   `xml:"chr"`
	LimLoc  *CTLimLoc `xml:"limLoc"`
	Grow    *CTOnOff  `xml:"grow"`
	SubHide *CTOnOff  `xml:"subHide"`
	SupHide *CTOnOff  `xml:"supHide"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr"`
}

// CTNary ...
type CTNary struct {
	NaryPr *CTNaryPr   `xml:"naryPr"`
	Sub    *CTOMathArg `xml:"sub"`
	Sup    *CTOMathArg `xml:"sup"`
	E      *CTOMathArg `xml:"e"`
}

// CTPhantPr ...
type CTPhantPr struct {
	Show     *CTOnOff  `xml:"show"`
	ZeroWid  *CTOnOff  `xml:"zeroWid"`
	ZeroAsc  *CTOnOff  `xml:"zeroAsc"`
	ZeroDesc *CTOnOff  `xml:"zeroDesc"`
	Transp   *CTOnOff  `xml:"transp"`
	CtrlPr   *CTCtrlPr `xml:"ctrlPr"`
}

// CTPhant ...
type CTPhant struct {
	PhantPr *CTPhantPr  `xml:"phantPr"`
	E       *CTOMathArg `xml:"e"`
}

// CTRadPr ...
type CTRadPr struct {
	DegHide *CTOnOff  `xml:"degHide"`
	CtrlPr  *CTCtrlPr `xml:"ctrlPr"`
}

// CTRad ...
type CTRad struct {
	RadPr *CTRadPr    `xml:"radPr"`
	Deg   *CTOMathArg `xml:"deg"`
	E     *CTOMathArg `xml:"e"`
}

// CTSPrePr ...
type CTSPrePr struct {
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTSPre ...
type CTSPre struct {
	SPrePr *CTSPrePr   `xml:"sPrePr"`
	Sub    *CTOMathArg `xml:"sub"`
	Sup    *CTOMathArg `xml:"sup"`
	E      *CTOMathArg `xml:"e"`
}

// CTSSubPr ...
type CTSSubPr struct {
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTSSub ...
type CTSSub struct {
	SSubPr *CTSSubPr   `xml:"sSubPr"`
	E      *CTOMathArg `xml:"e"`
	Sub    *CTOMathArg `xml:"sub"`
}

// CTSSubSupPr ...
type CTSSubSupPr struct {
	AlnScr *CTOnOff  `xml:"alnScr"`
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTSSubSup ...
type CTSSubSup struct {
	SSubSupPr *CTSSubSupPr `xml:"sSubSupPr"`
	E         *CTOMathArg  `xml:"e"`
	Sub       *CTOMathArg  `xml:"sub"`
	Sup       *CTOMathArg  `xml:"sup"`
}

// CTSSupPr ...
type CTSSupPr struct {
	CtrlPr *CTCtrlPr `xml:"ctrlPr"`
}

// CTSSup ...
type CTSSup struct {
	SSupPr *CTSSupPr   `xml:"sSupPr"`
	E      *CTOMathArg `xml:"e"`
	Sup    *CTOMathArg `xml:"sup"`
}

// EGOMathMathElements ...
type EGOMathMathElements struct {
	Acc       *CTAcc
	Bar       *CTBar
	Box       *CTBox
	BorderBox *CTBorderBox
	D         *CTD
	EqArr     *CTEqArr
	F         *CTF
	Func      *CTFunc
	GroupChr  *CTGroupChr
	LimLow    *CTLimLow
	LimUpp    *CTLimUpp
	M         *CTM
	Nary      *CTNary
	Phant     *CTPhant
	Rad       *CTRad
	SPre      *CTSPre
	SSub      *CTSSub
	SSubSup   *CTSSubSup
	SSup      *CTSSup
	R         *CTR
}

// EGOMathElements ...
type EGOMathElements struct {
	EGOMathMathElements *EGOMathMathElements
	WEGPContentMath     *EGPContentMath
}

// CTOMathArgPr ...
type CTOMathArgPr struct {
	ArgSz *CTInteger2 `xml:"argSz"`
}

// CTOMathArg ...
type CTOMathArg struct {
	EGOMathElements []*EGOMathElements
	ArgPr           *CTOMathArgPr `xml:"argPr"`
	CtrlPr          *CTCtrlPr     `xml:"ctrlPr"`
}

// STJc ...
type STJc string

// CTOMathJc ...
type CTOMathJc struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// CTOMathParaPr ...
type CTOMathParaPr struct {
	Jc *CTOMathJc `xml:"jc"`
}

// CTTwipsMeasure ...
type CTTwipsMeasure struct {
	ValAttr *STTwipsMeasure `xml:"val,attr"`
}

// STBreakBin ...
type STBreakBin string

// CTBreakBin ...
type CTBreakBin struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// STBreakBinSub ...
type STBreakBinSub string

// CTBreakBinSub ...
type CTBreakBinSub struct {
	ValAttr string `xml:"val,attr,omitempty"`
}

// CTMathPr ...
type CTMathPr struct {
	MathFont   *CTString       `xml:"mathFont"`
	BrkBin     *CTBreakBin     `xml:"brkBin"`
	BrkBinSub  *CTBreakBinSub  `xml:"brkBinSub"`
	SmallFrac  *CTOnOff        `xml:"smallFrac"`
	DispDef    *CTOnOff        `xml:"dispDef"`
	LMargin    *CTTwipsMeasure `xml:"lMargin"`
	RMargin    *CTTwipsMeasure `xml:"rMargin"`
	DefJc      *CTOMathJc      `xml:"defJc"`
	PreSp      *CTTwipsMeasure `xml:"preSp"`
	PostSp     *CTTwipsMeasure `xml:"postSp"`
	InterSp    *CTTwipsMeasure `xml:"interSp"`
	IntraSp    *CTTwipsMeasure `xml:"intraSp"`
	WrapIndent *CTTwipsMeasure `xml:"wrapIndent"`
	WrapRight  *CTOnOff        `xml:"wrapRight"`
	IntLim     *CTLimLoc       `xml:"intLim"`
	NaryLim    *CTLimLoc       `xml:"naryLim"`
}

// MathPr ...
type MathPr *CTMathPr

// CTOMathPara ...
type CTOMathPara struct {
	OMathParaPr *CTOMathParaPr `xml:"oMathParaPr"`
	OMath       []*CTOMath     `xml:"oMath"`
}

// CTOMath ...
type CTOMath struct {
	EGOMathElements []*EGOMathElements
}

// OMathPara ...
type OMathPara *CTOMathPara

// OMath ...
type OMath *CTOMath
