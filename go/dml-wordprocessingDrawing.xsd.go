// Copyright 2020 The xgen Authors. All rights reserved.
//
// DO NOT EDIT: generated by xgen XSD generator
//
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

package schema

// CTEffectExtent ...
type CTEffectExtent struct {
	LAttr *STCoordinate `xml:"l,attr"`
	TAttr *STCoordinate `xml:"t,attr"`
	RAttr *STCoordinate `xml:"r,attr"`
	BAttr *STCoordinate `xml:"b,attr"`
}

// STWrapDistance ...
type STWrapDistance *Uint32

// CTInline ...
type CTInline struct {
	DistTAttr         *Uint32                              `xml:"distT,attr,omitempty"`
	DistBAttr         *Uint32                              `xml:"distB,attr,omitempty"`
	DistLAttr         *Uint32                              `xml:"distL,attr,omitempty"`
	DistRAttr         *Uint32                              `xml:"distR,attr,omitempty"`
	Extent            *CTPositiveSize2D                    `xml:"extent"`
	EffectExtent      *CTEffectExtent                      `xml:"effectExtent"`
	DocPr             []*CTNonVisualDrawingProps           `xml:"docPr"`
	CNvGraphicFramePr []*CTNonVisualGraphicFrameProperties `xml:"cNvGraphicFramePr"`
	AGraphic          []*CTGraphicalObject                 `xml:"a:graphic"`
}

// STWrapText ...
type STWrapText string

// CTWrapPath ...
type CTWrapPath struct {
	EditedAttr bool         `xml:"edited,attr,omitempty"`
	Start      []*CTPoint2D `xml:"start"`
	LineTo     []*CTPoint2D `xml:"lineTo"`
}

// CTWrapNone ...
type CTWrapNone struct {
}

// CTWrapSquare ...
type CTWrapSquare struct {
	WrapTextAttr string          `xml:"wrapText,attr"`
	DistTAttr    *Uint32         `xml:"distT,attr,omitempty"`
	DistBAttr    *Uint32         `xml:"distB,attr,omitempty"`
	DistLAttr    *Uint32         `xml:"distL,attr,omitempty"`
	DistRAttr    *Uint32         `xml:"distR,attr,omitempty"`
	EffectExtent *CTEffectExtent `xml:"effectExtent"`
}

// CTWrapTight ...
type CTWrapTight struct {
	WrapTextAttr string        `xml:"wrapText,attr"`
	DistLAttr    *Uint32       `xml:"distL,attr,omitempty"`
	DistRAttr    *Uint32       `xml:"distR,attr,omitempty"`
	WrapPolygon  []*CTWrapPath `xml:"wrapPolygon"`
}

// CTWrapThrough ...
type CTWrapThrough struct {
	WrapTextAttr string        `xml:"wrapText,attr"`
	DistLAttr    *Uint32       `xml:"distL,attr,omitempty"`
	DistRAttr    *Uint32       `xml:"distR,attr,omitempty"`
	WrapPolygon  []*CTWrapPath `xml:"wrapPolygon"`
}

// CTWrapTopBottom ...
type CTWrapTopBottom struct {
	DistTAttr    *Uint32         `xml:"distT,attr,omitempty"`
	DistBAttr    *Uint32         `xml:"distB,attr,omitempty"`
	EffectExtent *CTEffectExtent `xml:"effectExtent"`
}

// EGWrapType ...
type EGWrapType struct {
	WrapNone         []*CTWrapNone
	WrapSquare       []*CTWrapSquare
	WrapTight        []*CTWrapTight
	WrapThrough      []*CTWrapThrough
	WrapTopAndBottom []*CTWrapTopBottom
}

// STPositionOffset ...
type STPositionOffset int

// STAlignH ...
type STAlignH string

// STRelFromH ...
type STRelFromH string

// CTPosH ...
type CTPosH struct {
	RelativeFromAttr string   `xml:"relativeFrom,attr"`
	Align            []string `xml:"align"`
	PosOffset        []int    `xml:"posOffset"`
}

// STAlignV ...
type STAlignV string

// STRelFromV ...
type STRelFromV string

// CTPosV ...
type CTPosV struct {
	RelativeFromAttr string   `xml:"relativeFrom,attr"`
	Align            []string `xml:"align"`
	PosOffset        []int    `xml:"posOffset"`
}

// CTAnchor ...
type CTAnchor struct {
	DistTAttr          *Uint32 `xml:"distT,attr,omitempty"`
	DistBAttr          *Uint32 `xml:"distB,attr,omitempty"`
	DistLAttr          *Uint32 `xml:"distL,attr,omitempty"`
	DistRAttr          *Uint32 `xml:"distR,attr,omitempty"`
	SimplePosAttr      bool    `xml:"simplePos,attr,omitempty"`
	RelativeHeightAttr *Uint32 `xml:"relativeHeight,attr"`
	BehindDocAttr      bool    `xml:"behindDoc,attr"`
	LockedAttr         bool    `xml:"locked,attr"`
	LayoutInCellAttr   bool    `xml:"layoutInCell,attr"`
	HiddenAttr         bool    `xml:"hidden,attr,omitempty"`
	AllowOverlapAttr   bool    `xml:"allowOverlap,attr"`
	EGWrapType         *EGWrapType
	SimplePos          *CTPoint2D                           `xml:"simplePos"`
	PositionH          *CTPosH                              `xml:"positionH"`
	PositionV          *CTPosV                              `xml:"positionV"`
	Extent             *CTPositiveSize2D                    `xml:"extent"`
	EffectExtent       *CTEffectExtent                      `xml:"effectExtent"`
	DocPr              []*CTNonVisualDrawingProps           `xml:"docPr"`
	CNvGraphicFramePr  []*CTNonVisualGraphicFrameProperties `xml:"cNvGraphicFramePr"`
	AGraphic           []*CTGraphicalObject                 `xml:"a:graphic"`
}

// CTTxbxContent ...
type CTTxbxContent struct {
	WEGBlockLevelElts []*EGBlockLevelElts
}

// CTTextboxInfo ...
type CTTextboxInfo struct {
	IdAttr      *Uint16                     `xml:"id,attr,omitempty"`
	TxbxContent []*CTTxbxContent            `xml:"txbxContent"`
	ExtLst      []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTLinkedTextboxInformation ...
type CTLinkedTextboxInformation struct {
	IdAttr  *Uint16                     `xml:"id,attr"`
	SeqAttr *Uint16                     `xml:"seq,attr"`
	ExtLst  []*CTOfficeArtExtensionList `xml:"extLst"`
}

// CTWordprocessingShape ...
type CTWordprocessingShape struct {
	NormalEastAsianFlowAttr bool                              `xml:"normalEastAsianFlow,attr,omitempty"`
	CNvPr                   []*CTNonVisualDrawingProps        `xml:"cNvPr"`
	CNvSpPr                 []*CTNonVisualDrawingShapeProps   `xml:"cNvSpPr"`
	CNvCnPr                 []*CTNonVisualConnectorProperties `xml:"cNvCnPr"`
	SpPr                    []*CTShapeProperties              `xml:"spPr"`
	Style                   []*CTShapeStyle                   `xml:"style"`
	ExtLst                  []*CTOfficeArtExtensionList       `xml:"extLst"`
	Txbx                    []*CTTextboxInfo                  `xml:"txbx"`
	LinkedTxbx              []*CTLinkedTextboxInformation     `xml:"linkedTxbx"`
	BodyPr                  []*CTTextBodyProperties           `xml:"bodyPr"`
}

// CTGraphicFrame ...
type CTGraphicFrame struct {
	CNvPr    []*CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvFrPr  []*CTNonVisualGraphicFrameProperties `xml:"cNvFrPr"`
	Xfrm     []*CTTransform2D                     `xml:"xfrm"`
	AGraphic []*CTGraphicalObject                 `xml:"a:graphic"`
	ExtLst   []*CTOfficeArtExtensionList          `xml:"extLst"`
}

// CTWordprocessingContentPartNonVisual ...
type CTWordprocessingContentPartNonVisual struct {
	CNvPr            []*CTNonVisualDrawingProps          `xml:"cNvPr"`
	CNvContentPartPr []*CTNonVisualContentPartProperties `xml:"cNvContentPartPr"`
}

// CTWordprocessingContentPart ...
type CTWordprocessingContentPart struct {
	BwModeAttr      string                                  `xml:"bwMode,attr,omitempty"`
	RIdAttr         string                                  `xml:"r:id,attr"`
	NvContentPartPr []*CTWordprocessingContentPartNonVisual `xml:"nvContentPartPr"`
	Xfrm            []*CTTransform2D                        `xml:"xfrm"`
	ExtLst          []*CTOfficeArtExtensionList             `xml:"extLst"`
}

// CTWordprocessingGroup ...
type CTWordprocessingGroup struct {
	CNvPr        []*CTNonVisualDrawingProps           `xml:"cNvPr"`
	CNvGrpSpPr   []*CTNonVisualGroupDrawingShapeProps `xml:"cNvGrpSpPr"`
	GrpSpPr      []*CTGroupShapeProperties            `xml:"grpSpPr"`
	Wsp          *CTWordprocessingShape               `xml:"wsp"`
	GrpSp        *CTWordprocessingGroup               `xml:"grpSp"`
	GraphicFrame *CTGraphicFrame                      `xml:"graphicFrame"`
	DpctPic      *CTPicture                           `xml:"dpct:pic"`
	ContentPart  *CTWordprocessingContentPart         `xml:"contentPart"`
	ExtLst       []*CTOfficeArtExtensionList          `xml:"extLst"`
}

// CTWordprocessingCanvas ...
type CTWordprocessingCanvas struct {
	Bg           []*CTBackgroundFormatting    `xml:"bg"`
	Whole        []*CTWholeE2oFormatting      `xml:"whole"`
	Wsp          *CTWordprocessingShape       `xml:"wsp"`
	DpctPic      *CTPicture                   `xml:"dpct:pic"`
	ContentPart  *CTWordprocessingContentPart `xml:"contentPart"`
	Wgp          *CTWordprocessingGroup       `xml:"wgp"`
	GraphicFrame *CTGraphicFrame              `xml:"graphicFrame"`
	ExtLst       []*CTOfficeArtExtensionList  `xml:"extLst"`
}

// Wpc ...
type Wpc *CTWordprocessingCanvas

// Wgp ...
type Wgp *CTWordprocessingGroup

// Wsp ...
type Wsp *CTWordprocessingShape

// Inline ...
type Inline *CTInline

// Anchor ...
type Anchor *CTAnchor
